// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/tavern/ent/beacon"
)

// Beacon is the model entity for the Beacon schema.
type Beacon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// A human readable identifier for the beacon.
	Name string `json:"name,omitempty"`
	// The identity the beacon is authenticated as (e.g. 'root')
	Principal string `json:"principal,omitempty"`
	// The hostname of the system the beacon is running on.
	Hostname string `json:"hostname,omitempty"`
	// Unique identifier for the beacon. Unique to each instance of the beacon.
	Identifier string `json:"identifier,omitempty"`
	// Identifies the agent that the beacon is running as (e.g. 'imix').
	AgentIdentifier string `json:"agent_identifier,omitempty"`
	// Unique identifier for the host the beacon is running on.
	HostIdentifier string `json:"host_identifier,omitempty"`
	// Primary interface IP address reported by the agent.
	HostPrimaryIP string `json:"host_primary_ip,omitempty"`
	// Platform the agent is operating on.
	HostPlatform beacon.HostPlatform `json:"host_platform,omitempty"`
	// Timestamp of when a task was last claimed or updated for the beacon.
	LastSeenAt time.Time `json:"last_seen_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BeaconQuery when eager-loading is set.
	Edges BeaconEdges `json:"edges"`
}

// BeaconEdges holds the relations/edges for other nodes in the graph.
type BeaconEdges struct {
	// Tags used to group this beacon with other beacons.
	Tags []*Tag `json:"tags,omitempty"`
	// Tasks that have been assigned to the beacon.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTags  map[string][]*Tag
	namedTasks map[string][]*Task
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e BeaconEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e BeaconEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Beacon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case beacon.FieldID:
			values[i] = new(sql.NullInt64)
		case beacon.FieldName, beacon.FieldPrincipal, beacon.FieldHostname, beacon.FieldIdentifier, beacon.FieldAgentIdentifier, beacon.FieldHostIdentifier, beacon.FieldHostPrimaryIP, beacon.FieldHostPlatform:
			values[i] = new(sql.NullString)
		case beacon.FieldLastSeenAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Beacon", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Beacon fields.
func (b *Beacon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case beacon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case beacon.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case beacon.FieldPrincipal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field principal", values[i])
			} else if value.Valid {
				b.Principal = value.String
			}
		case beacon.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				b.Hostname = value.String
			}
		case beacon.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				b.Identifier = value.String
			}
		case beacon.FieldAgentIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_identifier", values[i])
			} else if value.Valid {
				b.AgentIdentifier = value.String
			}
		case beacon.FieldHostIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_identifier", values[i])
			} else if value.Valid {
				b.HostIdentifier = value.String
			}
		case beacon.FieldHostPrimaryIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_primary_ip", values[i])
			} else if value.Valid {
				b.HostPrimaryIP = value.String
			}
		case beacon.FieldHostPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_platform", values[i])
			} else if value.Valid {
				b.HostPlatform = beacon.HostPlatform(value.String)
			}
		case beacon.FieldLastSeenAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen_at", values[i])
			} else if value.Valid {
				b.LastSeenAt = value.Time
			}
		}
	}
	return nil
}

// QueryTags queries the "tags" edge of the Beacon entity.
func (b *Beacon) QueryTags() *TagQuery {
	return NewBeaconClient(b.config).QueryTags(b)
}

// QueryTasks queries the "tasks" edge of the Beacon entity.
func (b *Beacon) QueryTasks() *TaskQuery {
	return NewBeaconClient(b.config).QueryTasks(b)
}

// Update returns a builder for updating this Beacon.
// Note that you need to call Beacon.Unwrap() before calling this method if this Beacon
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Beacon) Update() *BeaconUpdateOne {
	return NewBeaconClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Beacon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Beacon) Unwrap() *Beacon {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Beacon is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Beacon) String() string {
	var builder strings.Builder
	builder.WriteString("Beacon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("principal=")
	builder.WriteString(b.Principal)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(b.Hostname)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(b.Identifier)
	builder.WriteString(", ")
	builder.WriteString("agent_identifier=")
	builder.WriteString(b.AgentIdentifier)
	builder.WriteString(", ")
	builder.WriteString("host_identifier=")
	builder.WriteString(b.HostIdentifier)
	builder.WriteString(", ")
	builder.WriteString("host_primary_ip=")
	builder.WriteString(b.HostPrimaryIP)
	builder.WriteString(", ")
	builder.WriteString("host_platform=")
	builder.WriteString(fmt.Sprintf("%v", b.HostPlatform))
	builder.WriteString(", ")
	builder.WriteString("last_seen_at=")
	builder.WriteString(b.LastSeenAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTags returns the Tags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Beacon) NamedTags(name string) ([]*Tag, error) {
	if b.Edges.namedTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Beacon) appendNamedTags(name string, edges ...*Tag) {
	if b.Edges.namedTags == nil {
		b.Edges.namedTags = make(map[string][]*Tag)
	}
	if len(edges) == 0 {
		b.Edges.namedTags[name] = []*Tag{}
	} else {
		b.Edges.namedTags[name] = append(b.Edges.namedTags[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Beacon) NamedTasks(name string) ([]*Task, error) {
	if b.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Beacon) appendNamedTasks(name string, edges ...*Task) {
	if b.Edges.namedTasks == nil {
		b.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		b.Edges.namedTasks[name] = []*Task{}
	} else {
		b.Edges.namedTasks[name] = append(b.Edges.namedTasks[name], edges...)
	}
}

// Beacons is a parsable slice of Beacon.
type Beacons []*Beacon
