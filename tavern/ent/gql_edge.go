// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (j *Job) Tome(ctx context.Context) (*Tome, error) {
	result, err := j.Edges.TomeOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryTome().Only(ctx)
	}
	return result, err
}

func (j *Job) Bundle(ctx context.Context) (*File, error) {
	result, err := j.Edges.BundleOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryBundle().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = j.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = j.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = j.QueryTasks().All(ctx)
	}
	return result, err
}

func (t *Tag) Targets(ctx context.Context) (result []*Target, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedTargets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.TargetsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryTargets().All(ctx)
	}
	return result, err
}

func (t *Target) Tags(ctx context.Context) (result []*Tag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.TagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryTags().All(ctx)
	}
	return result, err
}

func (t *Task) Job(ctx context.Context) (*Job, error) {
	result, err := t.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryJob().Only(ctx)
	}
	return result, err
}

func (t *Task) Target(ctx context.Context) (*Target, error) {
	result, err := t.Edges.TargetOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTarget().Only(ctx)
	}
	return result, err
}

func (t *Tome) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryFiles().All(ctx)
	}
	return result, err
}
