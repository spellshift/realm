// Code generated by ent, DO NOT EDIT.

package ent

// CreateJobInput represents a mutation input for creating jobs.
type CreateJobInput struct {
	Name   string
	TomeID int
}

// Mutate applies the CreateJobInput on the JobMutation builder.
func (i *CreateJobInput) Mutate(m *JobMutation) {
	m.SetName(i.Name)
	m.SetTomeID(i.TomeID)
}

// SetInput applies the change-set in the CreateJobInput on the JobCreate builder.
func (c *JobCreate) SetInput(i CreateJobInput) *JobCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSessionInput represents a mutation input for updating sessions.
type UpdateSessionInput struct {
	ClearHostname bool
	Hostname      *string
	AddTagIDs     []int
	RemoveTagIDs  []int
}

// Mutate applies the UpdateSessionInput on the SessionMutation builder.
func (i *UpdateSessionInput) Mutate(m *SessionMutation) {
	if i.ClearHostname {
		m.ClearHostname()
	}
	if v := i.Hostname; v != nil {
		m.SetHostname(*v)
	}
	if v := i.AddTagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.RemoveTagIDs; len(v) > 0 {
		m.RemoveTagIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSessionInput on the SessionUpdate builder.
func (c *SessionUpdate) SetInput(i UpdateSessionInput) *SessionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSessionInput on the SessionUpdateOne builder.
func (c *SessionUpdateOne) SetInput(i UpdateSessionInput) *SessionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTomeInput represents a mutation input for creating tomes.
type CreateTomeInput struct {
	Name        string
	Description string
	Parameters  *string
	Eldritch    string
	FileIDs     []int
}

// Mutate applies the CreateTomeInput on the TomeMutation builder.
func (i *CreateTomeInput) Mutate(m *TomeMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.Parameters; v != nil {
		m.SetParameters(*v)
	}
	m.SetEldritch(i.Eldritch)
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTomeInput on the TomeCreate builder.
func (c *TomeCreate) SetInput(i CreateTomeInput) *TomeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name        *string
	PhotoURL    *string
	IsActivated *bool
	IsAdmin     *bool
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PhotoURL; v != nil {
		m.SetPhotoURL(*v)
	}
	if v := i.IsActivated; v != nil {
		m.SetIsActivated(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
