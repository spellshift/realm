// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateFileInput represents a mutation input for creating files.
type CreateFileInput struct {
	Name           string
	Size           *int
	Hash           string
	CreatedAt      *time.Time
	LastModifiedAt *time.Time
}

// Mutate applies the CreateFileInput on the FileMutation builder.
func (i *CreateFileInput) Mutate(m *FileMutation) {
	m.SetName(i.Name)
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	m.SetHash(i.Hash)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.LastModifiedAt; v != nil {
		m.SetLastModifiedAt(*v)
	}
}

// SetInput applies the change-set in the CreateFileInput on the FileCreate builder.
func (c *FileCreate) SetInput(i CreateFileInput) *FileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFileInput represents a mutation input for updating files.
type UpdateFileInput struct {
	Name           *string
	Size           *int
	Hash           *string
	CreatedAt      *time.Time
	LastModifiedAt *time.Time
}

// Mutate applies the UpdateFileInput on the FileMutation builder.
func (i *UpdateFileInput) Mutate(m *FileMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if v := i.Hash; v != nil {
		m.SetHash(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.LastModifiedAt; v != nil {
		m.SetLastModifiedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdate builder.
func (c *FileUpdate) SetInput(i UpdateFileInput) *FileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdateOne builder.
func (c *FileUpdateOne) SetInput(i UpdateFileInput) *FileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name        string
	OAuthID     string
	PhotoURL    string
	IsActivated *bool
	IsAdmin     *bool
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetOAuthID(i.OAuthID)
	m.SetPhotoURL(i.PhotoURL)
	if v := i.IsActivated; v != nil {
		m.SetIsActivated(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name        *string
	PhotoURL    *string
	IsActivated *bool
	IsAdmin     *bool
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PhotoURL; v != nil {
		m.SetPhotoURL(*v)
	}
	if v := i.IsActivated; v != nil {
		m.SetIsActivated(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
