// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/kcarretto/realm/tavern/ent/file"
	"github.com/kcarretto/realm/tavern/ent/job"
	"github.com/kcarretto/realm/tavern/ent/predicate"
	"github.com/kcarretto/realm/tavern/ent/session"
	"github.com/kcarretto/realm/tavern/ent/tag"
	"github.com/kcarretto/realm/tavern/ent/task"
	"github.com/kcarretto/realm/tavern/ent/tome"
	"github.com/kcarretto/realm/tavern/ent/user"
)

// FileWhereInput represents a where input for filtering File queries.
type FileWhereInput struct {
	Predicates []predicate.File  `json:"-"`
	Not        *FileWhereInput   `json:"not,omitempty"`
	Or         []*FileWhereInput `json:"or,omitempty"`
	And        []*FileWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "createdAt" field predicates.
	CreatedAt      *time.Time  `json:"createdat,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdatNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdatIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdatNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdatGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdatGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdatLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdatLTE,omitempty"`

	// "lastModifiedAt" field predicates.
	LastModifiedAt      *time.Time  `json:"lastmodifiedat,omitempty"`
	LastModifiedAtNEQ   *time.Time  `json:"lastmodifiedatNEQ,omitempty"`
	LastModifiedAtIn    []time.Time `json:"lastmodifiedatIn,omitempty"`
	LastModifiedAtNotIn []time.Time `json:"lastmodifiedatNotIn,omitempty"`
	LastModifiedAtGT    *time.Time  `json:"lastmodifiedatGT,omitempty"`
	LastModifiedAtGTE   *time.Time  `json:"lastmodifiedatGTE,omitempty"`
	LastModifiedAtLT    *time.Time  `json:"lastmodifiedatLT,omitempty"`
	LastModifiedAtLTE   *time.Time  `json:"lastmodifiedatLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "size" field predicates.
	Size      *int  `json:"size,omitempty"`
	SizeNEQ   *int  `json:"sizeNEQ,omitempty"`
	SizeIn    []int `json:"sizeIn,omitempty"`
	SizeNotIn []int `json:"sizeNotIn,omitempty"`
	SizeGT    *int  `json:"sizeGT,omitempty"`
	SizeGTE   *int  `json:"sizeGTE,omitempty"`
	SizeLT    *int  `json:"sizeLT,omitempty"`
	SizeLTE   *int  `json:"sizeLTE,omitempty"`

	// "hash" field predicates.
	Hash             *string  `json:"hash,omitempty"`
	HashNEQ          *string  `json:"hashNEQ,omitempty"`
	HashIn           []string `json:"hashIn,omitempty"`
	HashNotIn        []string `json:"hashNotIn,omitempty"`
	HashGT           *string  `json:"hashGT,omitempty"`
	HashGTE          *string  `json:"hashGTE,omitempty"`
	HashLT           *string  `json:"hashLT,omitempty"`
	HashLTE          *string  `json:"hashLTE,omitempty"`
	HashContains     *string  `json:"hashContains,omitempty"`
	HashHasPrefix    *string  `json:"hashHasPrefix,omitempty"`
	HashHasSuffix    *string  `json:"hashHasSuffix,omitempty"`
	HashEqualFold    *string  `json:"hashEqualFold,omitempty"`
	HashContainsFold *string  `json:"hashContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FileWhereInput) AddPredicates(predicates ...predicate.File) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FileWhereInput filter on the FileQuery builder.
func (i *FileWhereInput) Filter(q *FileQuery) (*FileQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFileWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFileWhereInput is returned in case the FileWhereInput is empty.
var ErrEmptyFileWhereInput = errors.New("ent: empty predicate FileWhereInput")

// P returns a predicate for filtering files.
// An error is returned if the input is empty or invalid.
func (i *FileWhereInput) P() (predicate.File, error) {
	var predicates []predicate.File
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, file.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.File, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, file.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.File, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, file.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, file.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, file.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, file.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, file.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, file.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, file.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, file.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, file.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, file.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, file.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, file.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, file.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, file.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, file.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, file.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, file.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.LastModifiedAt != nil {
		predicates = append(predicates, file.LastModifiedAtEQ(*i.LastModifiedAt))
	}
	if i.LastModifiedAtNEQ != nil {
		predicates = append(predicates, file.LastModifiedAtNEQ(*i.LastModifiedAtNEQ))
	}
	if len(i.LastModifiedAtIn) > 0 {
		predicates = append(predicates, file.LastModifiedAtIn(i.LastModifiedAtIn...))
	}
	if len(i.LastModifiedAtNotIn) > 0 {
		predicates = append(predicates, file.LastModifiedAtNotIn(i.LastModifiedAtNotIn...))
	}
	if i.LastModifiedAtGT != nil {
		predicates = append(predicates, file.LastModifiedAtGT(*i.LastModifiedAtGT))
	}
	if i.LastModifiedAtGTE != nil {
		predicates = append(predicates, file.LastModifiedAtGTE(*i.LastModifiedAtGTE))
	}
	if i.LastModifiedAtLT != nil {
		predicates = append(predicates, file.LastModifiedAtLT(*i.LastModifiedAtLT))
	}
	if i.LastModifiedAtLTE != nil {
		predicates = append(predicates, file.LastModifiedAtLTE(*i.LastModifiedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, file.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, file.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, file.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, file.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, file.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, file.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, file.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, file.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, file.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, file.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, file.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, file.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, file.NameContainsFold(*i.NameContainsFold))
	}
	if i.Size != nil {
		predicates = append(predicates, file.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, file.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, file.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, file.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, file.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, file.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, file.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, file.SizeLTE(*i.SizeLTE))
	}
	if i.Hash != nil {
		predicates = append(predicates, file.HashEQ(*i.Hash))
	}
	if i.HashNEQ != nil {
		predicates = append(predicates, file.HashNEQ(*i.HashNEQ))
	}
	if len(i.HashIn) > 0 {
		predicates = append(predicates, file.HashIn(i.HashIn...))
	}
	if len(i.HashNotIn) > 0 {
		predicates = append(predicates, file.HashNotIn(i.HashNotIn...))
	}
	if i.HashGT != nil {
		predicates = append(predicates, file.HashGT(*i.HashGT))
	}
	if i.HashGTE != nil {
		predicates = append(predicates, file.HashGTE(*i.HashGTE))
	}
	if i.HashLT != nil {
		predicates = append(predicates, file.HashLT(*i.HashLT))
	}
	if i.HashLTE != nil {
		predicates = append(predicates, file.HashLTE(*i.HashLTE))
	}
	if i.HashContains != nil {
		predicates = append(predicates, file.HashContains(*i.HashContains))
	}
	if i.HashHasPrefix != nil {
		predicates = append(predicates, file.HashHasPrefix(*i.HashHasPrefix))
	}
	if i.HashHasSuffix != nil {
		predicates = append(predicates, file.HashHasSuffix(*i.HashHasSuffix))
	}
	if i.HashEqualFold != nil {
		predicates = append(predicates, file.HashEqualFold(*i.HashEqualFold))
	}
	if i.HashContainsFold != nil {
		predicates = append(predicates, file.HashContainsFold(*i.HashContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFileWhereInput
	case 1:
		return predicates[0], nil
	default:
		return file.And(predicates...), nil
	}
}

// JobWhereInput represents a where input for filtering Job queries.
type JobWhereInput struct {
	Predicates []predicate.Job  `json:"-"`
	Not        *JobWhereInput   `json:"not,omitempty"`
	Or         []*JobWhereInput `json:"or,omitempty"`
	And        []*JobWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "createdAt" field predicates.
	CreatedAt      *time.Time  `json:"createdat,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdatNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdatIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdatNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdatGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdatGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdatLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdatLTE,omitempty"`

	// "lastModifiedAt" field predicates.
	LastModifiedAt      *time.Time  `json:"lastmodifiedat,omitempty"`
	LastModifiedAtNEQ   *time.Time  `json:"lastmodifiedatNEQ,omitempty"`
	LastModifiedAtIn    []time.Time `json:"lastmodifiedatIn,omitempty"`
	LastModifiedAtNotIn []time.Time `json:"lastmodifiedatNotIn,omitempty"`
	LastModifiedAtGT    *time.Time  `json:"lastmodifiedatGT,omitempty"`
	LastModifiedAtGTE   *time.Time  `json:"lastmodifiedatGTE,omitempty"`
	LastModifiedAtLT    *time.Time  `json:"lastmodifiedatLT,omitempty"`
	LastModifiedAtLTE   *time.Time  `json:"lastmodifiedatLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "tome" edge predicates.
	HasTome     *bool             `json:"hasTome,omitempty"`
	HasTomeWith []*TomeWhereInput `json:"hasTomeWith,omitempty"`

	// "bundle" edge predicates.
	HasBundle     *bool             `json:"hasBundle,omitempty"`
	HasBundleWith []*FileWhereInput `json:"hasBundleWith,omitempty"`

	// "tasks" edge predicates.
	HasTasks     *bool             `json:"hasTasks,omitempty"`
	HasTasksWith []*TaskWhereInput `json:"hasTasksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *JobWhereInput) AddPredicates(predicates ...predicate.Job) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the JobWhereInput filter on the JobQuery builder.
func (i *JobWhereInput) Filter(q *JobQuery) (*JobQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyJobWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyJobWhereInput is returned in case the JobWhereInput is empty.
var ErrEmptyJobWhereInput = errors.New("ent: empty predicate JobWhereInput")

// P returns a predicate for filtering jobs.
// An error is returned if the input is empty or invalid.
func (i *JobWhereInput) P() (predicate.Job, error) {
	var predicates []predicate.Job
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, job.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Job, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, job.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Job, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, job.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, job.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, job.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, job.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, job.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, job.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, job.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, job.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, job.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, job.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, job.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, job.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, job.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, job.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, job.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, job.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, job.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.LastModifiedAt != nil {
		predicates = append(predicates, job.LastModifiedAtEQ(*i.LastModifiedAt))
	}
	if i.LastModifiedAtNEQ != nil {
		predicates = append(predicates, job.LastModifiedAtNEQ(*i.LastModifiedAtNEQ))
	}
	if len(i.LastModifiedAtIn) > 0 {
		predicates = append(predicates, job.LastModifiedAtIn(i.LastModifiedAtIn...))
	}
	if len(i.LastModifiedAtNotIn) > 0 {
		predicates = append(predicates, job.LastModifiedAtNotIn(i.LastModifiedAtNotIn...))
	}
	if i.LastModifiedAtGT != nil {
		predicates = append(predicates, job.LastModifiedAtGT(*i.LastModifiedAtGT))
	}
	if i.LastModifiedAtGTE != nil {
		predicates = append(predicates, job.LastModifiedAtGTE(*i.LastModifiedAtGTE))
	}
	if i.LastModifiedAtLT != nil {
		predicates = append(predicates, job.LastModifiedAtLT(*i.LastModifiedAtLT))
	}
	if i.LastModifiedAtLTE != nil {
		predicates = append(predicates, job.LastModifiedAtLTE(*i.LastModifiedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, job.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, job.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, job.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, job.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, job.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, job.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, job.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, job.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, job.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, job.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, job.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, job.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, job.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasTome != nil {
		p := job.HasTome()
		if !*i.HasTome {
			p = job.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTomeWith) > 0 {
		with := make([]predicate.Tome, 0, len(i.HasTomeWith))
		for _, w := range i.HasTomeWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTomeWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, job.HasTomeWith(with...))
	}
	if i.HasBundle != nil {
		p := job.HasBundle()
		if !*i.HasBundle {
			p = job.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBundleWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasBundleWith))
		for _, w := range i.HasBundleWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBundleWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, job.HasBundleWith(with...))
	}
	if i.HasTasks != nil {
		p := job.HasTasks()
		if !*i.HasTasks {
			p = job.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTasksWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTasksWith))
		for _, w := range i.HasTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTasksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, job.HasTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyJobWhereInput
	case 1:
		return predicates[0], nil
	default:
		return job.And(predicates...), nil
	}
}

// SessionWhereInput represents a where input for filtering Session queries.
type SessionWhereInput struct {
	Predicates []predicate.Session  `json:"-"`
	Not        *SessionWhereInput   `json:"not,omitempty"`
	Or         []*SessionWhereInput `json:"or,omitempty"`
	And        []*SessionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "principal" field predicates.
	Principal             *string  `json:"principal,omitempty"`
	PrincipalNEQ          *string  `json:"principalNEQ,omitempty"`
	PrincipalIn           []string `json:"principalIn,omitempty"`
	PrincipalNotIn        []string `json:"principalNotIn,omitempty"`
	PrincipalGT           *string  `json:"principalGT,omitempty"`
	PrincipalGTE          *string  `json:"principalGTE,omitempty"`
	PrincipalLT           *string  `json:"principalLT,omitempty"`
	PrincipalLTE          *string  `json:"principalLTE,omitempty"`
	PrincipalContains     *string  `json:"principalContains,omitempty"`
	PrincipalHasPrefix    *string  `json:"principalHasPrefix,omitempty"`
	PrincipalHasSuffix    *string  `json:"principalHasSuffix,omitempty"`
	PrincipalIsNil        bool     `json:"principalIsNil,omitempty"`
	PrincipalNotNil       bool     `json:"principalNotNil,omitempty"`
	PrincipalEqualFold    *string  `json:"principalEqualFold,omitempty"`
	PrincipalContainsFold *string  `json:"principalContainsFold,omitempty"`

	// "hostname" field predicates.
	Hostname             *string  `json:"hostname,omitempty"`
	HostnameNEQ          *string  `json:"hostnameNEQ,omitempty"`
	HostnameIn           []string `json:"hostnameIn,omitempty"`
	HostnameNotIn        []string `json:"hostnameNotIn,omitempty"`
	HostnameGT           *string  `json:"hostnameGT,omitempty"`
	HostnameGTE          *string  `json:"hostnameGTE,omitempty"`
	HostnameLT           *string  `json:"hostnameLT,omitempty"`
	HostnameLTE          *string  `json:"hostnameLTE,omitempty"`
	HostnameContains     *string  `json:"hostnameContains,omitempty"`
	HostnameHasPrefix    *string  `json:"hostnameHasPrefix,omitempty"`
	HostnameHasSuffix    *string  `json:"hostnameHasSuffix,omitempty"`
	HostnameIsNil        bool     `json:"hostnameIsNil,omitempty"`
	HostnameNotNil       bool     `json:"hostnameNotNil,omitempty"`
	HostnameEqualFold    *string  `json:"hostnameEqualFold,omitempty"`
	HostnameContainsFold *string  `json:"hostnameContainsFold,omitempty"`

	// "identifier" field predicates.
	Identifier             *string  `json:"identifier,omitempty"`
	IdentifierNEQ          *string  `json:"identifierNEQ,omitempty"`
	IdentifierIn           []string `json:"identifierIn,omitempty"`
	IdentifierNotIn        []string `json:"identifierNotIn,omitempty"`
	IdentifierGT           *string  `json:"identifierGT,omitempty"`
	IdentifierGTE          *string  `json:"identifierGTE,omitempty"`
	IdentifierLT           *string  `json:"identifierLT,omitempty"`
	IdentifierLTE          *string  `json:"identifierLTE,omitempty"`
	IdentifierContains     *string  `json:"identifierContains,omitempty"`
	IdentifierHasPrefix    *string  `json:"identifierHasPrefix,omitempty"`
	IdentifierHasSuffix    *string  `json:"identifierHasSuffix,omitempty"`
	IdentifierEqualFold    *string  `json:"identifierEqualFold,omitempty"`
	IdentifierContainsFold *string  `json:"identifierContainsFold,omitempty"`

	// "agentIdentifier" field predicates.
	AgentIdentifier             *string  `json:"agentidentifier,omitempty"`
	AgentIdentifierNEQ          *string  `json:"agentidentifierNEQ,omitempty"`
	AgentIdentifierIn           []string `json:"agentidentifierIn,omitempty"`
	AgentIdentifierNotIn        []string `json:"agentidentifierNotIn,omitempty"`
	AgentIdentifierGT           *string  `json:"agentidentifierGT,omitempty"`
	AgentIdentifierGTE          *string  `json:"agentidentifierGTE,omitempty"`
	AgentIdentifierLT           *string  `json:"agentidentifierLT,omitempty"`
	AgentIdentifierLTE          *string  `json:"agentidentifierLTE,omitempty"`
	AgentIdentifierContains     *string  `json:"agentidentifierContains,omitempty"`
	AgentIdentifierHasPrefix    *string  `json:"agentidentifierHasPrefix,omitempty"`
	AgentIdentifierHasSuffix    *string  `json:"agentidentifierHasSuffix,omitempty"`
	AgentIdentifierIsNil        bool     `json:"agentidentifierIsNil,omitempty"`
	AgentIdentifierNotNil       bool     `json:"agentidentifierNotNil,omitempty"`
	AgentIdentifierEqualFold    *string  `json:"agentidentifierEqualFold,omitempty"`
	AgentIdentifierContainsFold *string  `json:"agentidentifierContainsFold,omitempty"`

	// "hostIdentifier" field predicates.
	HostIdentifier             *string  `json:"hostidentifier,omitempty"`
	HostIdentifierNEQ          *string  `json:"hostidentifierNEQ,omitempty"`
	HostIdentifierIn           []string `json:"hostidentifierIn,omitempty"`
	HostIdentifierNotIn        []string `json:"hostidentifierNotIn,omitempty"`
	HostIdentifierGT           *string  `json:"hostidentifierGT,omitempty"`
	HostIdentifierGTE          *string  `json:"hostidentifierGTE,omitempty"`
	HostIdentifierLT           *string  `json:"hostidentifierLT,omitempty"`
	HostIdentifierLTE          *string  `json:"hostidentifierLTE,omitempty"`
	HostIdentifierContains     *string  `json:"hostidentifierContains,omitempty"`
	HostIdentifierHasPrefix    *string  `json:"hostidentifierHasPrefix,omitempty"`
	HostIdentifierHasSuffix    *string  `json:"hostidentifierHasSuffix,omitempty"`
	HostIdentifierIsNil        bool     `json:"hostidentifierIsNil,omitempty"`
	HostIdentifierNotNil       bool     `json:"hostidentifierNotNil,omitempty"`
	HostIdentifierEqualFold    *string  `json:"hostidentifierEqualFold,omitempty"`
	HostIdentifierContainsFold *string  `json:"hostidentifierContainsFold,omitempty"`

	// "lastSeenAt" field predicates.
	LastSeenAt       *time.Time  `json:"lastseenat,omitempty"`
	LastSeenAtNEQ    *time.Time  `json:"lastseenatNEQ,omitempty"`
	LastSeenAtIn     []time.Time `json:"lastseenatIn,omitempty"`
	LastSeenAtNotIn  []time.Time `json:"lastseenatNotIn,omitempty"`
	LastSeenAtGT     *time.Time  `json:"lastseenatGT,omitempty"`
	LastSeenAtGTE    *time.Time  `json:"lastseenatGTE,omitempty"`
	LastSeenAtLT     *time.Time  `json:"lastseenatLT,omitempty"`
	LastSeenAtLTE    *time.Time  `json:"lastseenatLTE,omitempty"`
	LastSeenAtIsNil  bool        `json:"lastseenatIsNil,omitempty"`
	LastSeenAtNotNil bool        `json:"lastseenatNotNil,omitempty"`

	// "tags" edge predicates.
	HasTags     *bool            `json:"hasTags,omitempty"`
	HasTagsWith []*TagWhereInput `json:"hasTagsWith,omitempty"`

	// "tasks" edge predicates.
	HasTasks     *bool             `json:"hasTasks,omitempty"`
	HasTasksWith []*TaskWhereInput `json:"hasTasksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SessionWhereInput) AddPredicates(predicates ...predicate.Session) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SessionWhereInput filter on the SessionQuery builder.
func (i *SessionWhereInput) Filter(q *SessionQuery) (*SessionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySessionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySessionWhereInput is returned in case the SessionWhereInput is empty.
var ErrEmptySessionWhereInput = errors.New("ent: empty predicate SessionWhereInput")

// P returns a predicate for filtering sessions.
// An error is returned if the input is empty or invalid.
func (i *SessionWhereInput) P() (predicate.Session, error) {
	var predicates []predicate.Session
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, session.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Session, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, session.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Session, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, session.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, session.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, session.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, session.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, session.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, session.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, session.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, session.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, session.IDLTE(*i.IDLTE))
	}
	if i.Principal != nil {
		predicates = append(predicates, session.PrincipalEQ(*i.Principal))
	}
	if i.PrincipalNEQ != nil {
		predicates = append(predicates, session.PrincipalNEQ(*i.PrincipalNEQ))
	}
	if len(i.PrincipalIn) > 0 {
		predicates = append(predicates, session.PrincipalIn(i.PrincipalIn...))
	}
	if len(i.PrincipalNotIn) > 0 {
		predicates = append(predicates, session.PrincipalNotIn(i.PrincipalNotIn...))
	}
	if i.PrincipalGT != nil {
		predicates = append(predicates, session.PrincipalGT(*i.PrincipalGT))
	}
	if i.PrincipalGTE != nil {
		predicates = append(predicates, session.PrincipalGTE(*i.PrincipalGTE))
	}
	if i.PrincipalLT != nil {
		predicates = append(predicates, session.PrincipalLT(*i.PrincipalLT))
	}
	if i.PrincipalLTE != nil {
		predicates = append(predicates, session.PrincipalLTE(*i.PrincipalLTE))
	}
	if i.PrincipalContains != nil {
		predicates = append(predicates, session.PrincipalContains(*i.PrincipalContains))
	}
	if i.PrincipalHasPrefix != nil {
		predicates = append(predicates, session.PrincipalHasPrefix(*i.PrincipalHasPrefix))
	}
	if i.PrincipalHasSuffix != nil {
		predicates = append(predicates, session.PrincipalHasSuffix(*i.PrincipalHasSuffix))
	}
	if i.PrincipalIsNil {
		predicates = append(predicates, session.PrincipalIsNil())
	}
	if i.PrincipalNotNil {
		predicates = append(predicates, session.PrincipalNotNil())
	}
	if i.PrincipalEqualFold != nil {
		predicates = append(predicates, session.PrincipalEqualFold(*i.PrincipalEqualFold))
	}
	if i.PrincipalContainsFold != nil {
		predicates = append(predicates, session.PrincipalContainsFold(*i.PrincipalContainsFold))
	}
	if i.Hostname != nil {
		predicates = append(predicates, session.HostnameEQ(*i.Hostname))
	}
	if i.HostnameNEQ != nil {
		predicates = append(predicates, session.HostnameNEQ(*i.HostnameNEQ))
	}
	if len(i.HostnameIn) > 0 {
		predicates = append(predicates, session.HostnameIn(i.HostnameIn...))
	}
	if len(i.HostnameNotIn) > 0 {
		predicates = append(predicates, session.HostnameNotIn(i.HostnameNotIn...))
	}
	if i.HostnameGT != nil {
		predicates = append(predicates, session.HostnameGT(*i.HostnameGT))
	}
	if i.HostnameGTE != nil {
		predicates = append(predicates, session.HostnameGTE(*i.HostnameGTE))
	}
	if i.HostnameLT != nil {
		predicates = append(predicates, session.HostnameLT(*i.HostnameLT))
	}
	if i.HostnameLTE != nil {
		predicates = append(predicates, session.HostnameLTE(*i.HostnameLTE))
	}
	if i.HostnameContains != nil {
		predicates = append(predicates, session.HostnameContains(*i.HostnameContains))
	}
	if i.HostnameHasPrefix != nil {
		predicates = append(predicates, session.HostnameHasPrefix(*i.HostnameHasPrefix))
	}
	if i.HostnameHasSuffix != nil {
		predicates = append(predicates, session.HostnameHasSuffix(*i.HostnameHasSuffix))
	}
	if i.HostnameIsNil {
		predicates = append(predicates, session.HostnameIsNil())
	}
	if i.HostnameNotNil {
		predicates = append(predicates, session.HostnameNotNil())
	}
	if i.HostnameEqualFold != nil {
		predicates = append(predicates, session.HostnameEqualFold(*i.HostnameEqualFold))
	}
	if i.HostnameContainsFold != nil {
		predicates = append(predicates, session.HostnameContainsFold(*i.HostnameContainsFold))
	}
	if i.Identifier != nil {
		predicates = append(predicates, session.IdentifierEQ(*i.Identifier))
	}
	if i.IdentifierNEQ != nil {
		predicates = append(predicates, session.IdentifierNEQ(*i.IdentifierNEQ))
	}
	if len(i.IdentifierIn) > 0 {
		predicates = append(predicates, session.IdentifierIn(i.IdentifierIn...))
	}
	if len(i.IdentifierNotIn) > 0 {
		predicates = append(predicates, session.IdentifierNotIn(i.IdentifierNotIn...))
	}
	if i.IdentifierGT != nil {
		predicates = append(predicates, session.IdentifierGT(*i.IdentifierGT))
	}
	if i.IdentifierGTE != nil {
		predicates = append(predicates, session.IdentifierGTE(*i.IdentifierGTE))
	}
	if i.IdentifierLT != nil {
		predicates = append(predicates, session.IdentifierLT(*i.IdentifierLT))
	}
	if i.IdentifierLTE != nil {
		predicates = append(predicates, session.IdentifierLTE(*i.IdentifierLTE))
	}
	if i.IdentifierContains != nil {
		predicates = append(predicates, session.IdentifierContains(*i.IdentifierContains))
	}
	if i.IdentifierHasPrefix != nil {
		predicates = append(predicates, session.IdentifierHasPrefix(*i.IdentifierHasPrefix))
	}
	if i.IdentifierHasSuffix != nil {
		predicates = append(predicates, session.IdentifierHasSuffix(*i.IdentifierHasSuffix))
	}
	if i.IdentifierEqualFold != nil {
		predicates = append(predicates, session.IdentifierEqualFold(*i.IdentifierEqualFold))
	}
	if i.IdentifierContainsFold != nil {
		predicates = append(predicates, session.IdentifierContainsFold(*i.IdentifierContainsFold))
	}
	if i.AgentIdentifier != nil {
		predicates = append(predicates, session.AgentIdentifierEQ(*i.AgentIdentifier))
	}
	if i.AgentIdentifierNEQ != nil {
		predicates = append(predicates, session.AgentIdentifierNEQ(*i.AgentIdentifierNEQ))
	}
	if len(i.AgentIdentifierIn) > 0 {
		predicates = append(predicates, session.AgentIdentifierIn(i.AgentIdentifierIn...))
	}
	if len(i.AgentIdentifierNotIn) > 0 {
		predicates = append(predicates, session.AgentIdentifierNotIn(i.AgentIdentifierNotIn...))
	}
	if i.AgentIdentifierGT != nil {
		predicates = append(predicates, session.AgentIdentifierGT(*i.AgentIdentifierGT))
	}
	if i.AgentIdentifierGTE != nil {
		predicates = append(predicates, session.AgentIdentifierGTE(*i.AgentIdentifierGTE))
	}
	if i.AgentIdentifierLT != nil {
		predicates = append(predicates, session.AgentIdentifierLT(*i.AgentIdentifierLT))
	}
	if i.AgentIdentifierLTE != nil {
		predicates = append(predicates, session.AgentIdentifierLTE(*i.AgentIdentifierLTE))
	}
	if i.AgentIdentifierContains != nil {
		predicates = append(predicates, session.AgentIdentifierContains(*i.AgentIdentifierContains))
	}
	if i.AgentIdentifierHasPrefix != nil {
		predicates = append(predicates, session.AgentIdentifierHasPrefix(*i.AgentIdentifierHasPrefix))
	}
	if i.AgentIdentifierHasSuffix != nil {
		predicates = append(predicates, session.AgentIdentifierHasSuffix(*i.AgentIdentifierHasSuffix))
	}
	if i.AgentIdentifierIsNil {
		predicates = append(predicates, session.AgentIdentifierIsNil())
	}
	if i.AgentIdentifierNotNil {
		predicates = append(predicates, session.AgentIdentifierNotNil())
	}
	if i.AgentIdentifierEqualFold != nil {
		predicates = append(predicates, session.AgentIdentifierEqualFold(*i.AgentIdentifierEqualFold))
	}
	if i.AgentIdentifierContainsFold != nil {
		predicates = append(predicates, session.AgentIdentifierContainsFold(*i.AgentIdentifierContainsFold))
	}
	if i.HostIdentifier != nil {
		predicates = append(predicates, session.HostIdentifierEQ(*i.HostIdentifier))
	}
	if i.HostIdentifierNEQ != nil {
		predicates = append(predicates, session.HostIdentifierNEQ(*i.HostIdentifierNEQ))
	}
	if len(i.HostIdentifierIn) > 0 {
		predicates = append(predicates, session.HostIdentifierIn(i.HostIdentifierIn...))
	}
	if len(i.HostIdentifierNotIn) > 0 {
		predicates = append(predicates, session.HostIdentifierNotIn(i.HostIdentifierNotIn...))
	}
	if i.HostIdentifierGT != nil {
		predicates = append(predicates, session.HostIdentifierGT(*i.HostIdentifierGT))
	}
	if i.HostIdentifierGTE != nil {
		predicates = append(predicates, session.HostIdentifierGTE(*i.HostIdentifierGTE))
	}
	if i.HostIdentifierLT != nil {
		predicates = append(predicates, session.HostIdentifierLT(*i.HostIdentifierLT))
	}
	if i.HostIdentifierLTE != nil {
		predicates = append(predicates, session.HostIdentifierLTE(*i.HostIdentifierLTE))
	}
	if i.HostIdentifierContains != nil {
		predicates = append(predicates, session.HostIdentifierContains(*i.HostIdentifierContains))
	}
	if i.HostIdentifierHasPrefix != nil {
		predicates = append(predicates, session.HostIdentifierHasPrefix(*i.HostIdentifierHasPrefix))
	}
	if i.HostIdentifierHasSuffix != nil {
		predicates = append(predicates, session.HostIdentifierHasSuffix(*i.HostIdentifierHasSuffix))
	}
	if i.HostIdentifierIsNil {
		predicates = append(predicates, session.HostIdentifierIsNil())
	}
	if i.HostIdentifierNotNil {
		predicates = append(predicates, session.HostIdentifierNotNil())
	}
	if i.HostIdentifierEqualFold != nil {
		predicates = append(predicates, session.HostIdentifierEqualFold(*i.HostIdentifierEqualFold))
	}
	if i.HostIdentifierContainsFold != nil {
		predicates = append(predicates, session.HostIdentifierContainsFold(*i.HostIdentifierContainsFold))
	}
	if i.LastSeenAt != nil {
		predicates = append(predicates, session.LastSeenAtEQ(*i.LastSeenAt))
	}
	if i.LastSeenAtNEQ != nil {
		predicates = append(predicates, session.LastSeenAtNEQ(*i.LastSeenAtNEQ))
	}
	if len(i.LastSeenAtIn) > 0 {
		predicates = append(predicates, session.LastSeenAtIn(i.LastSeenAtIn...))
	}
	if len(i.LastSeenAtNotIn) > 0 {
		predicates = append(predicates, session.LastSeenAtNotIn(i.LastSeenAtNotIn...))
	}
	if i.LastSeenAtGT != nil {
		predicates = append(predicates, session.LastSeenAtGT(*i.LastSeenAtGT))
	}
	if i.LastSeenAtGTE != nil {
		predicates = append(predicates, session.LastSeenAtGTE(*i.LastSeenAtGTE))
	}
	if i.LastSeenAtLT != nil {
		predicates = append(predicates, session.LastSeenAtLT(*i.LastSeenAtLT))
	}
	if i.LastSeenAtLTE != nil {
		predicates = append(predicates, session.LastSeenAtLTE(*i.LastSeenAtLTE))
	}
	if i.LastSeenAtIsNil {
		predicates = append(predicates, session.LastSeenAtIsNil())
	}
	if i.LastSeenAtNotNil {
		predicates = append(predicates, session.LastSeenAtNotNil())
	}

	if i.HasTags != nil {
		p := session.HasTags()
		if !*i.HasTags {
			p = session.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagsWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTagsWith))
		for _, w := range i.HasTagsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTagsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, session.HasTagsWith(with...))
	}
	if i.HasTasks != nil {
		p := session.HasTasks()
		if !*i.HasTasks {
			p = session.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTasksWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTasksWith))
		for _, w := range i.HasTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTasksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, session.HasTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySessionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return session.And(predicates...), nil
	}
}

// TagWhereInput represents a where input for filtering Tag queries.
type TagWhereInput struct {
	Predicates []predicate.Tag  `json:"-"`
	Not        *TagWhereInput   `json:"not,omitempty"`
	Or         []*TagWhereInput `json:"or,omitempty"`
	And        []*TagWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "kind" field predicates.
	Kind      *tag.Kind  `json:"kind,omitempty"`
	KindNEQ   *tag.Kind  `json:"kindNEQ,omitempty"`
	KindIn    []tag.Kind `json:"kindIn,omitempty"`
	KindNotIn []tag.Kind `json:"kindNotIn,omitempty"`

	// "sessions" edge predicates.
	HasSessions     *bool                `json:"hasSessions,omitempty"`
	HasSessionsWith []*SessionWhereInput `json:"hasSessionsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TagWhereInput) AddPredicates(predicates ...predicate.Tag) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TagWhereInput filter on the TagQuery builder.
func (i *TagWhereInput) Filter(q *TagQuery) (*TagQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTagWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTagWhereInput is returned in case the TagWhereInput is empty.
var ErrEmptyTagWhereInput = errors.New("ent: empty predicate TagWhereInput")

// P returns a predicate for filtering tags.
// An error is returned if the input is empty or invalid.
func (i *TagWhereInput) P() (predicate.Tag, error) {
	var predicates []predicate.Tag
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tag.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tag, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tag.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tag, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tag.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tag.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tag.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tag.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tag.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tag.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tag.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tag.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tag.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tag.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tag.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tag.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tag.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tag.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tag.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tag.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tag.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tag.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tag.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tag.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tag.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tag.NameContainsFold(*i.NameContainsFold))
	}
	if i.Kind != nil {
		predicates = append(predicates, tag.KindEQ(*i.Kind))
	}
	if i.KindNEQ != nil {
		predicates = append(predicates, tag.KindNEQ(*i.KindNEQ))
	}
	if len(i.KindIn) > 0 {
		predicates = append(predicates, tag.KindIn(i.KindIn...))
	}
	if len(i.KindNotIn) > 0 {
		predicates = append(predicates, tag.KindNotIn(i.KindNotIn...))
	}

	if i.HasSessions != nil {
		p := tag.HasSessions()
		if !*i.HasSessions {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSessionsWith) > 0 {
		with := make([]predicate.Session, 0, len(i.HasSessionsWith))
		for _, w := range i.HasSessionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSessionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasSessionsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTagWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tag.And(predicates...), nil
	}
}

// TaskWhereInput represents a where input for filtering Task queries.
type TaskWhereInput struct {
	Predicates []predicate.Task  `json:"-"`
	Not        *TaskWhereInput   `json:"not,omitempty"`
	Or         []*TaskWhereInput `json:"or,omitempty"`
	And        []*TaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "createdAt" field predicates.
	CreatedAt      *time.Time  `json:"createdat,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdatNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdatIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdatNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdatGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdatGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdatLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdatLTE,omitempty"`

	// "lastModifiedAt" field predicates.
	LastModifiedAt      *time.Time  `json:"lastmodifiedat,omitempty"`
	LastModifiedAtNEQ   *time.Time  `json:"lastmodifiedatNEQ,omitempty"`
	LastModifiedAtIn    []time.Time `json:"lastmodifiedatIn,omitempty"`
	LastModifiedAtNotIn []time.Time `json:"lastmodifiedatNotIn,omitempty"`
	LastModifiedAtGT    *time.Time  `json:"lastmodifiedatGT,omitempty"`
	LastModifiedAtGTE   *time.Time  `json:"lastmodifiedatGTE,omitempty"`
	LastModifiedAtLT    *time.Time  `json:"lastmodifiedatLT,omitempty"`
	LastModifiedAtLTE   *time.Time  `json:"lastmodifiedatLTE,omitempty"`

	// "claimedAt" field predicates.
	ClaimedAt       *time.Time  `json:"claimedat,omitempty"`
	ClaimedAtNEQ    *time.Time  `json:"claimedatNEQ,omitempty"`
	ClaimedAtIn     []time.Time `json:"claimedatIn,omitempty"`
	ClaimedAtNotIn  []time.Time `json:"claimedatNotIn,omitempty"`
	ClaimedAtGT     *time.Time  `json:"claimedatGT,omitempty"`
	ClaimedAtGTE    *time.Time  `json:"claimedatGTE,omitempty"`
	ClaimedAtLT     *time.Time  `json:"claimedatLT,omitempty"`
	ClaimedAtLTE    *time.Time  `json:"claimedatLTE,omitempty"`
	ClaimedAtIsNil  bool        `json:"claimedatIsNil,omitempty"`
	ClaimedAtNotNil bool        `json:"claimedatNotNil,omitempty"`

	// "execStartedAt" field predicates.
	ExecStartedAt       *time.Time  `json:"execstartedat,omitempty"`
	ExecStartedAtNEQ    *time.Time  `json:"execstartedatNEQ,omitempty"`
	ExecStartedAtIn     []time.Time `json:"execstartedatIn,omitempty"`
	ExecStartedAtNotIn  []time.Time `json:"execstartedatNotIn,omitempty"`
	ExecStartedAtGT     *time.Time  `json:"execstartedatGT,omitempty"`
	ExecStartedAtGTE    *time.Time  `json:"execstartedatGTE,omitempty"`
	ExecStartedAtLT     *time.Time  `json:"execstartedatLT,omitempty"`
	ExecStartedAtLTE    *time.Time  `json:"execstartedatLTE,omitempty"`
	ExecStartedAtIsNil  bool        `json:"execstartedatIsNil,omitempty"`
	ExecStartedAtNotNil bool        `json:"execstartedatNotNil,omitempty"`

	// "execFinishedAt" field predicates.
	ExecFinishedAt       *time.Time  `json:"execfinishedat,omitempty"`
	ExecFinishedAtNEQ    *time.Time  `json:"execfinishedatNEQ,omitempty"`
	ExecFinishedAtIn     []time.Time `json:"execfinishedatIn,omitempty"`
	ExecFinishedAtNotIn  []time.Time `json:"execfinishedatNotIn,omitempty"`
	ExecFinishedAtGT     *time.Time  `json:"execfinishedatGT,omitempty"`
	ExecFinishedAtGTE    *time.Time  `json:"execfinishedatGTE,omitempty"`
	ExecFinishedAtLT     *time.Time  `json:"execfinishedatLT,omitempty"`
	ExecFinishedAtLTE    *time.Time  `json:"execfinishedatLTE,omitempty"`
	ExecFinishedAtIsNil  bool        `json:"execfinishedatIsNil,omitempty"`
	ExecFinishedAtNotNil bool        `json:"execfinishedatNotNil,omitempty"`

	// "output" field predicates.
	Output             *string  `json:"output,omitempty"`
	OutputNEQ          *string  `json:"outputNEQ,omitempty"`
	OutputIn           []string `json:"outputIn,omitempty"`
	OutputNotIn        []string `json:"outputNotIn,omitempty"`
	OutputGT           *string  `json:"outputGT,omitempty"`
	OutputGTE          *string  `json:"outputGTE,omitempty"`
	OutputLT           *string  `json:"outputLT,omitempty"`
	OutputLTE          *string  `json:"outputLTE,omitempty"`
	OutputContains     *string  `json:"outputContains,omitempty"`
	OutputHasPrefix    *string  `json:"outputHasPrefix,omitempty"`
	OutputHasSuffix    *string  `json:"outputHasSuffix,omitempty"`
	OutputIsNil        bool     `json:"outputIsNil,omitempty"`
	OutputNotNil       bool     `json:"outputNotNil,omitempty"`
	OutputEqualFold    *string  `json:"outputEqualFold,omitempty"`
	OutputContainsFold *string  `json:"outputContainsFold,omitempty"`

	// "error" field predicates.
	Error             *string  `json:"error,omitempty"`
	ErrorNEQ          *string  `json:"errorNEQ,omitempty"`
	ErrorIn           []string `json:"errorIn,omitempty"`
	ErrorNotIn        []string `json:"errorNotIn,omitempty"`
	ErrorGT           *string  `json:"errorGT,omitempty"`
	ErrorGTE          *string  `json:"errorGTE,omitempty"`
	ErrorLT           *string  `json:"errorLT,omitempty"`
	ErrorLTE          *string  `json:"errorLTE,omitempty"`
	ErrorContains     *string  `json:"errorContains,omitempty"`
	ErrorHasPrefix    *string  `json:"errorHasPrefix,omitempty"`
	ErrorHasSuffix    *string  `json:"errorHasSuffix,omitempty"`
	ErrorIsNil        bool     `json:"errorIsNil,omitempty"`
	ErrorNotNil       bool     `json:"errorNotNil,omitempty"`
	ErrorEqualFold    *string  `json:"errorEqualFold,omitempty"`
	ErrorContainsFold *string  `json:"errorContainsFold,omitempty"`

	// "job" edge predicates.
	HasJob     *bool            `json:"hasJob,omitempty"`
	HasJobWith []*JobWhereInput `json:"hasJobWith,omitempty"`

	// "session" edge predicates.
	HasSession     *bool                `json:"hasSession,omitempty"`
	HasSessionWith []*SessionWhereInput `json:"hasSessionWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TaskWhereInput) AddPredicates(predicates ...predicate.Task) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TaskWhereInput filter on the TaskQuery builder.
func (i *TaskWhereInput) Filter(q *TaskQuery) (*TaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTaskWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTaskWhereInput is returned in case the TaskWhereInput is empty.
var ErrEmptyTaskWhereInput = errors.New("ent: empty predicate TaskWhereInput")

// P returns a predicate for filtering tasks.
// An error is returned if the input is empty or invalid.
func (i *TaskWhereInput) P() (predicate.Task, error) {
	var predicates []predicate.Task
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, task.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Task, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, task.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Task, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, task.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, task.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, task.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, task.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, task.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, task.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, task.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, task.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, task.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, task.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, task.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, task.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, task.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, task.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, task.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, task.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, task.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.LastModifiedAt != nil {
		predicates = append(predicates, task.LastModifiedAtEQ(*i.LastModifiedAt))
	}
	if i.LastModifiedAtNEQ != nil {
		predicates = append(predicates, task.LastModifiedAtNEQ(*i.LastModifiedAtNEQ))
	}
	if len(i.LastModifiedAtIn) > 0 {
		predicates = append(predicates, task.LastModifiedAtIn(i.LastModifiedAtIn...))
	}
	if len(i.LastModifiedAtNotIn) > 0 {
		predicates = append(predicates, task.LastModifiedAtNotIn(i.LastModifiedAtNotIn...))
	}
	if i.LastModifiedAtGT != nil {
		predicates = append(predicates, task.LastModifiedAtGT(*i.LastModifiedAtGT))
	}
	if i.LastModifiedAtGTE != nil {
		predicates = append(predicates, task.LastModifiedAtGTE(*i.LastModifiedAtGTE))
	}
	if i.LastModifiedAtLT != nil {
		predicates = append(predicates, task.LastModifiedAtLT(*i.LastModifiedAtLT))
	}
	if i.LastModifiedAtLTE != nil {
		predicates = append(predicates, task.LastModifiedAtLTE(*i.LastModifiedAtLTE))
	}
	if i.ClaimedAt != nil {
		predicates = append(predicates, task.ClaimedAtEQ(*i.ClaimedAt))
	}
	if i.ClaimedAtNEQ != nil {
		predicates = append(predicates, task.ClaimedAtNEQ(*i.ClaimedAtNEQ))
	}
	if len(i.ClaimedAtIn) > 0 {
		predicates = append(predicates, task.ClaimedAtIn(i.ClaimedAtIn...))
	}
	if len(i.ClaimedAtNotIn) > 0 {
		predicates = append(predicates, task.ClaimedAtNotIn(i.ClaimedAtNotIn...))
	}
	if i.ClaimedAtGT != nil {
		predicates = append(predicates, task.ClaimedAtGT(*i.ClaimedAtGT))
	}
	if i.ClaimedAtGTE != nil {
		predicates = append(predicates, task.ClaimedAtGTE(*i.ClaimedAtGTE))
	}
	if i.ClaimedAtLT != nil {
		predicates = append(predicates, task.ClaimedAtLT(*i.ClaimedAtLT))
	}
	if i.ClaimedAtLTE != nil {
		predicates = append(predicates, task.ClaimedAtLTE(*i.ClaimedAtLTE))
	}
	if i.ClaimedAtIsNil {
		predicates = append(predicates, task.ClaimedAtIsNil())
	}
	if i.ClaimedAtNotNil {
		predicates = append(predicates, task.ClaimedAtNotNil())
	}
	if i.ExecStartedAt != nil {
		predicates = append(predicates, task.ExecStartedAtEQ(*i.ExecStartedAt))
	}
	if i.ExecStartedAtNEQ != nil {
		predicates = append(predicates, task.ExecStartedAtNEQ(*i.ExecStartedAtNEQ))
	}
	if len(i.ExecStartedAtIn) > 0 {
		predicates = append(predicates, task.ExecStartedAtIn(i.ExecStartedAtIn...))
	}
	if len(i.ExecStartedAtNotIn) > 0 {
		predicates = append(predicates, task.ExecStartedAtNotIn(i.ExecStartedAtNotIn...))
	}
	if i.ExecStartedAtGT != nil {
		predicates = append(predicates, task.ExecStartedAtGT(*i.ExecStartedAtGT))
	}
	if i.ExecStartedAtGTE != nil {
		predicates = append(predicates, task.ExecStartedAtGTE(*i.ExecStartedAtGTE))
	}
	if i.ExecStartedAtLT != nil {
		predicates = append(predicates, task.ExecStartedAtLT(*i.ExecStartedAtLT))
	}
	if i.ExecStartedAtLTE != nil {
		predicates = append(predicates, task.ExecStartedAtLTE(*i.ExecStartedAtLTE))
	}
	if i.ExecStartedAtIsNil {
		predicates = append(predicates, task.ExecStartedAtIsNil())
	}
	if i.ExecStartedAtNotNil {
		predicates = append(predicates, task.ExecStartedAtNotNil())
	}
	if i.ExecFinishedAt != nil {
		predicates = append(predicates, task.ExecFinishedAtEQ(*i.ExecFinishedAt))
	}
	if i.ExecFinishedAtNEQ != nil {
		predicates = append(predicates, task.ExecFinishedAtNEQ(*i.ExecFinishedAtNEQ))
	}
	if len(i.ExecFinishedAtIn) > 0 {
		predicates = append(predicates, task.ExecFinishedAtIn(i.ExecFinishedAtIn...))
	}
	if len(i.ExecFinishedAtNotIn) > 0 {
		predicates = append(predicates, task.ExecFinishedAtNotIn(i.ExecFinishedAtNotIn...))
	}
	if i.ExecFinishedAtGT != nil {
		predicates = append(predicates, task.ExecFinishedAtGT(*i.ExecFinishedAtGT))
	}
	if i.ExecFinishedAtGTE != nil {
		predicates = append(predicates, task.ExecFinishedAtGTE(*i.ExecFinishedAtGTE))
	}
	if i.ExecFinishedAtLT != nil {
		predicates = append(predicates, task.ExecFinishedAtLT(*i.ExecFinishedAtLT))
	}
	if i.ExecFinishedAtLTE != nil {
		predicates = append(predicates, task.ExecFinishedAtLTE(*i.ExecFinishedAtLTE))
	}
	if i.ExecFinishedAtIsNil {
		predicates = append(predicates, task.ExecFinishedAtIsNil())
	}
	if i.ExecFinishedAtNotNil {
		predicates = append(predicates, task.ExecFinishedAtNotNil())
	}
	if i.Output != nil {
		predicates = append(predicates, task.OutputEQ(*i.Output))
	}
	if i.OutputNEQ != nil {
		predicates = append(predicates, task.OutputNEQ(*i.OutputNEQ))
	}
	if len(i.OutputIn) > 0 {
		predicates = append(predicates, task.OutputIn(i.OutputIn...))
	}
	if len(i.OutputNotIn) > 0 {
		predicates = append(predicates, task.OutputNotIn(i.OutputNotIn...))
	}
	if i.OutputGT != nil {
		predicates = append(predicates, task.OutputGT(*i.OutputGT))
	}
	if i.OutputGTE != nil {
		predicates = append(predicates, task.OutputGTE(*i.OutputGTE))
	}
	if i.OutputLT != nil {
		predicates = append(predicates, task.OutputLT(*i.OutputLT))
	}
	if i.OutputLTE != nil {
		predicates = append(predicates, task.OutputLTE(*i.OutputLTE))
	}
	if i.OutputContains != nil {
		predicates = append(predicates, task.OutputContains(*i.OutputContains))
	}
	if i.OutputHasPrefix != nil {
		predicates = append(predicates, task.OutputHasPrefix(*i.OutputHasPrefix))
	}
	if i.OutputHasSuffix != nil {
		predicates = append(predicates, task.OutputHasSuffix(*i.OutputHasSuffix))
	}
	if i.OutputIsNil {
		predicates = append(predicates, task.OutputIsNil())
	}
	if i.OutputNotNil {
		predicates = append(predicates, task.OutputNotNil())
	}
	if i.OutputEqualFold != nil {
		predicates = append(predicates, task.OutputEqualFold(*i.OutputEqualFold))
	}
	if i.OutputContainsFold != nil {
		predicates = append(predicates, task.OutputContainsFold(*i.OutputContainsFold))
	}
	if i.Error != nil {
		predicates = append(predicates, task.ErrorEQ(*i.Error))
	}
	if i.ErrorNEQ != nil {
		predicates = append(predicates, task.ErrorNEQ(*i.ErrorNEQ))
	}
	if len(i.ErrorIn) > 0 {
		predicates = append(predicates, task.ErrorIn(i.ErrorIn...))
	}
	if len(i.ErrorNotIn) > 0 {
		predicates = append(predicates, task.ErrorNotIn(i.ErrorNotIn...))
	}
	if i.ErrorGT != nil {
		predicates = append(predicates, task.ErrorGT(*i.ErrorGT))
	}
	if i.ErrorGTE != nil {
		predicates = append(predicates, task.ErrorGTE(*i.ErrorGTE))
	}
	if i.ErrorLT != nil {
		predicates = append(predicates, task.ErrorLT(*i.ErrorLT))
	}
	if i.ErrorLTE != nil {
		predicates = append(predicates, task.ErrorLTE(*i.ErrorLTE))
	}
	if i.ErrorContains != nil {
		predicates = append(predicates, task.ErrorContains(*i.ErrorContains))
	}
	if i.ErrorHasPrefix != nil {
		predicates = append(predicates, task.ErrorHasPrefix(*i.ErrorHasPrefix))
	}
	if i.ErrorHasSuffix != nil {
		predicates = append(predicates, task.ErrorHasSuffix(*i.ErrorHasSuffix))
	}
	if i.ErrorIsNil {
		predicates = append(predicates, task.ErrorIsNil())
	}
	if i.ErrorNotNil {
		predicates = append(predicates, task.ErrorNotNil())
	}
	if i.ErrorEqualFold != nil {
		predicates = append(predicates, task.ErrorEqualFold(*i.ErrorEqualFold))
	}
	if i.ErrorContainsFold != nil {
		predicates = append(predicates, task.ErrorContainsFold(*i.ErrorContainsFold))
	}

	if i.HasJob != nil {
		p := task.HasJob()
		if !*i.HasJob {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasJobWith) > 0 {
		with := make([]predicate.Job, 0, len(i.HasJobWith))
		for _, w := range i.HasJobWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasJobWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasJobWith(with...))
	}
	if i.HasSession != nil {
		p := task.HasSession()
		if !*i.HasSession {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSessionWith) > 0 {
		with := make([]predicate.Session, 0, len(i.HasSessionWith))
		for _, w := range i.HasSessionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSessionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasSessionWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTaskWhereInput
	case 1:
		return predicates[0], nil
	default:
		return task.And(predicates...), nil
	}
}

// TomeWhereInput represents a where input for filtering Tome queries.
type TomeWhereInput struct {
	Predicates []predicate.Tome  `json:"-"`
	Not        *TomeWhereInput   `json:"not,omitempty"`
	Or         []*TomeWhereInput `json:"or,omitempty"`
	And        []*TomeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "createdAt" field predicates.
	CreatedAt      *time.Time  `json:"createdat,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdatNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdatIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdatNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdatGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdatGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdatLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdatLTE,omitempty"`

	// "lastModifiedAt" field predicates.
	LastModifiedAt      *time.Time  `json:"lastmodifiedat,omitempty"`
	LastModifiedAtNEQ   *time.Time  `json:"lastmodifiedatNEQ,omitempty"`
	LastModifiedAtIn    []time.Time `json:"lastmodifiedatIn,omitempty"`
	LastModifiedAtNotIn []time.Time `json:"lastmodifiedatNotIn,omitempty"`
	LastModifiedAtGT    *time.Time  `json:"lastmodifiedatGT,omitempty"`
	LastModifiedAtGTE   *time.Time  `json:"lastmodifiedatGTE,omitempty"`
	LastModifiedAtLT    *time.Time  `json:"lastmodifiedatLT,omitempty"`
	LastModifiedAtLTE   *time.Time  `json:"lastmodifiedatLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "parameters" field predicates.
	Parameters             *string  `json:"parameters,omitempty"`
	ParametersNEQ          *string  `json:"parametersNEQ,omitempty"`
	ParametersIn           []string `json:"parametersIn,omitempty"`
	ParametersNotIn        []string `json:"parametersNotIn,omitempty"`
	ParametersGT           *string  `json:"parametersGT,omitempty"`
	ParametersGTE          *string  `json:"parametersGTE,omitempty"`
	ParametersLT           *string  `json:"parametersLT,omitempty"`
	ParametersLTE          *string  `json:"parametersLTE,omitempty"`
	ParametersContains     *string  `json:"parametersContains,omitempty"`
	ParametersHasPrefix    *string  `json:"parametersHasPrefix,omitempty"`
	ParametersHasSuffix    *string  `json:"parametersHasSuffix,omitempty"`
	ParametersIsNil        bool     `json:"parametersIsNil,omitempty"`
	ParametersNotNil       bool     `json:"parametersNotNil,omitempty"`
	ParametersEqualFold    *string  `json:"parametersEqualFold,omitempty"`
	ParametersContainsFold *string  `json:"parametersContainsFold,omitempty"`

	// "eldritch" field predicates.
	Eldritch             *string  `json:"eldritch,omitempty"`
	EldritchNEQ          *string  `json:"eldritchNEQ,omitempty"`
	EldritchIn           []string `json:"eldritchIn,omitempty"`
	EldritchNotIn        []string `json:"eldritchNotIn,omitempty"`
	EldritchGT           *string  `json:"eldritchGT,omitempty"`
	EldritchGTE          *string  `json:"eldritchGTE,omitempty"`
	EldritchLT           *string  `json:"eldritchLT,omitempty"`
	EldritchLTE          *string  `json:"eldritchLTE,omitempty"`
	EldritchContains     *string  `json:"eldritchContains,omitempty"`
	EldritchHasPrefix    *string  `json:"eldritchHasPrefix,omitempty"`
	EldritchHasSuffix    *string  `json:"eldritchHasSuffix,omitempty"`
	EldritchEqualFold    *string  `json:"eldritchEqualFold,omitempty"`
	EldritchContainsFold *string  `json:"eldritchContainsFold,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TomeWhereInput) AddPredicates(predicates ...predicate.Tome) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TomeWhereInput filter on the TomeQuery builder.
func (i *TomeWhereInput) Filter(q *TomeQuery) (*TomeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTomeWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTomeWhereInput is returned in case the TomeWhereInput is empty.
var ErrEmptyTomeWhereInput = errors.New("ent: empty predicate TomeWhereInput")

// P returns a predicate for filtering tomes.
// An error is returned if the input is empty or invalid.
func (i *TomeWhereInput) P() (predicate.Tome, error) {
	var predicates []predicate.Tome
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tome.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tome, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tome.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tome, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tome.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tome.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tome.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tome.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tome.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tome.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tome.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tome.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tome.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tome.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tome.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tome.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tome.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tome.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tome.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tome.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tome.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.LastModifiedAt != nil {
		predicates = append(predicates, tome.LastModifiedAtEQ(*i.LastModifiedAt))
	}
	if i.LastModifiedAtNEQ != nil {
		predicates = append(predicates, tome.LastModifiedAtNEQ(*i.LastModifiedAtNEQ))
	}
	if len(i.LastModifiedAtIn) > 0 {
		predicates = append(predicates, tome.LastModifiedAtIn(i.LastModifiedAtIn...))
	}
	if len(i.LastModifiedAtNotIn) > 0 {
		predicates = append(predicates, tome.LastModifiedAtNotIn(i.LastModifiedAtNotIn...))
	}
	if i.LastModifiedAtGT != nil {
		predicates = append(predicates, tome.LastModifiedAtGT(*i.LastModifiedAtGT))
	}
	if i.LastModifiedAtGTE != nil {
		predicates = append(predicates, tome.LastModifiedAtGTE(*i.LastModifiedAtGTE))
	}
	if i.LastModifiedAtLT != nil {
		predicates = append(predicates, tome.LastModifiedAtLT(*i.LastModifiedAtLT))
	}
	if i.LastModifiedAtLTE != nil {
		predicates = append(predicates, tome.LastModifiedAtLTE(*i.LastModifiedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tome.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tome.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tome.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tome.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tome.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tome.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tome.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tome.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tome.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tome.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tome.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tome.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tome.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, tome.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, tome.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, tome.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, tome.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, tome.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, tome.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, tome.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, tome.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, tome.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, tome.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, tome.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, tome.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, tome.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Parameters != nil {
		predicates = append(predicates, tome.ParametersEQ(*i.Parameters))
	}
	if i.ParametersNEQ != nil {
		predicates = append(predicates, tome.ParametersNEQ(*i.ParametersNEQ))
	}
	if len(i.ParametersIn) > 0 {
		predicates = append(predicates, tome.ParametersIn(i.ParametersIn...))
	}
	if len(i.ParametersNotIn) > 0 {
		predicates = append(predicates, tome.ParametersNotIn(i.ParametersNotIn...))
	}
	if i.ParametersGT != nil {
		predicates = append(predicates, tome.ParametersGT(*i.ParametersGT))
	}
	if i.ParametersGTE != nil {
		predicates = append(predicates, tome.ParametersGTE(*i.ParametersGTE))
	}
	if i.ParametersLT != nil {
		predicates = append(predicates, tome.ParametersLT(*i.ParametersLT))
	}
	if i.ParametersLTE != nil {
		predicates = append(predicates, tome.ParametersLTE(*i.ParametersLTE))
	}
	if i.ParametersContains != nil {
		predicates = append(predicates, tome.ParametersContains(*i.ParametersContains))
	}
	if i.ParametersHasPrefix != nil {
		predicates = append(predicates, tome.ParametersHasPrefix(*i.ParametersHasPrefix))
	}
	if i.ParametersHasSuffix != nil {
		predicates = append(predicates, tome.ParametersHasSuffix(*i.ParametersHasSuffix))
	}
	if i.ParametersIsNil {
		predicates = append(predicates, tome.ParametersIsNil())
	}
	if i.ParametersNotNil {
		predicates = append(predicates, tome.ParametersNotNil())
	}
	if i.ParametersEqualFold != nil {
		predicates = append(predicates, tome.ParametersEqualFold(*i.ParametersEqualFold))
	}
	if i.ParametersContainsFold != nil {
		predicates = append(predicates, tome.ParametersContainsFold(*i.ParametersContainsFold))
	}
	if i.Eldritch != nil {
		predicates = append(predicates, tome.EldritchEQ(*i.Eldritch))
	}
	if i.EldritchNEQ != nil {
		predicates = append(predicates, tome.EldritchNEQ(*i.EldritchNEQ))
	}
	if len(i.EldritchIn) > 0 {
		predicates = append(predicates, tome.EldritchIn(i.EldritchIn...))
	}
	if len(i.EldritchNotIn) > 0 {
		predicates = append(predicates, tome.EldritchNotIn(i.EldritchNotIn...))
	}
	if i.EldritchGT != nil {
		predicates = append(predicates, tome.EldritchGT(*i.EldritchGT))
	}
	if i.EldritchGTE != nil {
		predicates = append(predicates, tome.EldritchGTE(*i.EldritchGTE))
	}
	if i.EldritchLT != nil {
		predicates = append(predicates, tome.EldritchLT(*i.EldritchLT))
	}
	if i.EldritchLTE != nil {
		predicates = append(predicates, tome.EldritchLTE(*i.EldritchLTE))
	}
	if i.EldritchContains != nil {
		predicates = append(predicates, tome.EldritchContains(*i.EldritchContains))
	}
	if i.EldritchHasPrefix != nil {
		predicates = append(predicates, tome.EldritchHasPrefix(*i.EldritchHasPrefix))
	}
	if i.EldritchHasSuffix != nil {
		predicates = append(predicates, tome.EldritchHasSuffix(*i.EldritchHasSuffix))
	}
	if i.EldritchEqualFold != nil {
		predicates = append(predicates, tome.EldritchEqualFold(*i.EldritchEqualFold))
	}
	if i.EldritchContainsFold != nil {
		predicates = append(predicates, tome.EldritchContainsFold(*i.EldritchContainsFold))
	}

	if i.HasFiles != nil {
		p := tome.HasFiles()
		if !*i.HasFiles {
			p = tome.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tome.HasFilesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTomeWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tome.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "Name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "OAuthID" field predicates.
	OAuthID             *string  `json:"oauthid,omitempty"`
	OAuthIDNEQ          *string  `json:"oauthidNEQ,omitempty"`
	OAuthIDIn           []string `json:"oauthidIn,omitempty"`
	OAuthIDNotIn        []string `json:"oauthidNotIn,omitempty"`
	OAuthIDGT           *string  `json:"oauthidGT,omitempty"`
	OAuthIDGTE          *string  `json:"oauthidGTE,omitempty"`
	OAuthIDLT           *string  `json:"oauthidLT,omitempty"`
	OAuthIDLTE          *string  `json:"oauthidLTE,omitempty"`
	OAuthIDContains     *string  `json:"oauthidContains,omitempty"`
	OAuthIDHasPrefix    *string  `json:"oauthidHasPrefix,omitempty"`
	OAuthIDHasSuffix    *string  `json:"oauthidHasSuffix,omitempty"`
	OAuthIDEqualFold    *string  `json:"oauthidEqualFold,omitempty"`
	OAuthIDContainsFold *string  `json:"oauthidContainsFold,omitempty"`

	// "PhotoURL" field predicates.
	PhotoURL             *string  `json:"photourl,omitempty"`
	PhotoURLNEQ          *string  `json:"photourlNEQ,omitempty"`
	PhotoURLIn           []string `json:"photourlIn,omitempty"`
	PhotoURLNotIn        []string `json:"photourlNotIn,omitempty"`
	PhotoURLGT           *string  `json:"photourlGT,omitempty"`
	PhotoURLGTE          *string  `json:"photourlGTE,omitempty"`
	PhotoURLLT           *string  `json:"photourlLT,omitempty"`
	PhotoURLLTE          *string  `json:"photourlLTE,omitempty"`
	PhotoURLContains     *string  `json:"photourlContains,omitempty"`
	PhotoURLHasPrefix    *string  `json:"photourlHasPrefix,omitempty"`
	PhotoURLHasSuffix    *string  `json:"photourlHasSuffix,omitempty"`
	PhotoURLEqualFold    *string  `json:"photourlEqualFold,omitempty"`
	PhotoURLContainsFold *string  `json:"photourlContainsFold,omitempty"`

	// "IsActivated" field predicates.
	IsActivated    *bool `json:"isactivated,omitempty"`
	IsActivatedNEQ *bool `json:"isactivatedNEQ,omitempty"`

	// "IsAdmin" field predicates.
	IsAdmin    *bool `json:"isadmin,omitempty"`
	IsAdminNEQ *bool `json:"isadminNEQ,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.OAuthID != nil {
		predicates = append(predicates, user.OAuthIDEQ(*i.OAuthID))
	}
	if i.OAuthIDNEQ != nil {
		predicates = append(predicates, user.OAuthIDNEQ(*i.OAuthIDNEQ))
	}
	if len(i.OAuthIDIn) > 0 {
		predicates = append(predicates, user.OAuthIDIn(i.OAuthIDIn...))
	}
	if len(i.OAuthIDNotIn) > 0 {
		predicates = append(predicates, user.OAuthIDNotIn(i.OAuthIDNotIn...))
	}
	if i.OAuthIDGT != nil {
		predicates = append(predicates, user.OAuthIDGT(*i.OAuthIDGT))
	}
	if i.OAuthIDGTE != nil {
		predicates = append(predicates, user.OAuthIDGTE(*i.OAuthIDGTE))
	}
	if i.OAuthIDLT != nil {
		predicates = append(predicates, user.OAuthIDLT(*i.OAuthIDLT))
	}
	if i.OAuthIDLTE != nil {
		predicates = append(predicates, user.OAuthIDLTE(*i.OAuthIDLTE))
	}
	if i.OAuthIDContains != nil {
		predicates = append(predicates, user.OAuthIDContains(*i.OAuthIDContains))
	}
	if i.OAuthIDHasPrefix != nil {
		predicates = append(predicates, user.OAuthIDHasPrefix(*i.OAuthIDHasPrefix))
	}
	if i.OAuthIDHasSuffix != nil {
		predicates = append(predicates, user.OAuthIDHasSuffix(*i.OAuthIDHasSuffix))
	}
	if i.OAuthIDEqualFold != nil {
		predicates = append(predicates, user.OAuthIDEqualFold(*i.OAuthIDEqualFold))
	}
	if i.OAuthIDContainsFold != nil {
		predicates = append(predicates, user.OAuthIDContainsFold(*i.OAuthIDContainsFold))
	}
	if i.PhotoURL != nil {
		predicates = append(predicates, user.PhotoURLEQ(*i.PhotoURL))
	}
	if i.PhotoURLNEQ != nil {
		predicates = append(predicates, user.PhotoURLNEQ(*i.PhotoURLNEQ))
	}
	if len(i.PhotoURLIn) > 0 {
		predicates = append(predicates, user.PhotoURLIn(i.PhotoURLIn...))
	}
	if len(i.PhotoURLNotIn) > 0 {
		predicates = append(predicates, user.PhotoURLNotIn(i.PhotoURLNotIn...))
	}
	if i.PhotoURLGT != nil {
		predicates = append(predicates, user.PhotoURLGT(*i.PhotoURLGT))
	}
	if i.PhotoURLGTE != nil {
		predicates = append(predicates, user.PhotoURLGTE(*i.PhotoURLGTE))
	}
	if i.PhotoURLLT != nil {
		predicates = append(predicates, user.PhotoURLLT(*i.PhotoURLLT))
	}
	if i.PhotoURLLTE != nil {
		predicates = append(predicates, user.PhotoURLLTE(*i.PhotoURLLTE))
	}
	if i.PhotoURLContains != nil {
		predicates = append(predicates, user.PhotoURLContains(*i.PhotoURLContains))
	}
	if i.PhotoURLHasPrefix != nil {
		predicates = append(predicates, user.PhotoURLHasPrefix(*i.PhotoURLHasPrefix))
	}
	if i.PhotoURLHasSuffix != nil {
		predicates = append(predicates, user.PhotoURLHasSuffix(*i.PhotoURLHasSuffix))
	}
	if i.PhotoURLEqualFold != nil {
		predicates = append(predicates, user.PhotoURLEqualFold(*i.PhotoURLEqualFold))
	}
	if i.PhotoURLContainsFold != nil {
		predicates = append(predicates, user.PhotoURLContainsFold(*i.PhotoURLContainsFold))
	}
	if i.IsActivated != nil {
		predicates = append(predicates, user.IsActivatedEQ(*i.IsActivated))
	}
	if i.IsActivatedNEQ != nil {
		predicates = append(predicates, user.IsActivatedNEQ(*i.IsActivatedNEQ))
	}
	if i.IsAdmin != nil {
		predicates = append(predicates, user.IsAdminEQ(*i.IsAdmin))
	}
	if i.IsAdminNEQ != nil {
		predicates = append(predicates, user.IsAdminNEQ(*i.IsAdminNEQ))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
