// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/tavern/ent/file"
	"github.com/kcarretto/realm/tavern/ent/job"
	"github.com/kcarretto/realm/tavern/ent/tome"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp of when this ent was created
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Timestamp of when this ent was last updated
	LastModifiedAt time.Time `json:"lastModifiedAt,omitempty"`
	// Name of the job
	Name string `json:"name,omitempty"`
	// Value of parameters that were specified for the job (as a JSON string).
	Parameters string `json:"parameters,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges      JobEdges `json:"edges"`
	job_tome   *int
	job_bundle *int
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// Tome that this job will be executing
	Tome *Tome `json:"tome,omitempty"`
	// Bundle file that the executing tome depends on (if any)
	Bundle *File `json:"bundle,omitempty"`
	// Tasks tracking the status and output of individual tome execution on targets
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTasks map[string][]*Task
}

// TomeOrErr returns the Tome value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) TomeOrErr() (*Tome, error) {
	if e.loadedTypes[0] {
		if e.Tome == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tome.Label}
		}
		return e.Tome, nil
	}
	return nil, &NotLoadedError{edge: "tome"}
}

// BundleOrErr returns the Bundle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) BundleOrErr() (*File, error) {
	if e.loadedTypes[1] {
		if e.Bundle == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: file.Label}
		}
		return e.Bundle, nil
	}
	return nil, &NotLoadedError{edge: "bundle"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			values[i] = new(sql.NullInt64)
		case job.FieldName, job.FieldParameters:
			values[i] = new(sql.NullString)
		case job.FieldCreatedAt, job.FieldLastModifiedAt:
			values[i] = new(sql.NullTime)
		case job.ForeignKeys[0]: // job_tome
			values[i] = new(sql.NullInt64)
		case job.ForeignKeys[1]: // job_bundle
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Job", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case job.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				j.CreatedAt = value.Time
			}
		case job.FieldLastModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastModifiedAt", values[i])
			} else if value.Valid {
				j.LastModifiedAt = value.Time
			}
		case job.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				j.Name = value.String
			}
		case job.FieldParameters:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parameters", values[i])
			} else if value.Valid {
				j.Parameters = value.String
			}
		case job.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_tome", value)
			} else if value.Valid {
				j.job_tome = new(int)
				*j.job_tome = int(value.Int64)
			}
		case job.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_bundle", value)
			} else if value.Valid {
				j.job_bundle = new(int)
				*j.job_bundle = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTome queries the "tome" edge of the Job entity.
func (j *Job) QueryTome() *TomeQuery {
	return (&JobClient{config: j.config}).QueryTome(j)
}

// QueryBundle queries the "bundle" edge of the Job entity.
func (j *Job) QueryBundle() *FileQuery {
	return (&JobClient{config: j.config}).QueryBundle(j)
}

// QueryTasks queries the "tasks" edge of the Job entity.
func (j *Job) QueryTasks() *TaskQuery {
	return (&JobClient{config: j.config}).QueryTasks(j)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return (&JobClient{config: j.config}).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(j.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lastModifiedAt=")
	builder.WriteString(j.LastModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(j.Name)
	builder.WriteString(", ")
	builder.WriteString("parameters=")
	builder.WriteString(j.Parameters)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (j *Job) NamedTasks(name string) ([]*Task, error) {
	if j.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := j.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (j *Job) appendNamedTasks(name string, edges ...*Task) {
	if j.Edges.namedTasks == nil {
		j.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		j.Edges.namedTasks[name] = []*Task{}
	} else {
		j.Edges.namedTasks[name] = append(j.Edges.namedTasks[name], edges...)
	}
}

// Jobs is a parsable slice of Job.
type Jobs []*Job

func (j Jobs) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
