// Code generated by ent, DO NOT EDIT.

package job

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeCreatedBy holds the string denoting the createdby edge name in mutations.
	EdgeCreatedBy = "createdBy"
	// EdgeTome holds the string denoting the tome edge name in mutations.
	EdgeTome = "tome"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// CreatedByTable is the table that holds the createdBy relation/edge.
	CreatedByTable = "jobs"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the createdBy relation/edge.
	CreatedByColumn = "job_created_by"
	// TomeTable is the table that holds the tome relation/edge.
	TomeTable = "jobs"
	// TomeInverseTable is the table name for the Tome entity.
	// It exists in this package in order to avoid circular dependency with the "tome" package.
	TomeInverseTable = "tomes"
	// TomeColumn is the table column denoting the tome relation/edge.
	TomeColumn = "job_tome"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "job_tasks"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"job_created_by",
	"job_tome",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
