// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/file"
	"github.com/kcarretto/realm/tavern/ent/job"
	"github.com/kcarretto/realm/tavern/ent/predicate"
	"github.com/kcarretto/realm/tavern/ent/task"
	"github.com/kcarretto/realm/tavern/ent/tome"
	"github.com/kcarretto/realm/tavern/ent/user"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (ju *JobUpdate) SetLastModifiedAt(t time.Time) *JobUpdate {
	ju.mutation.SetLastModifiedAt(t)
	return ju
}

// SetName sets the "name" field.
func (ju *JobUpdate) SetName(s string) *JobUpdate {
	ju.mutation.SetName(s)
	return ju
}

// SetParameters sets the "parameters" field.
func (ju *JobUpdate) SetParameters(s string) *JobUpdate {
	ju.mutation.SetParameters(s)
	return ju
}

// SetNillableParameters sets the "parameters" field if the given value is not nil.
func (ju *JobUpdate) SetNillableParameters(s *string) *JobUpdate {
	if s != nil {
		ju.SetParameters(*s)
	}
	return ju
}

// ClearParameters clears the value of the "parameters" field.
func (ju *JobUpdate) ClearParameters() *JobUpdate {
	ju.mutation.ClearParameters()
	return ju
}

// SetTomeID sets the "tome" edge to the Tome entity by ID.
func (ju *JobUpdate) SetTomeID(id int) *JobUpdate {
	ju.mutation.SetTomeID(id)
	return ju
}

// SetTome sets the "tome" edge to the Tome entity.
func (ju *JobUpdate) SetTome(t *Tome) *JobUpdate {
	return ju.SetTomeID(t.ID)
}

// SetBundleID sets the "bundle" edge to the File entity by ID.
func (ju *JobUpdate) SetBundleID(id int) *JobUpdate {
	ju.mutation.SetBundleID(id)
	return ju
}

// SetNillableBundleID sets the "bundle" edge to the File entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableBundleID(id *int) *JobUpdate {
	if id != nil {
		ju = ju.SetBundleID(*id)
	}
	return ju
}

// SetBundle sets the "bundle" edge to the File entity.
func (ju *JobUpdate) SetBundle(f *File) *JobUpdate {
	return ju.SetBundleID(f.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ju *JobUpdate) AddTaskIDs(ids ...int) *JobUpdate {
	ju.mutation.AddTaskIDs(ids...)
	return ju
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ju *JobUpdate) AddTasks(t ...*Task) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.AddTaskIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ju *JobUpdate) SetCreatorID(id int) *JobUpdate {
	ju.mutation.SetCreatorID(id)
	return ju
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableCreatorID(id *int) *JobUpdate {
	if id != nil {
		ju = ju.SetCreatorID(*id)
	}
	return ju
}

// SetCreator sets the "creator" edge to the User entity.
func (ju *JobUpdate) SetCreator(u *User) *JobUpdate {
	return ju.SetCreatorID(u.ID)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearTome clears the "tome" edge to the Tome entity.
func (ju *JobUpdate) ClearTome() *JobUpdate {
	ju.mutation.ClearTome()
	return ju
}

// ClearBundle clears the "bundle" edge to the File entity.
func (ju *JobUpdate) ClearBundle() *JobUpdate {
	ju.mutation.ClearBundle()
	return ju
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ju *JobUpdate) ClearTasks() *JobUpdate {
	ju.mutation.ClearTasks()
	return ju
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ju *JobUpdate) RemoveTaskIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveTaskIDs(ids...)
	return ju
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ju *JobUpdate) RemoveTasks(t ...*Task) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.RemoveTaskIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (ju *JobUpdate) ClearCreator() *JobUpdate {
	ju.mutation.ClearCreator()
	return ju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks[int, JobMutation](ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.LastModifiedAt(); !ok {
		v := job.UpdateDefaultLastModifiedAt()
		ju.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Job.name": %w`, err)}
		}
	}
	if _, ok := ju.mutation.TomeID(); ju.mutation.TomeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Job.tome"`)
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.LastModifiedAt(); ok {
		_spec.SetField(job.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := ju.mutation.Parameters(); ok {
		_spec.SetField(job.FieldParameters, field.TypeString, value)
	}
	if ju.mutation.ParametersCleared() {
		_spec.ClearField(job.FieldParameters, field.TypeString)
	}
	if ju.mutation.TomeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.TomeTable,
			Columns: []string{job.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tome.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.TomeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.TomeTable,
			Columns: []string{job.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tome.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.BundleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.BundleTable,
			Columns: []string{job.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.BundleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.BundleTable,
			Columns: []string{job.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ju.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (juo *JobUpdateOne) SetLastModifiedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetLastModifiedAt(t)
	return juo
}

// SetName sets the "name" field.
func (juo *JobUpdateOne) SetName(s string) *JobUpdateOne {
	juo.mutation.SetName(s)
	return juo
}

// SetParameters sets the "parameters" field.
func (juo *JobUpdateOne) SetParameters(s string) *JobUpdateOne {
	juo.mutation.SetParameters(s)
	return juo
}

// SetNillableParameters sets the "parameters" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableParameters(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetParameters(*s)
	}
	return juo
}

// ClearParameters clears the value of the "parameters" field.
func (juo *JobUpdateOne) ClearParameters() *JobUpdateOne {
	juo.mutation.ClearParameters()
	return juo
}

// SetTomeID sets the "tome" edge to the Tome entity by ID.
func (juo *JobUpdateOne) SetTomeID(id int) *JobUpdateOne {
	juo.mutation.SetTomeID(id)
	return juo
}

// SetTome sets the "tome" edge to the Tome entity.
func (juo *JobUpdateOne) SetTome(t *Tome) *JobUpdateOne {
	return juo.SetTomeID(t.ID)
}

// SetBundleID sets the "bundle" edge to the File entity by ID.
func (juo *JobUpdateOne) SetBundleID(id int) *JobUpdateOne {
	juo.mutation.SetBundleID(id)
	return juo
}

// SetNillableBundleID sets the "bundle" edge to the File entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableBundleID(id *int) *JobUpdateOne {
	if id != nil {
		juo = juo.SetBundleID(*id)
	}
	return juo
}

// SetBundle sets the "bundle" edge to the File entity.
func (juo *JobUpdateOne) SetBundle(f *File) *JobUpdateOne {
	return juo.SetBundleID(f.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (juo *JobUpdateOne) AddTaskIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddTaskIDs(ids...)
	return juo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (juo *JobUpdateOne) AddTasks(t ...*Task) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.AddTaskIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (juo *JobUpdateOne) SetCreatorID(id int) *JobUpdateOne {
	juo.mutation.SetCreatorID(id)
	return juo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreatorID(id *int) *JobUpdateOne {
	if id != nil {
		juo = juo.SetCreatorID(*id)
	}
	return juo
}

// SetCreator sets the "creator" edge to the User entity.
func (juo *JobUpdateOne) SetCreator(u *User) *JobUpdateOne {
	return juo.SetCreatorID(u.ID)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearTome clears the "tome" edge to the Tome entity.
func (juo *JobUpdateOne) ClearTome() *JobUpdateOne {
	juo.mutation.ClearTome()
	return juo
}

// ClearBundle clears the "bundle" edge to the File entity.
func (juo *JobUpdateOne) ClearBundle() *JobUpdateOne {
	juo.mutation.ClearBundle()
	return juo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (juo *JobUpdateOne) ClearTasks() *JobUpdateOne {
	juo.mutation.ClearTasks()
	return juo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (juo *JobUpdateOne) RemoveTaskIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveTaskIDs(ids...)
	return juo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (juo *JobUpdateOne) RemoveTasks(t ...*Task) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.RemoveTaskIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (juo *JobUpdateOne) ClearCreator() *JobUpdateOne {
	juo.mutation.ClearCreator()
	return juo
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks[*Job, JobMutation](ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.LastModifiedAt(); !ok {
		v := job.UpdateDefaultLastModifiedAt()
		juo.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Job.name": %w`, err)}
		}
	}
	if _, ok := juo.mutation.TomeID(); juo.mutation.TomeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Job.tome"`)
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.LastModifiedAt(); ok {
		_spec.SetField(job.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := juo.mutation.Parameters(); ok {
		_spec.SetField(job.FieldParameters, field.TypeString, value)
	}
	if juo.mutation.ParametersCleared() {
		_spec.ClearField(job.FieldParameters, field.TypeString)
	}
	if juo.mutation.TomeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.TomeTable,
			Columns: []string{job.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tome.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.TomeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.TomeTable,
			Columns: []string{job.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tome.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.BundleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.BundleTable,
			Columns: []string{job.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.BundleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.BundleTable,
			Columns: []string{job.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !juo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
