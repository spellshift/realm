// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/tavern/ent/file"
	"github.com/kcarretto/realm/tavern/ent/quest"
	"github.com/kcarretto/realm/tavern/ent/tome"
	"github.com/kcarretto/realm/tavern/ent/user"
)

// Quest is the model entity for the Quest schema.
type Quest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp of when this ent was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Timestamp of when this ent was last updated
	LastModifiedAt time.Time `json:"last_modified_at,omitempty"`
	// Name of the quest
	Name string `json:"name,omitempty"`
	// Value of parameters that were specified for the quest (as a JSON string).
	Parameters string `json:"parameters,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestQuery when eager-loading is set.
	Edges         QuestEdges `json:"edges"`
	quest_tome    *int
	quest_bundle  *int
	quest_creator *int
}

// QuestEdges holds the relations/edges for other nodes in the graph.
type QuestEdges struct {
	// Tome that this quest will be executing
	Tome *Tome `json:"tome,omitempty"`
	// Bundle file that the executing tome depends on (if any)
	Bundle *File `json:"bundle,omitempty"`
	// Tasks tracking the status and output of individual tome execution on targets
	Tasks []*Task `json:"tasks,omitempty"`
	// User that created the quest if available.
	Creator *User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedTasks map[string][]*Task
}

// TomeOrErr returns the Tome value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestEdges) TomeOrErr() (*Tome, error) {
	if e.loadedTypes[0] {
		if e.Tome == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tome.Label}
		}
		return e.Tome, nil
	}
	return nil, &NotLoadedError{edge: "tome"}
}

// BundleOrErr returns the Bundle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestEdges) BundleOrErr() (*File, error) {
	if e.loadedTypes[1] {
		if e.Bundle == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: file.Label}
		}
		return e.Bundle, nil
	}
	return nil, &NotLoadedError{edge: "bundle"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e QuestEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Quest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case quest.FieldID:
			values[i] = new(sql.NullInt64)
		case quest.FieldName, quest.FieldParameters:
			values[i] = new(sql.NullString)
		case quest.FieldCreatedAt, quest.FieldLastModifiedAt:
			values[i] = new(sql.NullTime)
		case quest.ForeignKeys[0]: // quest_tome
			values[i] = new(sql.NullInt64)
		case quest.ForeignKeys[1]: // quest_bundle
			values[i] = new(sql.NullInt64)
		case quest.ForeignKeys[2]: // quest_creator
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Quest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Quest fields.
func (q *Quest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case quest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case quest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case quest.FieldLastModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_at", values[i])
			} else if value.Valid {
				q.LastModifiedAt = value.Time
			}
		case quest.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				q.Name = value.String
			}
		case quest.FieldParameters:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parameters", values[i])
			} else if value.Valid {
				q.Parameters = value.String
			}
		case quest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field quest_tome", value)
			} else if value.Valid {
				q.quest_tome = new(int)
				*q.quest_tome = int(value.Int64)
			}
		case quest.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field quest_bundle", value)
			} else if value.Valid {
				q.quest_bundle = new(int)
				*q.quest_bundle = int(value.Int64)
			}
		case quest.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field quest_creator", value)
			} else if value.Valid {
				q.quest_creator = new(int)
				*q.quest_creator = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTome queries the "tome" edge of the Quest entity.
func (q *Quest) QueryTome() *TomeQuery {
	return NewQuestClient(q.config).QueryTome(q)
}

// QueryBundle queries the "bundle" edge of the Quest entity.
func (q *Quest) QueryBundle() *FileQuery {
	return NewQuestClient(q.config).QueryBundle(q)
}

// QueryTasks queries the "tasks" edge of the Quest entity.
func (q *Quest) QueryTasks() *TaskQuery {
	return NewQuestClient(q.config).QueryTasks(q)
}

// QueryCreator queries the "creator" edge of the Quest entity.
func (q *Quest) QueryCreator() *UserQuery {
	return NewQuestClient(q.config).QueryCreator(q)
}

// Update returns a builder for updating this Quest.
// Note that you need to call Quest.Unwrap() before calling this method if this Quest
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quest) Update() *QuestUpdateOne {
	return NewQuestClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Quest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Quest) Unwrap() *Quest {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Quest is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quest) String() string {
	var builder strings.Builder
	builder.WriteString("Quest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_modified_at=")
	builder.WriteString(q.LastModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(q.Name)
	builder.WriteString(", ")
	builder.WriteString("parameters=")
	builder.WriteString(q.Parameters)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (q *Quest) NamedTasks(name string) ([]*Task, error) {
	if q.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := q.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (q *Quest) appendNamedTasks(name string, edges ...*Task) {
	if q.Edges.namedTasks == nil {
		q.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		q.Edges.namedTasks[name] = []*Task{}
	} else {
		q.Edges.namedTasks[name] = append(q.Edges.namedTasks[name], edges...)
	}
}

// Quests is a parsable slice of Quest.
type Quests []*Quest
