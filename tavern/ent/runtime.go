// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/kcarretto/realm/tavern/ent/file"
	"github.com/kcarretto/realm/tavern/ent/job"
	"github.com/kcarretto/realm/tavern/ent/schema"
	"github.com/kcarretto/realm/tavern/ent/tag"
	"github.com/kcarretto/realm/tavern/ent/target"
	"github.com/kcarretto/realm/tavern/ent/task"
	"github.com/kcarretto/realm/tavern/ent/tome"
	"github.com/kcarretto/realm/tavern/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	fileFields := schema.File{}.Fields()
	_ = fileFields
	// fileDescName is the schema descriptor for name field.
	fileDescName := fileFields[0].Descriptor()
	// file.NameValidator is a validator for the "name" field. It is called by the builders before save.
	file.NameValidator = fileDescName.Validators[0].(func(string) error)
	// fileDescSize is the schema descriptor for size field.
	fileDescSize := fileFields[1].Descriptor()
	// file.DefaultSize holds the default value on creation for the size field.
	file.DefaultSize = fileDescSize.Default.(int)
	// file.SizeValidator is a validator for the "size" field. It is called by the builders before save.
	file.SizeValidator = fileDescSize.Validators[0].(func(int) error)
	// fileDescHash is the schema descriptor for hash field.
	fileDescHash := fileFields[2].Descriptor()
	// file.HashValidator is a validator for the "hash" field. It is called by the builders before save.
	file.HashValidator = fileDescHash.Validators[0].(func(string) error)
	// fileDescCreatedAt is the schema descriptor for createdAt field.
	fileDescCreatedAt := fileFields[3].Descriptor()
	// file.DefaultCreatedAt holds the default value on creation for the createdAt field.
	file.DefaultCreatedAt = fileDescCreatedAt.Default.(func() time.Time)
	// fileDescLastModifiedAt is the schema descriptor for lastModifiedAt field.
	fileDescLastModifiedAt := fileFields[4].Descriptor()
	// file.DefaultLastModifiedAt holds the default value on creation for the lastModifiedAt field.
	file.DefaultLastModifiedAt = fileDescLastModifiedAt.Default.(func() time.Time)
	jobFields := schema.Job{}.Fields()
	_ = jobFields
	// jobDescName is the schema descriptor for name field.
	jobDescName := jobFields[0].Descriptor()
	// job.NameValidator is a validator for the "name" field. It is called by the builders before save.
	job.NameValidator = jobDescName.Validators[0].(func(string) error)
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[0].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = tagDescName.Validators[0].(func(string) error)
	targetFields := schema.Target{}.Fields()
	_ = targetFields
	// targetDescName is the schema descriptor for name field.
	targetDescName := targetFields[0].Descriptor()
	// target.NameValidator is a validator for the "name" field. It is called by the builders before save.
	target.NameValidator = targetDescName.Validators[0].(func(string) error)
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescName is the schema descriptor for name field.
	taskDescName := taskFields[0].Descriptor()
	// task.NameValidator is a validator for the "name" field. It is called by the builders before save.
	task.NameValidator = taskDescName.Validators[0].(func(string) error)
	tomeFields := schema.Tome{}.Fields()
	_ = tomeFields
	// tomeDescName is the schema descriptor for name field.
	tomeDescName := tomeFields[0].Descriptor()
	// tome.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tome.NameValidator = tomeDescName.Validators[0].(func(string) error)
	// tomeDescSize is the schema descriptor for size field.
	tomeDescSize := tomeFields[3].Descriptor()
	// tome.DefaultSize holds the default value on creation for the size field.
	tome.DefaultSize = tomeDescSize.Default.(int)
	// tome.SizeValidator is a validator for the "size" field. It is called by the builders before save.
	tome.SizeValidator = tomeDescSize.Validators[0].(func(int) error)
	// tomeDescHash is the schema descriptor for hash field.
	tomeDescHash := tomeFields[4].Descriptor()
	// tome.HashValidator is a validator for the "hash" field. It is called by the builders before save.
	tome.HashValidator = tomeDescHash.Validators[0].(func(string) error)
	// tomeDescCreatedAt is the schema descriptor for createdAt field.
	tomeDescCreatedAt := tomeFields[5].Descriptor()
	// tome.DefaultCreatedAt holds the default value on creation for the createdAt field.
	tome.DefaultCreatedAt = tomeDescCreatedAt.Default.(func() time.Time)
	// tomeDescLastModifiedAt is the schema descriptor for lastModifiedAt field.
	tomeDescLastModifiedAt := tomeFields[6].Descriptor()
	// tome.DefaultLastModifiedAt holds the default value on creation for the lastModifiedAt field.
	tome.DefaultLastModifiedAt = tomeDescLastModifiedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for Name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Name string) error {
			for _, fn := range fns {
				if err := fn(_Name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescSessionToken is the schema descriptor for SessionToken field.
	userDescSessionToken := userFields[3].Descriptor()
	// user.DefaultSessionToken holds the default value on creation for the SessionToken field.
	user.DefaultSessionToken = userDescSessionToken.Default.(func() string)
	// user.SessionTokenValidator is a validator for the "SessionToken" field. It is called by the builders before save.
	user.SessionTokenValidator = userDescSessionToken.Validators[0].(func(string) error)
	// userDescIsActivated is the schema descriptor for IsActivated field.
	userDescIsActivated := userFields[4].Descriptor()
	// user.DefaultIsActivated holds the default value on creation for the IsActivated field.
	user.DefaultIsActivated = userDescIsActivated.Default.(bool)
	// userDescIsAdmin is the schema descriptor for IsAdmin field.
	userDescIsAdmin := userFields[5].Descriptor()
	// user.DefaultIsAdmin holds the default value on creation for the IsAdmin field.
	user.DefaultIsAdmin = userDescIsAdmin.Default.(bool)
}
