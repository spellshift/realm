// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/predicate"
	"github.com/kcarretto/realm/tavern/ent/session"
	"github.com/kcarretto/realm/tavern/ent/tag"
	"github.com/kcarretto/realm/tavern/ent/task"
)

// SessionUpdate is the builder for updating Session entities.
type SessionUpdate struct {
	config
	hooks    []Hook
	mutation *SessionMutation
}

// Where appends a list predicates to the SessionUpdate builder.
func (su *SessionUpdate) Where(ps ...predicate.Session) *SessionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetPrincipal sets the "principal" field.
func (su *SessionUpdate) SetPrincipal(s string) *SessionUpdate {
	su.mutation.SetPrincipal(s)
	return su
}

// SetNillablePrincipal sets the "principal" field if the given value is not nil.
func (su *SessionUpdate) SetNillablePrincipal(s *string) *SessionUpdate {
	if s != nil {
		su.SetPrincipal(*s)
	}
	return su
}

// ClearPrincipal clears the value of the "principal" field.
func (su *SessionUpdate) ClearPrincipal() *SessionUpdate {
	su.mutation.ClearPrincipal()
	return su
}

// SetHostname sets the "hostname" field.
func (su *SessionUpdate) SetHostname(s string) *SessionUpdate {
	su.mutation.SetHostname(s)
	return su
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (su *SessionUpdate) SetNillableHostname(s *string) *SessionUpdate {
	if s != nil {
		su.SetHostname(*s)
	}
	return su
}

// ClearHostname clears the value of the "hostname" field.
func (su *SessionUpdate) ClearHostname() *SessionUpdate {
	su.mutation.ClearHostname()
	return su
}

// SetIdentifier sets the "identifier" field.
func (su *SessionUpdate) SetIdentifier(s string) *SessionUpdate {
	su.mutation.SetIdentifier(s)
	return su
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (su *SessionUpdate) SetNillableIdentifier(s *string) *SessionUpdate {
	if s != nil {
		su.SetIdentifier(*s)
	}
	return su
}

// SetAgentIdentifier sets the "agentIdentifier" field.
func (su *SessionUpdate) SetAgentIdentifier(s string) *SessionUpdate {
	su.mutation.SetAgentIdentifier(s)
	return su
}

// SetNillableAgentIdentifier sets the "agentIdentifier" field if the given value is not nil.
func (su *SessionUpdate) SetNillableAgentIdentifier(s *string) *SessionUpdate {
	if s != nil {
		su.SetAgentIdentifier(*s)
	}
	return su
}

// ClearAgentIdentifier clears the value of the "agentIdentifier" field.
func (su *SessionUpdate) ClearAgentIdentifier() *SessionUpdate {
	su.mutation.ClearAgentIdentifier()
	return su
}

// SetHostIdentifier sets the "hostIdentifier" field.
func (su *SessionUpdate) SetHostIdentifier(s string) *SessionUpdate {
	su.mutation.SetHostIdentifier(s)
	return su
}

// SetNillableHostIdentifier sets the "hostIdentifier" field if the given value is not nil.
func (su *SessionUpdate) SetNillableHostIdentifier(s *string) *SessionUpdate {
	if s != nil {
		su.SetHostIdentifier(*s)
	}
	return su
}

// ClearHostIdentifier clears the value of the "hostIdentifier" field.
func (su *SessionUpdate) ClearHostIdentifier() *SessionUpdate {
	su.mutation.ClearHostIdentifier()
	return su
}

// SetLastSeenAt sets the "lastSeenAt" field.
func (su *SessionUpdate) SetLastSeenAt(t time.Time) *SessionUpdate {
	su.mutation.SetLastSeenAt(t)
	return su
}

// SetNillableLastSeenAt sets the "lastSeenAt" field if the given value is not nil.
func (su *SessionUpdate) SetNillableLastSeenAt(t *time.Time) *SessionUpdate {
	if t != nil {
		su.SetLastSeenAt(*t)
	}
	return su
}

// ClearLastSeenAt clears the value of the "lastSeenAt" field.
func (su *SessionUpdate) ClearLastSeenAt() *SessionUpdate {
	su.mutation.ClearLastSeenAt()
	return su
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (su *SessionUpdate) AddTagIDs(ids ...int) *SessionUpdate {
	su.mutation.AddTagIDs(ids...)
	return su
}

// AddTags adds the "tags" edges to the Tag entity.
func (su *SessionUpdate) AddTags(t ...*Tag) *SessionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTagIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (su *SessionUpdate) AddTaskIDs(ids ...int) *SessionUpdate {
	su.mutation.AddTaskIDs(ids...)
	return su
}

// AddTasks adds the "tasks" edges to the Task entity.
func (su *SessionUpdate) AddTasks(t ...*Task) *SessionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTaskIDs(ids...)
}

// Mutation returns the SessionMutation object of the builder.
func (su *SessionUpdate) Mutation() *SessionMutation {
	return su.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (su *SessionUpdate) ClearTags() *SessionUpdate {
	su.mutation.ClearTags()
	return su
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (su *SessionUpdate) RemoveTagIDs(ids ...int) *SessionUpdate {
	su.mutation.RemoveTagIDs(ids...)
	return su
}

// RemoveTags removes "tags" edges to Tag entities.
func (su *SessionUpdate) RemoveTags(t ...*Tag) *SessionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTagIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (su *SessionUpdate) ClearTasks() *SessionUpdate {
	su.mutation.ClearTasks()
	return su
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (su *SessionUpdate) RemoveTaskIDs(ids ...int) *SessionUpdate {
	su.mutation.RemoveTaskIDs(ids...)
	return su
}

// RemoveTasks removes "tasks" edges to Task entities.
func (su *SessionUpdate) RemoveTasks(t ...*Task) *SessionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SessionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SessionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SessionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SessionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SessionUpdate) check() error {
	if v, ok := su.mutation.Principal(); ok {
		if err := session.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "Session.principal": %w`, err)}
		}
	}
	if v, ok := su.mutation.Hostname(); ok {
		if err := session.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Session.hostname": %w`, err)}
		}
	}
	if v, ok := su.mutation.Identifier(); ok {
		if err := session.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Session.identifier": %w`, err)}
		}
	}
	if v, ok := su.mutation.AgentIdentifier(); ok {
		if err := session.AgentIdentifierValidator(v); err != nil {
			return &ValidationError{Name: "agentIdentifier", err: fmt.Errorf(`ent: validator failed for field "Session.agentIdentifier": %w`, err)}
		}
	}
	if v, ok := su.mutation.HostIdentifier(); ok {
		if err := session.HostIdentifierValidator(v); err != nil {
			return &ValidationError{Name: "hostIdentifier", err: fmt.Errorf(`ent: validator failed for field "Session.hostIdentifier": %w`, err)}
		}
	}
	return nil
}

func (su *SessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: session.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Principal(); ok {
		_spec.SetField(session.FieldPrincipal, field.TypeString, value)
	}
	if su.mutation.PrincipalCleared() {
		_spec.ClearField(session.FieldPrincipal, field.TypeString)
	}
	if value, ok := su.mutation.Hostname(); ok {
		_spec.SetField(session.FieldHostname, field.TypeString, value)
	}
	if su.mutation.HostnameCleared() {
		_spec.ClearField(session.FieldHostname, field.TypeString)
	}
	if value, ok := su.mutation.Identifier(); ok {
		_spec.SetField(session.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := su.mutation.AgentIdentifier(); ok {
		_spec.SetField(session.FieldAgentIdentifier, field.TypeString, value)
	}
	if su.mutation.AgentIdentifierCleared() {
		_spec.ClearField(session.FieldAgentIdentifier, field.TypeString)
	}
	if value, ok := su.mutation.HostIdentifier(); ok {
		_spec.SetField(session.FieldHostIdentifier, field.TypeString, value)
	}
	if su.mutation.HostIdentifierCleared() {
		_spec.ClearField(session.FieldHostIdentifier, field.TypeString)
	}
	if value, ok := su.mutation.LastSeenAt(); ok {
		_spec.SetField(session.FieldLastSeenAt, field.TypeTime, value)
	}
	if su.mutation.LastSeenAtCleared() {
		_spec.ClearField(session.FieldLastSeenAt, field.TypeTime)
	}
	if su.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   session.TagsTable,
			Columns: session.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTagsIDs(); len(nodes) > 0 && !su.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   session.TagsTable,
			Columns: session.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   session.TagsTable,
			Columns: session.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   session.TasksTable,
			Columns: []string{session.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTasksIDs(); len(nodes) > 0 && !su.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   session.TasksTable,
			Columns: []string{session.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   session.TasksTable,
			Columns: []string{session.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SessionUpdateOne is the builder for updating a single Session entity.
type SessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SessionMutation
}

// SetPrincipal sets the "principal" field.
func (suo *SessionUpdateOne) SetPrincipal(s string) *SessionUpdateOne {
	suo.mutation.SetPrincipal(s)
	return suo
}

// SetNillablePrincipal sets the "principal" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillablePrincipal(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetPrincipal(*s)
	}
	return suo
}

// ClearPrincipal clears the value of the "principal" field.
func (suo *SessionUpdateOne) ClearPrincipal() *SessionUpdateOne {
	suo.mutation.ClearPrincipal()
	return suo
}

// SetHostname sets the "hostname" field.
func (suo *SessionUpdateOne) SetHostname(s string) *SessionUpdateOne {
	suo.mutation.SetHostname(s)
	return suo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableHostname(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetHostname(*s)
	}
	return suo
}

// ClearHostname clears the value of the "hostname" field.
func (suo *SessionUpdateOne) ClearHostname() *SessionUpdateOne {
	suo.mutation.ClearHostname()
	return suo
}

// SetIdentifier sets the "identifier" field.
func (suo *SessionUpdateOne) SetIdentifier(s string) *SessionUpdateOne {
	suo.mutation.SetIdentifier(s)
	return suo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableIdentifier(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetIdentifier(*s)
	}
	return suo
}

// SetAgentIdentifier sets the "agentIdentifier" field.
func (suo *SessionUpdateOne) SetAgentIdentifier(s string) *SessionUpdateOne {
	suo.mutation.SetAgentIdentifier(s)
	return suo
}

// SetNillableAgentIdentifier sets the "agentIdentifier" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableAgentIdentifier(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetAgentIdentifier(*s)
	}
	return suo
}

// ClearAgentIdentifier clears the value of the "agentIdentifier" field.
func (suo *SessionUpdateOne) ClearAgentIdentifier() *SessionUpdateOne {
	suo.mutation.ClearAgentIdentifier()
	return suo
}

// SetHostIdentifier sets the "hostIdentifier" field.
func (suo *SessionUpdateOne) SetHostIdentifier(s string) *SessionUpdateOne {
	suo.mutation.SetHostIdentifier(s)
	return suo
}

// SetNillableHostIdentifier sets the "hostIdentifier" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableHostIdentifier(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetHostIdentifier(*s)
	}
	return suo
}

// ClearHostIdentifier clears the value of the "hostIdentifier" field.
func (suo *SessionUpdateOne) ClearHostIdentifier() *SessionUpdateOne {
	suo.mutation.ClearHostIdentifier()
	return suo
}

// SetLastSeenAt sets the "lastSeenAt" field.
func (suo *SessionUpdateOne) SetLastSeenAt(t time.Time) *SessionUpdateOne {
	suo.mutation.SetLastSeenAt(t)
	return suo
}

// SetNillableLastSeenAt sets the "lastSeenAt" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableLastSeenAt(t *time.Time) *SessionUpdateOne {
	if t != nil {
		suo.SetLastSeenAt(*t)
	}
	return suo
}

// ClearLastSeenAt clears the value of the "lastSeenAt" field.
func (suo *SessionUpdateOne) ClearLastSeenAt() *SessionUpdateOne {
	suo.mutation.ClearLastSeenAt()
	return suo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (suo *SessionUpdateOne) AddTagIDs(ids ...int) *SessionUpdateOne {
	suo.mutation.AddTagIDs(ids...)
	return suo
}

// AddTags adds the "tags" edges to the Tag entity.
func (suo *SessionUpdateOne) AddTags(t ...*Tag) *SessionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTagIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (suo *SessionUpdateOne) AddTaskIDs(ids ...int) *SessionUpdateOne {
	suo.mutation.AddTaskIDs(ids...)
	return suo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (suo *SessionUpdateOne) AddTasks(t ...*Task) *SessionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTaskIDs(ids...)
}

// Mutation returns the SessionMutation object of the builder.
func (suo *SessionUpdateOne) Mutation() *SessionMutation {
	return suo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (suo *SessionUpdateOne) ClearTags() *SessionUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (suo *SessionUpdateOne) RemoveTagIDs(ids ...int) *SessionUpdateOne {
	suo.mutation.RemoveTagIDs(ids...)
	return suo
}

// RemoveTags removes "tags" edges to Tag entities.
func (suo *SessionUpdateOne) RemoveTags(t ...*Tag) *SessionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTagIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (suo *SessionUpdateOne) ClearTasks() *SessionUpdateOne {
	suo.mutation.ClearTasks()
	return suo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (suo *SessionUpdateOne) RemoveTaskIDs(ids ...int) *SessionUpdateOne {
	suo.mutation.RemoveTaskIDs(ids...)
	return suo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (suo *SessionUpdateOne) RemoveTasks(t ...*Task) *SessionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SessionUpdateOne) Select(field string, fields ...string) *SessionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Session entity.
func (suo *SessionUpdateOne) Save(ctx context.Context) (*Session, error) {
	var (
		err  error
		node *Session
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Session)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SessionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SessionUpdateOne) SaveX(ctx context.Context) *Session {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SessionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SessionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SessionUpdateOne) check() error {
	if v, ok := suo.mutation.Principal(); ok {
		if err := session.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "Session.principal": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Hostname(); ok {
		if err := session.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Session.hostname": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Identifier(); ok {
		if err := session.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Session.identifier": %w`, err)}
		}
	}
	if v, ok := suo.mutation.AgentIdentifier(); ok {
		if err := session.AgentIdentifierValidator(v); err != nil {
			return &ValidationError{Name: "agentIdentifier", err: fmt.Errorf(`ent: validator failed for field "Session.agentIdentifier": %w`, err)}
		}
	}
	if v, ok := suo.mutation.HostIdentifier(); ok {
		if err := session.HostIdentifierValidator(v); err != nil {
			return &ValidationError{Name: "hostIdentifier", err: fmt.Errorf(`ent: validator failed for field "Session.hostIdentifier": %w`, err)}
		}
	}
	return nil
}

func (suo *SessionUpdateOne) sqlSave(ctx context.Context) (_node *Session, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: session.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Session.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, session.FieldID)
		for _, f := range fields {
			if !session.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != session.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Principal(); ok {
		_spec.SetField(session.FieldPrincipal, field.TypeString, value)
	}
	if suo.mutation.PrincipalCleared() {
		_spec.ClearField(session.FieldPrincipal, field.TypeString)
	}
	if value, ok := suo.mutation.Hostname(); ok {
		_spec.SetField(session.FieldHostname, field.TypeString, value)
	}
	if suo.mutation.HostnameCleared() {
		_spec.ClearField(session.FieldHostname, field.TypeString)
	}
	if value, ok := suo.mutation.Identifier(); ok {
		_spec.SetField(session.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := suo.mutation.AgentIdentifier(); ok {
		_spec.SetField(session.FieldAgentIdentifier, field.TypeString, value)
	}
	if suo.mutation.AgentIdentifierCleared() {
		_spec.ClearField(session.FieldAgentIdentifier, field.TypeString)
	}
	if value, ok := suo.mutation.HostIdentifier(); ok {
		_spec.SetField(session.FieldHostIdentifier, field.TypeString, value)
	}
	if suo.mutation.HostIdentifierCleared() {
		_spec.ClearField(session.FieldHostIdentifier, field.TypeString)
	}
	if value, ok := suo.mutation.LastSeenAt(); ok {
		_spec.SetField(session.FieldLastSeenAt, field.TypeTime, value)
	}
	if suo.mutation.LastSeenAtCleared() {
		_spec.ClearField(session.FieldLastSeenAt, field.TypeTime)
	}
	if suo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   session.TagsTable,
			Columns: session.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !suo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   session.TagsTable,
			Columns: session.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   session.TagsTable,
			Columns: session.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   session.TasksTable,
			Columns: []string{session.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !suo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   session.TasksTable,
			Columns: []string{session.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   session.TasksTable,
			Columns: []string{session.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Session{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
