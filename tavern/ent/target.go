// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/tavern/ent/target"
)

// Target is the model entity for the Target schema.
type Target struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Human-readable name of the target
	Name string `json:"name,omitempty"`
	// Timestamp of when a task was last claimed or updated for a target
	LastSeenAt time.Time `json:"lastSeenAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TargetQuery when eager-loading is set.
	Edges TargetEdges `json:"edges"`
}

// TargetEdges holds the relations/edges for other nodes in the graph.
type TargetEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedTags map[string][]*Tag
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e TargetEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Target) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case target.FieldID:
			values[i] = new(sql.NullInt64)
		case target.FieldName:
			values[i] = new(sql.NullString)
		case target.FieldLastSeenAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Target", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Target fields.
func (t *Target) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case target.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case target.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case target.FieldLastSeenAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastSeenAt", values[i])
			} else if value.Valid {
				t.LastSeenAt = value.Time
			}
		}
	}
	return nil
}

// QueryTags queries the "tags" edge of the Target entity.
func (t *Target) QueryTags() *TagQuery {
	return (&TargetClient{config: t.config}).QueryTags(t)
}

// Update returns a builder for updating this Target.
// Note that you need to call Target.Unwrap() before calling this method if this Target
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Target) Update() *TargetUpdateOne {
	return (&TargetClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Target entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Target) Unwrap() *Target {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Target is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Target) String() string {
	var builder strings.Builder
	builder.WriteString("Target(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("lastSeenAt=")
	builder.WriteString(t.LastSeenAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTags returns the Tags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Target) NamedTags(name string) ([]*Tag, error) {
	if t.Edges.namedTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Target) appendNamedTags(name string, edges ...*Tag) {
	if t.Edges.namedTags == nil {
		t.Edges.namedTags = make(map[string][]*Tag)
	}
	if len(edges) == 0 {
		t.Edges.namedTags[name] = []*Tag{}
	} else {
		t.Edges.namedTags[name] = append(t.Edges.namedTags[name], edges...)
	}
}

// Targets is a parsable slice of Target.
type Targets []*Target

func (t Targets) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
