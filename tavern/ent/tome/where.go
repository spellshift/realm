// Code generated by ent, DO NOT EDIT.

package tome

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kcarretto/realm/tavern/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// LastModifiedAt applies equality check predicate on the "lastModifiedAt" field. It's identical to LastModifiedAtEQ.
func LastModifiedAt(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Parameters applies equality check predicate on the "parameters" field. It's identical to ParametersEQ.
func Parameters(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParameters), v))
	})
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// Eldritch applies equality check predicate on the "eldritch" field. It's identical to EldritchEQ.
func Eldritch(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEldritch), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// LastModifiedAtEQ applies the EQ predicate on the "lastModifiedAt" field.
func LastModifiedAtEQ(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtNEQ applies the NEQ predicate on the "lastModifiedAt" field.
func LastModifiedAtNEQ(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtIn applies the In predicate on the "lastModifiedAt" field.
func LastModifiedAtIn(vs ...time.Time) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastModifiedAt), v...))
	})
}

// LastModifiedAtNotIn applies the NotIn predicate on the "lastModifiedAt" field.
func LastModifiedAtNotIn(vs ...time.Time) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastModifiedAt), v...))
	})
}

// LastModifiedAtGT applies the GT predicate on the "lastModifiedAt" field.
func LastModifiedAtGT(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtGTE applies the GTE predicate on the "lastModifiedAt" field.
func LastModifiedAtGTE(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtLT applies the LT predicate on the "lastModifiedAt" field.
func LastModifiedAtLT(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtLTE applies the LTE predicate on the "lastModifiedAt" field.
func LastModifiedAtLTE(v time.Time) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// ParametersEQ applies the EQ predicate on the "parameters" field.
func ParametersEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParameters), v))
	})
}

// ParametersNEQ applies the NEQ predicate on the "parameters" field.
func ParametersNEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParameters), v))
	})
}

// ParametersIn applies the In predicate on the "parameters" field.
func ParametersIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldParameters), v...))
	})
}

// ParametersNotIn applies the NotIn predicate on the "parameters" field.
func ParametersNotIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldParameters), v...))
	})
}

// ParametersGT applies the GT predicate on the "parameters" field.
func ParametersGT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParameters), v))
	})
}

// ParametersGTE applies the GTE predicate on the "parameters" field.
func ParametersGTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParameters), v))
	})
}

// ParametersLT applies the LT predicate on the "parameters" field.
func ParametersLT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParameters), v))
	})
}

// ParametersLTE applies the LTE predicate on the "parameters" field.
func ParametersLTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParameters), v))
	})
}

// ParametersContains applies the Contains predicate on the "parameters" field.
func ParametersContains(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParameters), v))
	})
}

// ParametersHasPrefix applies the HasPrefix predicate on the "parameters" field.
func ParametersHasPrefix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParameters), v))
	})
}

// ParametersHasSuffix applies the HasSuffix predicate on the "parameters" field.
func ParametersHasSuffix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParameters), v))
	})
}

// ParametersIsNil applies the IsNil predicate on the "parameters" field.
func ParametersIsNil() predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParameters)))
	})
}

// ParametersNotNil applies the NotNil predicate on the "parameters" field.
func ParametersNotNil() predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParameters)))
	})
}

// ParametersEqualFold applies the EqualFold predicate on the "parameters" field.
func ParametersEqualFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParameters), v))
	})
}

// ParametersContainsFold applies the ContainsFold predicate on the "parameters" field.
func ParametersContainsFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParameters), v))
	})
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHash), v))
	})
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHash), v...))
	})
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHash), v...))
	})
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHash), v))
	})
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHash), v))
	})
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHash), v))
	})
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHash), v))
	})
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHash), v))
	})
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHash), v))
	})
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHash), v))
	})
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHash), v))
	})
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHash), v))
	})
}

// EldritchEQ applies the EQ predicate on the "eldritch" field.
func EldritchEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEldritch), v))
	})
}

// EldritchNEQ applies the NEQ predicate on the "eldritch" field.
func EldritchNEQ(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEldritch), v))
	})
}

// EldritchIn applies the In predicate on the "eldritch" field.
func EldritchIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEldritch), v...))
	})
}

// EldritchNotIn applies the NotIn predicate on the "eldritch" field.
func EldritchNotIn(vs ...string) predicate.Tome {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEldritch), v...))
	})
}

// EldritchGT applies the GT predicate on the "eldritch" field.
func EldritchGT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEldritch), v))
	})
}

// EldritchGTE applies the GTE predicate on the "eldritch" field.
func EldritchGTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEldritch), v))
	})
}

// EldritchLT applies the LT predicate on the "eldritch" field.
func EldritchLT(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEldritch), v))
	})
}

// EldritchLTE applies the LTE predicate on the "eldritch" field.
func EldritchLTE(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEldritch), v))
	})
}

// EldritchContains applies the Contains predicate on the "eldritch" field.
func EldritchContains(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEldritch), v))
	})
}

// EldritchHasPrefix applies the HasPrefix predicate on the "eldritch" field.
func EldritchHasPrefix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEldritch), v))
	})
}

// EldritchHasSuffix applies the HasSuffix predicate on the "eldritch" field.
func EldritchHasSuffix(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEldritch), v))
	})
}

// EldritchEqualFold applies the EqualFold predicate on the "eldritch" field.
func EldritchEqualFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEldritch), v))
	})
}

// EldritchContainsFold applies the ContainsFold predicate on the "eldritch" field.
func EldritchContainsFold(v string) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEldritch), v))
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FilesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FilesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tome) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tome) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tome) predicate.Tome {
	return predicate.Tome(func(s *sql.Selector) {
		p(s.Not())
	})
}
