// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/tome"
)

// TomeCreate is the builder for creating a Tome entity.
type TomeCreate struct {
	config
	mutation *TomeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *TomeCreate) SetName(s string) *TomeCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TomeCreate) SetDescription(s string) *TomeCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetParameters sets the "parameters" field.
func (tc *TomeCreate) SetParameters(s string) *TomeCreate {
	tc.mutation.SetParameters(s)
	return tc
}

// SetSize sets the "size" field.
func (tc *TomeCreate) SetSize(i int) *TomeCreate {
	tc.mutation.SetSize(i)
	return tc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (tc *TomeCreate) SetNillableSize(i *int) *TomeCreate {
	if i != nil {
		tc.SetSize(*i)
	}
	return tc
}

// SetHash sets the "hash" field.
func (tc *TomeCreate) SetHash(s string) *TomeCreate {
	tc.mutation.SetHash(s)
	return tc
}

// SetCreatedAt sets the "createdAt" field.
func (tc *TomeCreate) SetCreatedAt(t time.Time) *TomeCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tc *TomeCreate) SetNillableCreatedAt(t *time.Time) *TomeCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetLastModifiedAt sets the "lastModifiedAt" field.
func (tc *TomeCreate) SetLastModifiedAt(t time.Time) *TomeCreate {
	tc.mutation.SetLastModifiedAt(t)
	return tc
}

// SetNillableLastModifiedAt sets the "lastModifiedAt" field if the given value is not nil.
func (tc *TomeCreate) SetNillableLastModifiedAt(t *time.Time) *TomeCreate {
	if t != nil {
		tc.SetLastModifiedAt(*t)
	}
	return tc
}

// SetContent sets the "content" field.
func (tc *TomeCreate) SetContent(b []byte) *TomeCreate {
	tc.mutation.SetContent(b)
	return tc
}

// Mutation returns the TomeMutation object of the builder.
func (tc *TomeCreate) Mutation() *TomeMutation {
	return tc.mutation
}

// Save creates the Tome in the database.
func (tc *TomeCreate) Save(ctx context.Context) (*Tome, error) {
	var (
		err  error
		node *Tome
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TomeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tome)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TomeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TomeCreate) SaveX(ctx context.Context) *Tome {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TomeCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TomeCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TomeCreate) defaults() {
	if _, ok := tc.mutation.Size(); !ok {
		v := tome.DefaultSize
		tc.mutation.SetSize(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tome.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.LastModifiedAt(); !ok {
		v := tome.DefaultLastModifiedAt()
		tc.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TomeCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tome.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := tome.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tome.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Tome.description"`)}
	}
	if _, ok := tc.mutation.Parameters(); !ok {
		return &ValidationError{Name: "parameters", err: errors.New(`ent: missing required field "Tome.parameters"`)}
	}
	if _, ok := tc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Tome.size"`)}
	}
	if v, ok := tc.mutation.Size(); ok {
		if err := tome.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Tome.size": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Tome.hash"`)}
	}
	if v, ok := tc.mutation.Hash(); ok {
		if err := tome.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Tome.hash": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Tome.createdAt"`)}
	}
	if _, ok := tc.mutation.LastModifiedAt(); !ok {
		return &ValidationError{Name: "lastModifiedAt", err: errors.New(`ent: missing required field "Tome.lastModifiedAt"`)}
	}
	if _, ok := tc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Tome.content"`)}
	}
	return nil
}

func (tc *TomeCreate) sqlSave(ctx context.Context) (*Tome, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TomeCreate) createSpec() (*Tome, *sqlgraph.CreateSpec) {
	var (
		_node = &Tome{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tome.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tome.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tome.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(tome.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Parameters(); ok {
		_spec.SetField(tome.FieldParameters, field.TypeString, value)
		_node.Parameters = value
	}
	if value, ok := tc.mutation.Size(); ok {
		_spec.SetField(tome.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := tc.mutation.Hash(); ok {
		_spec.SetField(tome.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tome.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.LastModifiedAt(); ok {
		_spec.SetField(tome.FieldLastModifiedAt, field.TypeTime, value)
		_node.LastModifiedAt = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.SetField(tome.FieldContent, field.TypeBytes, value)
		_node.Content = value
	}
	return _node, _spec
}

// TomeCreateBulk is the builder for creating many Tome entities in bulk.
type TomeCreateBulk struct {
	config
	builders []*TomeCreate
}

// Save creates the Tome entities in the database.
func (tcb *TomeCreateBulk) Save(ctx context.Context) ([]*Tome, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tome, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TomeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TomeCreateBulk) SaveX(ctx context.Context) []*Tome {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TomeCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TomeCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
