directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateJobInput is used for create Job object.
Input was generated by ent.
"""
input CreateJobInput {
  """Name of the job"""
  name: String!
  tomeID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type File implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  """Timestamp of when this ent was last updated"""
  lastmodifiedat: Time! @goField(name: "LastModifiedAt", forceResolver: false)
  """The name of the file, used to reference it for downloads"""
  name: String!
  """The size of the file in bytes"""
  size: Int!
  """A SHA3 digest of the content field"""
  hash: String!
}
"""Ordering options for File connections"""
input FileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Files."""
  field: FileOrderField!
}
"""Properties by which File connections can be ordered."""
enum FileOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
  SIZE
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """createdAt field predicates"""
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """lastModifiedAt field predicates"""
  lastmodifiedat: Time
  lastmodifiedatNEQ: Time
  lastmodifiedatIn: [Time!]
  lastmodifiedatNotIn: [Time!]
  lastmodifiedatGT: Time
  lastmodifiedatGTE: Time
  lastmodifiedatLT: Time
  lastmodifiedatLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """size field predicates"""
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashEqualFold: String
  hashContainsFold: String
}
type Job implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  """Timestamp of when this ent was last updated"""
  lastmodifiedat: Time! @goField(name: "LastModifiedAt", forceResolver: false)
  """Name of the job"""
  name: String!
  tome: Tome!
  bundle: File
  tasks: [Task!]
}
"""Ordering options for Job connections"""
input JobOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Jobs."""
  field: JobOrderField!
}
"""Properties by which Job connections can be ordered."""
enum JobOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
}
"""
JobWhereInput is used for filtering Job objects.
Input was generated by ent.
"""
input JobWhereInput {
  not: JobWhereInput
  and: [JobWhereInput!]
  or: [JobWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """createdAt field predicates"""
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """lastModifiedAt field predicates"""
  lastmodifiedat: Time
  lastmodifiedatNEQ: Time
  lastmodifiedatIn: [Time!]
  lastmodifiedatNotIn: [Time!]
  lastmodifiedatGT: Time
  lastmodifiedatGTE: Time
  lastmodifiedatLT: Time
  lastmodifiedatLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """tome edge predicates"""
  hasTome: Boolean
  hasTomeWith: [TomeWhereInput!]
  """bundle edge predicates"""
  hasBundle: Boolean
  hasBundleWith: [FileWhereInput!]
  """tasks edge predicates"""
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/kcarretto/realm/tavern/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  files: [File!]!
  jobs: [Job!]!
  tags: [Tag!]!
  targets: [Target!]!
  tomes: [Tome!]!
  users: [User!]!
}
type Tag implements Node {
  id: ID!
  """Name of the tag"""
  name: String!
  """Describes the type of tag this is"""
  kind: TagTagKind!
  targets: [Target!]!
}
"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tags."""
  field: TagOrderField!
}
"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  NAME
}
"""TagTagKind is enum for the field kind"""
enum TagTagKind @goModel(model: "github.com/kcarretto/realm/tavern/ent/tag.Kind") {
  group
  service
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """kind field predicates"""
  kind: TagTagKind
  kindNEQ: TagTagKind
  kindIn: [TagTagKind!]
  kindNotIn: [TagTagKind!]
  """targets edge predicates"""
  hasTargets: Boolean
  hasTargetsWith: [TargetWhereInput!]
}
type Target implements Node {
  id: ID!
  """Human-readable name of the target"""
  name: String!
  """Timestamp of when a task was last claimed or updated for a target"""
  lastseenat: Time @goField(name: "LastSeenAt", forceResolver: false)
  tags: [Tag!]
}
"""Ordering options for Target connections"""
input TargetOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Targets."""
  field: TargetOrderField!
}
"""Properties by which Target connections can be ordered."""
enum TargetOrderField {
  NAME
  LAST_SEEN_AT
}
"""
TargetWhereInput is used for filtering Target objects.
Input was generated by ent.
"""
input TargetWhereInput {
  not: TargetWhereInput
  and: [TargetWhereInput!]
  or: [TargetWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """lastSeenAt field predicates"""
  lastseenat: Time
  lastseenatNEQ: Time
  lastseenatIn: [Time!]
  lastseenatNotIn: [Time!]
  lastseenatGT: Time
  lastseenatGTE: Time
  lastseenatLT: Time
  lastseenatLTE: Time
  lastseenatIsNil: Boolean
  lastseenatNotNil: Boolean
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
}
type Task implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  """Timestamp of when this ent was last updated"""
  lastmodifiedat: Time! @goField(name: "LastModifiedAt", forceResolver: false)
  """Timestamp of when the task was claimed, null if not yet claimed"""
  claimedat: Time @goField(name: "ClaimedAt", forceResolver: false)
  """Timestamp of when execution of the task started, null if not yet started"""
  execstartedat: Time @goField(name: "ExecStartedAt", forceResolver: false)
  """Timestamp of when execution of the task finished, null if not yet finished"""
  execfinishedat: Time @goField(name: "ExecFinishedAt", forceResolver: false)
  """Output from executing the task"""
  output: String
  """Error, if any, produced while executing the Task"""
  error: String
  job: Job!
  target: Target!
}
"""Ordering options for Task connections"""
input TaskOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tasks."""
  field: TaskOrderField!
}
"""Properties by which Task connections can be ordered."""
enum TaskOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  CLAIMED_AT
  EXEC_STARTED_AT
  EXEC_FINISHED_AT
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """createdAt field predicates"""
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """lastModifiedAt field predicates"""
  lastmodifiedat: Time
  lastmodifiedatNEQ: Time
  lastmodifiedatIn: [Time!]
  lastmodifiedatNotIn: [Time!]
  lastmodifiedatGT: Time
  lastmodifiedatGTE: Time
  lastmodifiedatLT: Time
  lastmodifiedatLTE: Time
  """claimedAt field predicates"""
  claimedat: Time
  claimedatNEQ: Time
  claimedatIn: [Time!]
  claimedatNotIn: [Time!]
  claimedatGT: Time
  claimedatGTE: Time
  claimedatLT: Time
  claimedatLTE: Time
  claimedatIsNil: Boolean
  claimedatNotNil: Boolean
  """execStartedAt field predicates"""
  execstartedat: Time
  execstartedatNEQ: Time
  execstartedatIn: [Time!]
  execstartedatNotIn: [Time!]
  execstartedatGT: Time
  execstartedatGTE: Time
  execstartedatLT: Time
  execstartedatLTE: Time
  execstartedatIsNil: Boolean
  execstartedatNotNil: Boolean
  """execFinishedAt field predicates"""
  execfinishedat: Time
  execfinishedatNEQ: Time
  execfinishedatIn: [Time!]
  execfinishedatNotIn: [Time!]
  execfinishedatGT: Time
  execfinishedatGTE: Time
  execfinishedatLT: Time
  execfinishedatLTE: Time
  execfinishedatIsNil: Boolean
  execfinishedatNotNil: Boolean
  """output field predicates"""
  output: String
  outputNEQ: String
  outputIn: [String!]
  outputNotIn: [String!]
  outputGT: String
  outputGTE: String
  outputLT: String
  outputLTE: String
  outputContains: String
  outputHasPrefix: String
  outputHasSuffix: String
  outputIsNil: Boolean
  outputNotNil: Boolean
  outputEqualFold: String
  outputContainsFold: String
  """error field predicates"""
  error: String
  errorNEQ: String
  errorIn: [String!]
  errorNotIn: [String!]
  errorGT: String
  errorGTE: String
  errorLT: String
  errorLTE: String
  errorContains: String
  errorHasPrefix: String
  errorHasSuffix: String
  errorIsNil: Boolean
  errorNotNil: Boolean
  errorEqualFold: String
  errorContainsFold: String
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [JobWhereInput!]
  """target edge predicates"""
  hasTarget: Boolean
  hasTargetWith: [TargetWhereInput!]
}
type Tome implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  """Timestamp of when this ent was last updated"""
  lastmodifiedat: Time! @goField(name: "LastModifiedAt", forceResolver: false)
  """Name of the tome"""
  name: String!
  """Information about the tome"""
  description: String!
  """JSON string describing what parameters are used with the tome"""
  parameters: String
  """A SHA3 digest of the eldritch field"""
  hash: String!
  """Eldritch script that will be executed when the tome is run"""
  eldritch: String!
  files: [File!]
}
"""Ordering options for Tome connections"""
input TomeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tomes."""
  field: TomeOrderField!
}
"""Properties by which Tome connections can be ordered."""
enum TomeOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
}
"""
TomeWhereInput is used for filtering Tome objects.
Input was generated by ent.
"""
input TomeWhereInput {
  not: TomeWhereInput
  and: [TomeWhereInput!]
  or: [TomeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """createdAt field predicates"""
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """lastModifiedAt field predicates"""
  lastmodifiedat: Time
  lastmodifiedatNEQ: Time
  lastmodifiedatIn: [Time!]
  lastmodifiedatNotIn: [Time!]
  lastmodifiedatGT: Time
  lastmodifiedatGTE: Time
  lastmodifiedatLT: Time
  lastmodifiedatLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """parameters field predicates"""
  parameters: String
  parametersNEQ: String
  parametersIn: [String!]
  parametersNotIn: [String!]
  parametersGT: String
  parametersGTE: String
  parametersLT: String
  parametersLTE: String
  parametersContains: String
  parametersHasPrefix: String
  parametersHasSuffix: String
  parametersIsNil: Boolean
  parametersNotNil: Boolean
  parametersEqualFold: String
  parametersContainsFold: String
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashEqualFold: String
  hashContainsFold: String
  """eldritch field predicates"""
  eldritch: String
  eldritchNEQ: String
  eldritchIn: [String!]
  eldritchNotIn: [String!]
  eldritchGT: String
  eldritchGTE: String
  eldritchLT: String
  eldritchLTE: String
  eldritchContains: String
  eldritchHasPrefix: String
  eldritchHasSuffix: String
  eldritchEqualFold: String
  eldritchContainsFold: String
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """The name displayed for the user"""
  name: String
  """URL to the user's profile photo."""
  photourl: String
  """True if the user is active and able to authenticate"""
  isactivated: Boolean
  """True if the user is an Admin"""
  isadmin: Boolean
}
type User implements Node {
  id: ID!
  """The name displayed for the user"""
  name: String!
  """URL to the user's profile photo."""
  photourl: String! @goField(name: "PhotoURL", forceResolver: false)
  """True if the user is active and able to authenticate"""
  isactivated: Boolean! @goField(name: "IsActivated", forceResolver: false)
  """True if the user is an Admin"""
  isadmin: Boolean! @goField(name: "IsAdmin", forceResolver: false)
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """Name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """PhotoURL field predicates"""
  photourl: String
  photourlNEQ: String
  photourlIn: [String!]
  photourlNotIn: [String!]
  photourlGT: String
  photourlGTE: String
  photourlLT: String
  photourlLTE: String
  photourlContains: String
  photourlHasPrefix: String
  photourlHasSuffix: String
  photourlEqualFold: String
  photourlContainsFold: String
  """IsActivated field predicates"""
  isactivated: Boolean
  isactivatedNEQ: Boolean
  """IsAdmin field predicates"""
  isadmin: Boolean
  isadminNEQ: Boolean
}
