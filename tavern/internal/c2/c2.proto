syntax = "proto3";
// edition = "2023";

package c2;

option go_package = "github.com/kcarretto/tavern/internal/c2/c2pb";

import "google/protobuf/timestamp.proto";

/*
 * Messages
 */

// Agent information to identify the type of beacon.
message Agent {
    string identifier = 1;
}

// Beacon information that is unique to the current running beacon.
message Beacon {
    string identifier = 1;
    string principal = 2;
    Host host = 3;
    Agent agent = 4;
    uint64 interval = 5; // Duration until next callback, in seconds.
}

 // Host information for the system a beacon is running on.
message Host {
    string identifier = 1;
    string name = 2;

    enum Platform {
        PLATFORM_UNSPECIFIED = 0;
        PLATFORM_WINDOWS = 1;
        PLATFORM_LINUX = 2;
        PLATFORM_MACOS = 3;
        PLATFORM_BSD = 4;
    }

    Platform platform = 3;
    string primary_ip = 4;
}

// Process running on the host system.
message Process {
    uint64 pid = 1;
    uint64 ppid = 2;
    string name = 3;
    string principal = 4;

    string path = 5;
    string cmd = 6;
    string env = 7;
    string cwd = 8;

    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_UNKNOWN = 1;
        STATUS_IDLE = 2;
        STATUS_RUN = 3;
        STATUS_SLEEP = 4;
        STATUS_STOP = 5;
        STATUS_ZOMBIE = 6;
        STATUS_TRACING = 7;
        STATUS_DEAD = 8;
        STATUS_WAKE_KILL = 9;
        STATUS_WAKING = 10;
        STATUS_PARKED = 11;
        STATUS_LOCK_BLOCKED = 12;
        STATUS_UNINTERUPTIBLE_DISK_SLEEP = 13;
    }
    Status status = 9;
}


// Task instructions for the beacon to execute.
message Task {
    int64 id = 1;
    string eldritch = 2;
    map<string, string> parameters = 3;
    repeated string file_names = 4;
    string quest_name = 5;
}

// TaskError provides information when task execution fails.
message TaskError {
    string msg = 1;
}

// TaskOutput provides information about a running task.
message TaskOutput {
    int64 id = 1;
    string output = 2;
    TaskError error = 3;

    // Indicates the UTC timestamp task execution began, set only in the first message for reporting.
    google.protobuf.Timestamp exec_started_at = 4;

    // Indicates the UTC timestamp task execution completed, set only in last message for reporting.
    google.protobuf.Timestamp exec_finished_at = 5;
}


/*
 * RPC Messages
 */
message ClaimTasksRequest {
    Beacon beacon = 1;
}
message ClaimTasksResponse {
    repeated Task tasks = 1;
}

message DownloadFileRequest {
    string name = 1;
}
message DownloadFileResponse {
    bytes chunk = 1;
}

message ReportFileRequest {
    int64 task_id = 1;
    string path = 2;
    string owner = 3;
    string group = 4;
    string permissions = 5;
    int64 size = 6;
    string sha3_256_hash = 7;

    bytes chunk = 8;
}
message ReportFileResponse {}

message ReportProcessListRequest {
    repeated Process list = 1;
    int64 task_id = 2;
}
message ReportProcessListResponse {}

message ReportTaskOutputRequest {
    TaskOutput output = 1;
}

message ReportTaskOutputResponse {}

/*
 * Service
 */

service C2 {
    /*
     * Contact the server for new tasks to execute.
     */
    rpc ClaimTasks(ClaimTasksRequest) returns (ClaimTasksResponse) {}

    /*
     * Download a file from the server, returning one or more chunks of data.
     * The maximum size of these chunks is determined by the server.
     * The server should reply with two headers:
     *   - "sha3-256-checksum": A SHA3-256 digest of the entire file contents.
     *   - "file-size": The number of bytes contained by the file.
     *
     * If no associated file can be found, a NotFound status error is returned.
     */
     rpc DownloadFile(DownloadFileRequest) returns (stream DownloadFileResponse);

    /*
     * Report a file from the host to the server.
     * Providing content of the file is optional. If content is provided:
     *   - Hash will automatically be calculated and the provided hash will be ignored.
     *   - Size will automatically be calculated and the provided size will be ignored.
     * Content is provided as chunks, the size of which are up to the agent to define (based on memory constraints).
     * Any existing files at the provided path for the host are replaced.
     */
     rpc ReportFile(stream ReportFileRequest) returns (ReportFileResponse);

    /*
     * Report the active list of running processes. This list will replace any previously reported
     * lists for the same host.
     */
    rpc ReportProcessList(ReportProcessListRequest) returns (ReportProcessListResponse);

    /*
     * Report execution output for a task.
     */
    rpc ReportTaskOutput(ReportTaskOutputRequest) returns (ReportTaskOutputResponse) {}



}
