// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: c2.proto

package c2pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	C2_ClaimTasks_FullMethodName        = "/c2.C2/ClaimTasks"
	C2_FetchAsset_FullMethodName        = "/c2.C2/FetchAsset"
	C2_ReportCredential_FullMethodName  = "/c2.C2/ReportCredential"
	C2_ReportFile_FullMethodName        = "/c2.C2/ReportFile"
	C2_ReportProcessList_FullMethodName = "/c2.C2/ReportProcessList"
	C2_ReportTaskOutput_FullMethodName  = "/c2.C2/ReportTaskOutput"
	C2_ReverseShell_FullMethodName      = "/c2.C2/ReverseShell"
)

// C2Client is the client API for C2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type C2Client interface {
	// Contact the server for new tasks to execute.
	ClaimTasks(ctx context.Context, in *ClaimTasksRequest, opts ...grpc.CallOption) (*ClaimTasksResponse, error)
	// Fetch an asset from the server, returning one or more chunks of data.
	// The maximum size of these chunks is determined by the server.
	// The server should reply with two headers:
	//   - "sha3-256-checksum": A SHA3-256 digest of the entire file contents.
	//   - "file-size": The number of bytes contained by the file.
	//
	// If no associated file can be found, a NotFound status error is returned.
	FetchAsset(ctx context.Context, in *FetchAssetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchAssetResponse], error)
	// Report a credential from the host to the server.
	ReportCredential(ctx context.Context, in *ReportCredentialRequest, opts ...grpc.CallOption) (*ReportCredentialResponse, error)
	// Report a file from the host to the server.
	// Providing content of the file is optional. If content is provided:
	//   - Hash will automatically be calculated and the provided hash will be ignored.
	//   - Size will automatically be calculated and the provided size will be ignored.
	//
	// Content is provided as chunks, the size of which are up to the agent to define (based on memory constraints).
	// Any existing files at the provided path for the host are replaced.
	ReportFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ReportFileRequest, ReportFileResponse], error)
	// Report the active list of running processes. This list will replace any previously reported
	// lists for the same host.
	ReportProcessList(ctx context.Context, in *ReportProcessListRequest, opts ...grpc.CallOption) (*ReportProcessListResponse, error)
	// Report execution output for a task.
	ReportTaskOutput(ctx context.Context, in *ReportTaskOutputRequest, opts ...grpc.CallOption) (*ReportTaskOutputResponse, error)
	// Open a reverse shell bi-directional stream.
	ReverseShell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReverseShellRequest, ReverseShellResponse], error)
}

type c2Client struct {
	cc grpc.ClientConnInterface
}

func NewC2Client(cc grpc.ClientConnInterface) C2Client {
	return &c2Client{cc}
}

func (c *c2Client) ClaimTasks(ctx context.Context, in *ClaimTasksRequest, opts ...grpc.CallOption) (*ClaimTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimTasksResponse)
	err := c.cc.Invoke(ctx, C2_ClaimTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2Client) FetchAsset(ctx context.Context, in *FetchAssetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchAssetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &C2_ServiceDesc.Streams[0], C2_FetchAsset_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchAssetRequest, FetchAssetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type C2_FetchAssetClient = grpc.ServerStreamingClient[FetchAssetResponse]

func (c *c2Client) ReportCredential(ctx context.Context, in *ReportCredentialRequest, opts ...grpc.CallOption) (*ReportCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportCredentialResponse)
	err := c.cc.Invoke(ctx, C2_ReportCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2Client) ReportFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ReportFileRequest, ReportFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &C2_ServiceDesc.Streams[1], C2_ReportFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReportFileRequest, ReportFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type C2_ReportFileClient = grpc.ClientStreamingClient[ReportFileRequest, ReportFileResponse]

func (c *c2Client) ReportProcessList(ctx context.Context, in *ReportProcessListRequest, opts ...grpc.CallOption) (*ReportProcessListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportProcessListResponse)
	err := c.cc.Invoke(ctx, C2_ReportProcessList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2Client) ReportTaskOutput(ctx context.Context, in *ReportTaskOutputRequest, opts ...grpc.CallOption) (*ReportTaskOutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportTaskOutputResponse)
	err := c.cc.Invoke(ctx, C2_ReportTaskOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2Client) ReverseShell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReverseShellRequest, ReverseShellResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &C2_ServiceDesc.Streams[2], C2_ReverseShell_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReverseShellRequest, ReverseShellResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type C2_ReverseShellClient = grpc.BidiStreamingClient[ReverseShellRequest, ReverseShellResponse]

// C2Server is the server API for C2 service.
// All implementations must embed UnimplementedC2Server
// for forward compatibility.
type C2Server interface {
	// Contact the server for new tasks to execute.
	ClaimTasks(context.Context, *ClaimTasksRequest) (*ClaimTasksResponse, error)
	// Fetch an asset from the server, returning one or more chunks of data.
	// The maximum size of these chunks is determined by the server.
	// The server should reply with two headers:
	//   - "sha3-256-checksum": A SHA3-256 digest of the entire file contents.
	//   - "file-size": The number of bytes contained by the file.
	//
	// If no associated file can be found, a NotFound status error is returned.
	FetchAsset(*FetchAssetRequest, grpc.ServerStreamingServer[FetchAssetResponse]) error
	// Report a credential from the host to the server.
	ReportCredential(context.Context, *ReportCredentialRequest) (*ReportCredentialResponse, error)
	// Report a file from the host to the server.
	// Providing content of the file is optional. If content is provided:
	//   - Hash will automatically be calculated and the provided hash will be ignored.
	//   - Size will automatically be calculated and the provided size will be ignored.
	//
	// Content is provided as chunks, the size of which are up to the agent to define (based on memory constraints).
	// Any existing files at the provided path for the host are replaced.
	ReportFile(grpc.ClientStreamingServer[ReportFileRequest, ReportFileResponse]) error
	// Report the active list of running processes. This list will replace any previously reported
	// lists for the same host.
	ReportProcessList(context.Context, *ReportProcessListRequest) (*ReportProcessListResponse, error)
	// Report execution output for a task.
	ReportTaskOutput(context.Context, *ReportTaskOutputRequest) (*ReportTaskOutputResponse, error)
	// Open a reverse shell bi-directional stream.
	ReverseShell(grpc.BidiStreamingServer[ReverseShellRequest, ReverseShellResponse]) error
	mustEmbedUnimplementedC2Server()
}

// UnimplementedC2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedC2Server struct{}

func (UnimplementedC2Server) ClaimTasks(context.Context, *ClaimTasksRequest) (*ClaimTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTasks not implemented")
}
func (UnimplementedC2Server) FetchAsset(*FetchAssetRequest, grpc.ServerStreamingServer[FetchAssetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchAsset not implemented")
}
func (UnimplementedC2Server) ReportCredential(context.Context, *ReportCredentialRequest) (*ReportCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCredential not implemented")
}
func (UnimplementedC2Server) ReportFile(grpc.ClientStreamingServer[ReportFileRequest, ReportFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReportFile not implemented")
}
func (UnimplementedC2Server) ReportProcessList(context.Context, *ReportProcessListRequest) (*ReportProcessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProcessList not implemented")
}
func (UnimplementedC2Server) ReportTaskOutput(context.Context, *ReportTaskOutputRequest) (*ReportTaskOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskOutput not implemented")
}
func (UnimplementedC2Server) ReverseShell(grpc.BidiStreamingServer[ReverseShellRequest, ReverseShellResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReverseShell not implemented")
}
func (UnimplementedC2Server) mustEmbedUnimplementedC2Server() {}
func (UnimplementedC2Server) testEmbeddedByValue()            {}

// UnsafeC2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to C2Server will
// result in compilation errors.
type UnsafeC2Server interface {
	mustEmbedUnimplementedC2Server()
}

func RegisterC2Server(s grpc.ServiceRegistrar, srv C2Server) {
	// If the following call pancis, it indicates UnimplementedC2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&C2_ServiceDesc, srv)
}

func _C2_ClaimTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ClaimTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C2_ClaimTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ClaimTasks(ctx, req.(*ClaimTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C2_FetchAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchAssetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(C2Server).FetchAsset(m, &grpc.GenericServerStream[FetchAssetRequest, FetchAssetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type C2_FetchAssetServer = grpc.ServerStreamingServer[FetchAssetResponse]

func _C2_ReportCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ReportCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C2_ReportCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ReportCredential(ctx, req.(*ReportCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C2_ReportFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(C2Server).ReportFile(&grpc.GenericServerStream[ReportFileRequest, ReportFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type C2_ReportFileServer = grpc.ClientStreamingServer[ReportFileRequest, ReportFileResponse]

func _C2_ReportProcessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProcessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ReportProcessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C2_ReportProcessList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ReportProcessList(ctx, req.(*ReportProcessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C2_ReportTaskOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ReportTaskOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C2_ReportTaskOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ReportTaskOutput(ctx, req.(*ReportTaskOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C2_ReverseShell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(C2Server).ReverseShell(&grpc.GenericServerStream[ReverseShellRequest, ReverseShellResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type C2_ReverseShellServer = grpc.BidiStreamingServer[ReverseShellRequest, ReverseShellResponse]

// C2_ServiceDesc is the grpc.ServiceDesc for C2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var C2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c2.C2",
	HandlerType: (*C2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimTasks",
			Handler:    _C2_ClaimTasks_Handler,
		},
		{
			MethodName: "ReportCredential",
			Handler:    _C2_ReportCredential_Handler,
		},
		{
			MethodName: "ReportProcessList",
			Handler:    _C2_ReportProcessList_Handler,
		},
		{
			MethodName: "ReportTaskOutput",
			Handler:    _C2_ReportTaskOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchAsset",
			Handler:       _C2_FetchAsset_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportFile",
			Handler:       _C2_ReportFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReverseShell",
			Handler:       _C2_ReverseShell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "c2.proto",
}
