// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: c2.proto

package c2pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// C2Client is the client API for C2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type C2Client interface {
	// Contact the server for new tasks to execute.
	ClaimTasks(ctx context.Context, in *ClaimTasksRequest, opts ...grpc.CallOption) (*ClaimTasksResponse, error)
	// Download a file from the server, returning one or more chunks of data.
	// The maximum size of these chunks is determined by the server.
	// The server should reply with two headers:
	//   - "sha3-256-checksum": A SHA3-256 digest of the entire file contents.
	//   - "file-size": The number of bytes contained by the file.
	//
	// If no associated file can be found, a NotFound status error is returned.
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (C2_DownloadFileClient, error)
	// Report a credential from the host to the server.
	ReportCredential(ctx context.Context, in *ReportCredentialRequest, opts ...grpc.CallOption) (*ReportCredentialResponse, error)
	// Report a file from the host to the server.
	// Providing content of the file is optional. If content is provided:
	//   - Hash will automatically be calculated and the provided hash will be ignored.
	//   - Size will automatically be calculated and the provided size will be ignored.
	//
	// Content is provided as chunks, the size of which are up to the agent to define (based on memory constraints).
	// Any existing files at the provided path for the host are replaced.
	ReportFile(ctx context.Context, opts ...grpc.CallOption) (C2_ReportFileClient, error)
	// Report the active list of running processes. This list will replace any previously reported
	// lists for the same host.
	ReportProcessList(ctx context.Context, in *ReportProcessListRequest, opts ...grpc.CallOption) (*ReportProcessListResponse, error)
	// Report execution output for a task.
	ReportTaskOutput(ctx context.Context, in *ReportTaskOutputRequest, opts ...grpc.CallOption) (*ReportTaskOutputResponse, error)
}

type c2Client struct {
	cc grpc.ClientConnInterface
}

func NewC2Client(cc grpc.ClientConnInterface) C2Client {
	return &c2Client{cc}
}

func (c *c2Client) ClaimTasks(ctx context.Context, in *ClaimTasksRequest, opts ...grpc.CallOption) (*ClaimTasksResponse, error) {
	out := new(ClaimTasksResponse)
	err := c.cc.Invoke(ctx, "/c2.C2/ClaimTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2Client) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (C2_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &C2_ServiceDesc.Streams[0], "/c2.C2/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &c2DownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type C2_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type c2DownloadFileClient struct {
	grpc.ClientStream
}

func (x *c2DownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *c2Client) ReportCredential(ctx context.Context, in *ReportCredentialRequest, opts ...grpc.CallOption) (*ReportCredentialResponse, error) {
	out := new(ReportCredentialResponse)
	err := c.cc.Invoke(ctx, "/c2.C2/ReportCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2Client) ReportFile(ctx context.Context, opts ...grpc.CallOption) (C2_ReportFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &C2_ServiceDesc.Streams[1], "/c2.C2/ReportFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &c2ReportFileClient{stream}
	return x, nil
}

type C2_ReportFileClient interface {
	Send(*ReportFileRequest) error
	CloseAndRecv() (*ReportFileResponse, error)
	grpc.ClientStream
}

type c2ReportFileClient struct {
	grpc.ClientStream
}

func (x *c2ReportFileClient) Send(m *ReportFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *c2ReportFileClient) CloseAndRecv() (*ReportFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *c2Client) ReportProcessList(ctx context.Context, in *ReportProcessListRequest, opts ...grpc.CallOption) (*ReportProcessListResponse, error) {
	out := new(ReportProcessListResponse)
	err := c.cc.Invoke(ctx, "/c2.C2/ReportProcessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2Client) ReportTaskOutput(ctx context.Context, in *ReportTaskOutputRequest, opts ...grpc.CallOption) (*ReportTaskOutputResponse, error) {
	out := new(ReportTaskOutputResponse)
	err := c.cc.Invoke(ctx, "/c2.C2/ReportTaskOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// C2Server is the server API for C2 service.
// All implementations must embed UnimplementedC2Server
// for forward compatibility
type C2Server interface {
	// Contact the server for new tasks to execute.
	ClaimTasks(context.Context, *ClaimTasksRequest) (*ClaimTasksResponse, error)
	// Download a file from the server, returning one or more chunks of data.
	// The maximum size of these chunks is determined by the server.
	// The server should reply with two headers:
	//   - "sha3-256-checksum": A SHA3-256 digest of the entire file contents.
	//   - "file-size": The number of bytes contained by the file.
	//
	// If no associated file can be found, a NotFound status error is returned.
	DownloadFile(*DownloadFileRequest, C2_DownloadFileServer) error
	// Report a credential from the host to the server.
	ReportCredential(context.Context, *ReportCredentialRequest) (*ReportCredentialResponse, error)
	// Report a file from the host to the server.
	// Providing content of the file is optional. If content is provided:
	//   - Hash will automatically be calculated and the provided hash will be ignored.
	//   - Size will automatically be calculated and the provided size will be ignored.
	//
	// Content is provided as chunks, the size of which are up to the agent to define (based on memory constraints).
	// Any existing files at the provided path for the host are replaced.
	ReportFile(C2_ReportFileServer) error
	// Report the active list of running processes. This list will replace any previously reported
	// lists for the same host.
	ReportProcessList(context.Context, *ReportProcessListRequest) (*ReportProcessListResponse, error)
	// Report execution output for a task.
	ReportTaskOutput(context.Context, *ReportTaskOutputRequest) (*ReportTaskOutputResponse, error)
	mustEmbedUnimplementedC2Server()
}

// UnimplementedC2Server must be embedded to have forward compatible implementations.
type UnimplementedC2Server struct {
}

func (UnimplementedC2Server) ClaimTasks(context.Context, *ClaimTasksRequest) (*ClaimTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTasks not implemented")
}
func (UnimplementedC2Server) DownloadFile(*DownloadFileRequest, C2_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedC2Server) ReportCredential(context.Context, *ReportCredentialRequest) (*ReportCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCredential not implemented")
}
func (UnimplementedC2Server) ReportFile(C2_ReportFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportFile not implemented")
}
func (UnimplementedC2Server) ReportProcessList(context.Context, *ReportProcessListRequest) (*ReportProcessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProcessList not implemented")
}
func (UnimplementedC2Server) ReportTaskOutput(context.Context, *ReportTaskOutputRequest) (*ReportTaskOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskOutput not implemented")
}
func (UnimplementedC2Server) mustEmbedUnimplementedC2Server() {}

// UnsafeC2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to C2Server will
// result in compilation errors.
type UnsafeC2Server interface {
	mustEmbedUnimplementedC2Server()
}

func RegisterC2Server(s grpc.ServiceRegistrar, srv C2Server) {
	s.RegisterService(&C2_ServiceDesc, srv)
}

func _C2_ClaimTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ClaimTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c2.C2/ClaimTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ClaimTasks(ctx, req.(*ClaimTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C2_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(C2Server).DownloadFile(m, &c2DownloadFileServer{stream})
}

type C2_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type c2DownloadFileServer struct {
	grpc.ServerStream
}

func (x *c2DownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _C2_ReportCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ReportCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c2.C2/ReportCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ReportCredential(ctx, req.(*ReportCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C2_ReportFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(C2Server).ReportFile(&c2ReportFileServer{stream})
}

type C2_ReportFileServer interface {
	SendAndClose(*ReportFileResponse) error
	Recv() (*ReportFileRequest, error)
	grpc.ServerStream
}

type c2ReportFileServer struct {
	grpc.ServerStream
}

func (x *c2ReportFileServer) SendAndClose(m *ReportFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *c2ReportFileServer) Recv() (*ReportFileRequest, error) {
	m := new(ReportFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _C2_ReportProcessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProcessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ReportProcessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c2.C2/ReportProcessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ReportProcessList(ctx, req.(*ReportProcessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C2_ReportTaskOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ReportTaskOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c2.C2/ReportTaskOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ReportTaskOutput(ctx, req.(*ReportTaskOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// C2_ServiceDesc is the grpc.ServiceDesc for C2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var C2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c2.C2",
	HandlerType: (*C2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimTasks",
			Handler:    _C2_ClaimTasks_Handler,
		},
		{
			MethodName: "ReportCredential",
			Handler:    _C2_ReportCredential_Handler,
		},
		{
			MethodName: "ReportProcessList",
			Handler:    _C2_ReportProcessList_Handler,
		},
		{
			MethodName: "ReportTaskOutput",
			Handler:    _C2_ReportTaskOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _C2_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportFile",
			Handler:       _C2_ReportFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "c2.proto",
}
