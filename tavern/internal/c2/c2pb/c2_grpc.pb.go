// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: c2.proto

package c2pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// C2Client is the client API for C2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type C2Client interface {
	ClaimTasks(ctx context.Context, in *ClaimTasksRequest, opts ...grpc.CallOption) (*ClaimTasksResponse, error)
	ReportTaskOutput(ctx context.Context, in *ReportTaskOutputRequest, opts ...grpc.CallOption) (*ReportTaskOutputResponse, error)
}

type c2Client struct {
	cc grpc.ClientConnInterface
}

func NewC2Client(cc grpc.ClientConnInterface) C2Client {
	return &c2Client{cc}
}

func (c *c2Client) ClaimTasks(ctx context.Context, in *ClaimTasksRequest, opts ...grpc.CallOption) (*ClaimTasksResponse, error) {
	out := new(ClaimTasksResponse)
	err := c.cc.Invoke(ctx, "/c2.C2/ClaimTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c2Client) ReportTaskOutput(ctx context.Context, in *ReportTaskOutputRequest, opts ...grpc.CallOption) (*ReportTaskOutputResponse, error) {
	out := new(ReportTaskOutputResponse)
	err := c.cc.Invoke(ctx, "/c2.C2/ReportTaskOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// C2Server is the server API for C2 service.
// All implementations must embed UnimplementedC2Server
// for forward compatibility
type C2Server interface {
	ClaimTasks(context.Context, *ClaimTasksRequest) (*ClaimTasksResponse, error)
	ReportTaskOutput(context.Context, *ReportTaskOutputRequest) (*ReportTaskOutputResponse, error)
	mustEmbedUnimplementedC2Server()
}

// UnimplementedC2Server must be embedded to have forward compatible implementations.
type UnimplementedC2Server struct {
}

func (UnimplementedC2Server) ClaimTasks(context.Context, *ClaimTasksRequest) (*ClaimTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTasks not implemented")
}
func (UnimplementedC2Server) ReportTaskOutput(context.Context, *ReportTaskOutputRequest) (*ReportTaskOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskOutput not implemented")
}
func (UnimplementedC2Server) mustEmbedUnimplementedC2Server() {}

// UnsafeC2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to C2Server will
// result in compilation errors.
type UnsafeC2Server interface {
	mustEmbedUnimplementedC2Server()
}

func RegisterC2Server(s grpc.ServiceRegistrar, srv C2Server) {
	s.RegisterService(&C2_ServiceDesc, srv)
}

func _C2_ClaimTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ClaimTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c2.C2/ClaimTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ClaimTasks(ctx, req.(*ClaimTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C2_ReportTaskOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C2Server).ReportTaskOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c2.C2/ReportTaskOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C2Server).ReportTaskOutput(ctx, req.(*ReportTaskOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// C2_ServiceDesc is the grpc.ServiceDesc for C2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var C2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c2.C2",
	HandlerType: (*C2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimTasks",
			Handler:    _C2_ClaimTasks_Handler,
		},
		{
			MethodName: "ReportTaskOutput",
			Handler:    _C2_ReportTaskOutput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c2.proto",
}
