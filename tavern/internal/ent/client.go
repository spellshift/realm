// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"realm.pub/tavern/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"realm.pub/tavern/internal/ent/beacon"
	"realm.pub/tavern/internal/ent/file"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/hostcredential"
	"realm.pub/tavern/internal/ent/hostfile"
	"realm.pub/tavern/internal/ent/hostprocess"
	"realm.pub/tavern/internal/ent/quest"
	"realm.pub/tavern/internal/ent/tag"
	"realm.pub/tavern/internal/ent/task"
	"realm.pub/tavern/internal/ent/tome"
	"realm.pub/tavern/internal/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Beacon is the client for interacting with the Beacon builders.
	Beacon *BeaconClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// Host is the client for interacting with the Host builders.
	Host *HostClient
	// HostCredential is the client for interacting with the HostCredential builders.
	HostCredential *HostCredentialClient
	// HostFile is the client for interacting with the HostFile builders.
	HostFile *HostFileClient
	// HostProcess is the client for interacting with the HostProcess builders.
	HostProcess *HostProcessClient
	// Quest is the client for interacting with the Quest builders.
	Quest *QuestClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// Tome is the client for interacting with the Tome builders.
	Tome *TomeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Beacon = NewBeaconClient(c.config)
	c.File = NewFileClient(c.config)
	c.Host = NewHostClient(c.config)
	c.HostCredential = NewHostCredentialClient(c.config)
	c.HostFile = NewHostFileClient(c.config)
	c.HostProcess = NewHostProcessClient(c.config)
	c.Quest = NewQuestClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.Tome = NewTomeClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Beacon:         NewBeaconClient(cfg),
		File:           NewFileClient(cfg),
		Host:           NewHostClient(cfg),
		HostCredential: NewHostCredentialClient(cfg),
		HostFile:       NewHostFileClient(cfg),
		HostProcess:    NewHostProcessClient(cfg),
		Quest:          NewQuestClient(cfg),
		Tag:            NewTagClient(cfg),
		Task:           NewTaskClient(cfg),
		Tome:           NewTomeClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Beacon:         NewBeaconClient(cfg),
		File:           NewFileClient(cfg),
		Host:           NewHostClient(cfg),
		HostCredential: NewHostCredentialClient(cfg),
		HostFile:       NewHostFileClient(cfg),
		HostProcess:    NewHostProcessClient(cfg),
		Quest:          NewQuestClient(cfg),
		Tag:            NewTagClient(cfg),
		Task:           NewTaskClient(cfg),
		Tome:           NewTomeClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Beacon.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Beacon, c.File, c.Host, c.HostCredential, c.HostFile, c.HostProcess, c.Quest,
		c.Tag, c.Task, c.Tome, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Beacon, c.File, c.Host, c.HostCredential, c.HostFile, c.HostProcess, c.Quest,
		c.Tag, c.Task, c.Tome, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BeaconMutation:
		return c.Beacon.mutate(ctx, m)
	case *FileMutation:
		return c.File.mutate(ctx, m)
	case *HostMutation:
		return c.Host.mutate(ctx, m)
	case *HostCredentialMutation:
		return c.HostCredential.mutate(ctx, m)
	case *HostFileMutation:
		return c.HostFile.mutate(ctx, m)
	case *HostProcessMutation:
		return c.HostProcess.mutate(ctx, m)
	case *QuestMutation:
		return c.Quest.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TomeMutation:
		return c.Tome.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BeaconClient is a client for the Beacon schema.
type BeaconClient struct {
	config
}

// NewBeaconClient returns a client for the Beacon from the given config.
func NewBeaconClient(c config) *BeaconClient {
	return &BeaconClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `beacon.Hooks(f(g(h())))`.
func (c *BeaconClient) Use(hooks ...Hook) {
	c.hooks.Beacon = append(c.hooks.Beacon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `beacon.Intercept(f(g(h())))`.
func (c *BeaconClient) Intercept(interceptors ...Interceptor) {
	c.inters.Beacon = append(c.inters.Beacon, interceptors...)
}

// Create returns a builder for creating a Beacon entity.
func (c *BeaconClient) Create() *BeaconCreate {
	mutation := newBeaconMutation(c.config, OpCreate)
	return &BeaconCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Beacon entities.
func (c *BeaconClient) CreateBulk(builders ...*BeaconCreate) *BeaconCreateBulk {
	return &BeaconCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BeaconClient) MapCreateBulk(slice any, setFunc func(*BeaconCreate, int)) *BeaconCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BeaconCreateBulk{err: fmt.Errorf("calling to BeaconClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BeaconCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BeaconCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Beacon.
func (c *BeaconClient) Update() *BeaconUpdate {
	mutation := newBeaconMutation(c.config, OpUpdate)
	return &BeaconUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BeaconClient) UpdateOne(b *Beacon) *BeaconUpdateOne {
	mutation := newBeaconMutation(c.config, OpUpdateOne, withBeacon(b))
	return &BeaconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BeaconClient) UpdateOneID(id int) *BeaconUpdateOne {
	mutation := newBeaconMutation(c.config, OpUpdateOne, withBeaconID(id))
	return &BeaconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Beacon.
func (c *BeaconClient) Delete() *BeaconDelete {
	mutation := newBeaconMutation(c.config, OpDelete)
	return &BeaconDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BeaconClient) DeleteOne(b *Beacon) *BeaconDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BeaconClient) DeleteOneID(id int) *BeaconDeleteOne {
	builder := c.Delete().Where(beacon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BeaconDeleteOne{builder}
}

// Query returns a query builder for Beacon.
func (c *BeaconClient) Query() *BeaconQuery {
	return &BeaconQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBeacon},
		inters: c.Interceptors(),
	}
}

// Get returns a Beacon entity by its id.
func (c *BeaconClient) Get(ctx context.Context, id int) (*Beacon, error) {
	return c.Query().Where(beacon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BeaconClient) GetX(ctx context.Context, id int) *Beacon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a Beacon.
func (c *BeaconClient) QueryHost(b *Beacon) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(beacon.Table, beacon.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, beacon.HostTable, beacon.HostColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a Beacon.
func (c *BeaconClient) QueryTasks(b *Beacon) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(beacon.Table, beacon.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, beacon.TasksTable, beacon.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BeaconClient) Hooks() []Hook {
	return c.hooks.Beacon
}

// Interceptors returns the client interceptors.
func (c *BeaconClient) Interceptors() []Interceptor {
	return c.inters.Beacon
}

func (c *BeaconClient) mutate(ctx context.Context, m *BeaconMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BeaconCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BeaconUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BeaconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BeaconDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Beacon mutation op: %q", m.Op())
	}
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `file.Intercept(f(g(h())))`.
func (c *FileClient) Intercept(interceptors ...Interceptor) {
	c.inters.File = append(c.inters.File, interceptors...)
}

// Create returns a builder for creating a File entity.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FileClient) MapCreateBulk(slice any, setFunc func(*FileCreate, int)) *FileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FileCreateBulk{err: fmt.Errorf("calling to FileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id int) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FileClient) DeleteOneID(id int) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFile},
		inters: c.Interceptors(),
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id int) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id int) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTomes queries the tomes edge of a File.
func (c *FileClient) QueryTomes(f *File) *TomeQuery {
	query := (&TomeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(tome.Table, tome.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, file.TomesTable, file.TomesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	hooks := c.hooks.File
	return append(hooks[:len(hooks):len(hooks)], file.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *FileClient) Interceptors() []Interceptor {
	return c.inters.File
}

func (c *FileClient) mutate(ctx context.Context, m *FileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown File mutation op: %q", m.Op())
	}
}

// HostClient is a client for the Host schema.
type HostClient struct {
	config
}

// NewHostClient returns a client for the Host from the given config.
func NewHostClient(c config) *HostClient {
	return &HostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `host.Hooks(f(g(h())))`.
func (c *HostClient) Use(hooks ...Hook) {
	c.hooks.Host = append(c.hooks.Host, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `host.Intercept(f(g(h())))`.
func (c *HostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Host = append(c.inters.Host, interceptors...)
}

// Create returns a builder for creating a Host entity.
func (c *HostClient) Create() *HostCreate {
	mutation := newHostMutation(c.config, OpCreate)
	return &HostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Host entities.
func (c *HostClient) CreateBulk(builders ...*HostCreate) *HostCreateBulk {
	return &HostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostClient) MapCreateBulk(slice any, setFunc func(*HostCreate, int)) *HostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostCreateBulk{err: fmt.Errorf("calling to HostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Host.
func (c *HostClient) Update() *HostUpdate {
	mutation := newHostMutation(c.config, OpUpdate)
	return &HostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostClient) UpdateOne(h *Host) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHost(h))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostClient) UpdateOneID(id int) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHostID(id))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Host.
func (c *HostClient) Delete() *HostDelete {
	mutation := newHostMutation(c.config, OpDelete)
	return &HostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostClient) DeleteOne(h *Host) *HostDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostClient) DeleteOneID(id int) *HostDeleteOne {
	builder := c.Delete().Where(host.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostDeleteOne{builder}
}

// Query returns a query builder for Host.
func (c *HostClient) Query() *HostQuery {
	return &HostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHost},
		inters: c.Interceptors(),
	}
}

// Get returns a Host entity by its id.
func (c *HostClient) Get(ctx context.Context, id int) (*Host, error) {
	return c.Query().Where(host.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostClient) GetX(ctx context.Context, id int) *Host {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTags queries the tags edge of a Host.
func (c *HostClient) QueryTags(h *Host) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, host.TagsTable, host.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBeacons queries the beacons edge of a Host.
func (c *HostClient) QueryBeacons(h *Host) *BeaconQuery {
	query := (&BeaconClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(beacon.Table, beacon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, host.BeaconsTable, host.BeaconsColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFiles queries the files edge of a Host.
func (c *HostClient) QueryFiles(h *Host) *HostFileQuery {
	query := (&HostFileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(hostfile.Table, hostfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, host.FilesTable, host.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProcesses queries the processes edge of a Host.
func (c *HostClient) QueryProcesses(h *Host) *HostProcessQuery {
	query := (&HostProcessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(hostprocess.Table, hostprocess.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, host.ProcessesTable, host.ProcessesColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCredentials queries the credentials edge of a Host.
func (c *HostClient) QueryCredentials(h *Host) *HostCredentialQuery {
	query := (&HostCredentialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(hostcredential.Table, hostcredential.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, host.CredentialsTable, host.CredentialsColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostClient) Hooks() []Hook {
	return c.hooks.Host
}

// Interceptors returns the client interceptors.
func (c *HostClient) Interceptors() []Interceptor {
	return c.inters.Host
}

func (c *HostClient) mutate(ctx context.Context, m *HostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Host mutation op: %q", m.Op())
	}
}

// HostCredentialClient is a client for the HostCredential schema.
type HostCredentialClient struct {
	config
}

// NewHostCredentialClient returns a client for the HostCredential from the given config.
func NewHostCredentialClient(c config) *HostCredentialClient {
	return &HostCredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostcredential.Hooks(f(g(h())))`.
func (c *HostCredentialClient) Use(hooks ...Hook) {
	c.hooks.HostCredential = append(c.hooks.HostCredential, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostcredential.Intercept(f(g(h())))`.
func (c *HostCredentialClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostCredential = append(c.inters.HostCredential, interceptors...)
}

// Create returns a builder for creating a HostCredential entity.
func (c *HostCredentialClient) Create() *HostCredentialCreate {
	mutation := newHostCredentialMutation(c.config, OpCreate)
	return &HostCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostCredential entities.
func (c *HostCredentialClient) CreateBulk(builders ...*HostCredentialCreate) *HostCredentialCreateBulk {
	return &HostCredentialCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostCredentialClient) MapCreateBulk(slice any, setFunc func(*HostCredentialCreate, int)) *HostCredentialCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostCredentialCreateBulk{err: fmt.Errorf("calling to HostCredentialClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostCredentialCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostCredentialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostCredential.
func (c *HostCredentialClient) Update() *HostCredentialUpdate {
	mutation := newHostCredentialMutation(c.config, OpUpdate)
	return &HostCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostCredentialClient) UpdateOne(hc *HostCredential) *HostCredentialUpdateOne {
	mutation := newHostCredentialMutation(c.config, OpUpdateOne, withHostCredential(hc))
	return &HostCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostCredentialClient) UpdateOneID(id int) *HostCredentialUpdateOne {
	mutation := newHostCredentialMutation(c.config, OpUpdateOne, withHostCredentialID(id))
	return &HostCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostCredential.
func (c *HostCredentialClient) Delete() *HostCredentialDelete {
	mutation := newHostCredentialMutation(c.config, OpDelete)
	return &HostCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostCredentialClient) DeleteOne(hc *HostCredential) *HostCredentialDeleteOne {
	return c.DeleteOneID(hc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostCredentialClient) DeleteOneID(id int) *HostCredentialDeleteOne {
	builder := c.Delete().Where(hostcredential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostCredentialDeleteOne{builder}
}

// Query returns a query builder for HostCredential.
func (c *HostCredentialClient) Query() *HostCredentialQuery {
	return &HostCredentialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostCredential},
		inters: c.Interceptors(),
	}
}

// Get returns a HostCredential entity by its id.
func (c *HostCredentialClient) Get(ctx context.Context, id int) (*HostCredential, error) {
	return c.Query().Where(hostcredential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostCredentialClient) GetX(ctx context.Context, id int) *HostCredential {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HostCredential.
func (c *HostCredentialClient) QueryHost(hc *HostCredential) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostcredential.Table, hostcredential.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostcredential.HostTable, hostcredential.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a HostCredential.
func (c *HostCredentialClient) QueryTask(hc *HostCredential) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostcredential.Table, hostcredential.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostcredential.TaskTable, hostcredential.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(hc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostCredentialClient) Hooks() []Hook {
	return c.hooks.HostCredential
}

// Interceptors returns the client interceptors.
func (c *HostCredentialClient) Interceptors() []Interceptor {
	return c.inters.HostCredential
}

func (c *HostCredentialClient) mutate(ctx context.Context, m *HostCredentialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostCredential mutation op: %q", m.Op())
	}
}

// HostFileClient is a client for the HostFile schema.
type HostFileClient struct {
	config
}

// NewHostFileClient returns a client for the HostFile from the given config.
func NewHostFileClient(c config) *HostFileClient {
	return &HostFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostfile.Hooks(f(g(h())))`.
func (c *HostFileClient) Use(hooks ...Hook) {
	c.hooks.HostFile = append(c.hooks.HostFile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostfile.Intercept(f(g(h())))`.
func (c *HostFileClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostFile = append(c.inters.HostFile, interceptors...)
}

// Create returns a builder for creating a HostFile entity.
func (c *HostFileClient) Create() *HostFileCreate {
	mutation := newHostFileMutation(c.config, OpCreate)
	return &HostFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostFile entities.
func (c *HostFileClient) CreateBulk(builders ...*HostFileCreate) *HostFileCreateBulk {
	return &HostFileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostFileClient) MapCreateBulk(slice any, setFunc func(*HostFileCreate, int)) *HostFileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostFileCreateBulk{err: fmt.Errorf("calling to HostFileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostFileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostFile.
func (c *HostFileClient) Update() *HostFileUpdate {
	mutation := newHostFileMutation(c.config, OpUpdate)
	return &HostFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostFileClient) UpdateOne(hf *HostFile) *HostFileUpdateOne {
	mutation := newHostFileMutation(c.config, OpUpdateOne, withHostFile(hf))
	return &HostFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostFileClient) UpdateOneID(id int) *HostFileUpdateOne {
	mutation := newHostFileMutation(c.config, OpUpdateOne, withHostFileID(id))
	return &HostFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostFile.
func (c *HostFileClient) Delete() *HostFileDelete {
	mutation := newHostFileMutation(c.config, OpDelete)
	return &HostFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostFileClient) DeleteOne(hf *HostFile) *HostFileDeleteOne {
	return c.DeleteOneID(hf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostFileClient) DeleteOneID(id int) *HostFileDeleteOne {
	builder := c.Delete().Where(hostfile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostFileDeleteOne{builder}
}

// Query returns a query builder for HostFile.
func (c *HostFileClient) Query() *HostFileQuery {
	return &HostFileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostFile},
		inters: c.Interceptors(),
	}
}

// Get returns a HostFile entity by its id.
func (c *HostFileClient) Get(ctx context.Context, id int) (*HostFile, error) {
	return c.Query().Where(hostfile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostFileClient) GetX(ctx context.Context, id int) *HostFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HostFile.
func (c *HostFileClient) QueryHost(hf *HostFile) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostfile.Table, hostfile.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostfile.HostTable, hostfile.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a HostFile.
func (c *HostFileClient) QueryTask(hf *HostFile) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostfile.Table, hostfile.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostfile.TaskTable, hostfile.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(hf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostFileClient) Hooks() []Hook {
	hooks := c.hooks.HostFile
	return append(hooks[:len(hooks):len(hooks)], hostfile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HostFileClient) Interceptors() []Interceptor {
	return c.inters.HostFile
}

func (c *HostFileClient) mutate(ctx context.Context, m *HostFileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostFileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostFileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostFileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostFile mutation op: %q", m.Op())
	}
}

// HostProcessClient is a client for the HostProcess schema.
type HostProcessClient struct {
	config
}

// NewHostProcessClient returns a client for the HostProcess from the given config.
func NewHostProcessClient(c config) *HostProcessClient {
	return &HostProcessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostprocess.Hooks(f(g(h())))`.
func (c *HostProcessClient) Use(hooks ...Hook) {
	c.hooks.HostProcess = append(c.hooks.HostProcess, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostprocess.Intercept(f(g(h())))`.
func (c *HostProcessClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostProcess = append(c.inters.HostProcess, interceptors...)
}

// Create returns a builder for creating a HostProcess entity.
func (c *HostProcessClient) Create() *HostProcessCreate {
	mutation := newHostProcessMutation(c.config, OpCreate)
	return &HostProcessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostProcess entities.
func (c *HostProcessClient) CreateBulk(builders ...*HostProcessCreate) *HostProcessCreateBulk {
	return &HostProcessCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostProcessClient) MapCreateBulk(slice any, setFunc func(*HostProcessCreate, int)) *HostProcessCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostProcessCreateBulk{err: fmt.Errorf("calling to HostProcessClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostProcessCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostProcessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostProcess.
func (c *HostProcessClient) Update() *HostProcessUpdate {
	mutation := newHostProcessMutation(c.config, OpUpdate)
	return &HostProcessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostProcessClient) UpdateOne(hp *HostProcess) *HostProcessUpdateOne {
	mutation := newHostProcessMutation(c.config, OpUpdateOne, withHostProcess(hp))
	return &HostProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostProcessClient) UpdateOneID(id int) *HostProcessUpdateOne {
	mutation := newHostProcessMutation(c.config, OpUpdateOne, withHostProcessID(id))
	return &HostProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostProcess.
func (c *HostProcessClient) Delete() *HostProcessDelete {
	mutation := newHostProcessMutation(c.config, OpDelete)
	return &HostProcessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostProcessClient) DeleteOne(hp *HostProcess) *HostProcessDeleteOne {
	return c.DeleteOneID(hp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostProcessClient) DeleteOneID(id int) *HostProcessDeleteOne {
	builder := c.Delete().Where(hostprocess.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostProcessDeleteOne{builder}
}

// Query returns a query builder for HostProcess.
func (c *HostProcessClient) Query() *HostProcessQuery {
	return &HostProcessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostProcess},
		inters: c.Interceptors(),
	}
}

// Get returns a HostProcess entity by its id.
func (c *HostProcessClient) Get(ctx context.Context, id int) (*HostProcess, error) {
	return c.Query().Where(hostprocess.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostProcessClient) GetX(ctx context.Context, id int) *HostProcess {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HostProcess.
func (c *HostProcessClient) QueryHost(hp *HostProcess) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostprocess.Table, hostprocess.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostprocess.HostTable, hostprocess.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a HostProcess.
func (c *HostProcessClient) QueryTask(hp *HostProcess) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostprocess.Table, hostprocess.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostprocess.TaskTable, hostprocess.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(hp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostProcessClient) Hooks() []Hook {
	return c.hooks.HostProcess
}

// Interceptors returns the client interceptors.
func (c *HostProcessClient) Interceptors() []Interceptor {
	return c.inters.HostProcess
}

func (c *HostProcessClient) mutate(ctx context.Context, m *HostProcessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostProcessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostProcessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostProcessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostProcess mutation op: %q", m.Op())
	}
}

// QuestClient is a client for the Quest schema.
type QuestClient struct {
	config
}

// NewQuestClient returns a client for the Quest from the given config.
func NewQuestClient(c config) *QuestClient {
	return &QuestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quest.Hooks(f(g(h())))`.
func (c *QuestClient) Use(hooks ...Hook) {
	c.hooks.Quest = append(c.hooks.Quest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `quest.Intercept(f(g(h())))`.
func (c *QuestClient) Intercept(interceptors ...Interceptor) {
	c.inters.Quest = append(c.inters.Quest, interceptors...)
}

// Create returns a builder for creating a Quest entity.
func (c *QuestClient) Create() *QuestCreate {
	mutation := newQuestMutation(c.config, OpCreate)
	return &QuestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Quest entities.
func (c *QuestClient) CreateBulk(builders ...*QuestCreate) *QuestCreateBulk {
	return &QuestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestClient) MapCreateBulk(slice any, setFunc func(*QuestCreate, int)) *QuestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestCreateBulk{err: fmt.Errorf("calling to QuestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Quest.
func (c *QuestClient) Update() *QuestUpdate {
	mutation := newQuestMutation(c.config, OpUpdate)
	return &QuestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestClient) UpdateOne(q *Quest) *QuestUpdateOne {
	mutation := newQuestMutation(c.config, OpUpdateOne, withQuest(q))
	return &QuestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestClient) UpdateOneID(id int) *QuestUpdateOne {
	mutation := newQuestMutation(c.config, OpUpdateOne, withQuestID(id))
	return &QuestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Quest.
func (c *QuestClient) Delete() *QuestDelete {
	mutation := newQuestMutation(c.config, OpDelete)
	return &QuestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestClient) DeleteOne(q *Quest) *QuestDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestClient) DeleteOneID(id int) *QuestDeleteOne {
	builder := c.Delete().Where(quest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestDeleteOne{builder}
}

// Query returns a query builder for Quest.
func (c *QuestClient) Query() *QuestQuery {
	return &QuestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuest},
		inters: c.Interceptors(),
	}
}

// Get returns a Quest entity by its id.
func (c *QuestClient) Get(ctx context.Context, id int) (*Quest, error) {
	return c.Query().Where(quest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestClient) GetX(ctx context.Context, id int) *Quest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTome queries the tome edge of a Quest.
func (c *QuestClient) QueryTome(q *Quest) *TomeQuery {
	query := (&TomeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quest.Table, quest.FieldID, id),
			sqlgraph.To(tome.Table, tome.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, quest.TomeTable, quest.TomeColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBundle queries the bundle edge of a Quest.
func (c *QuestClient) QueryBundle(q *Quest) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quest.Table, quest.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, quest.BundleTable, quest.BundleColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a Quest.
func (c *QuestClient) QueryTasks(q *Quest) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quest.Table, quest.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, quest.TasksTable, quest.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Quest.
func (c *QuestClient) QueryCreator(q *Quest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quest.Table, quest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, quest.CreatorTable, quest.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestClient) Hooks() []Hook {
	return c.hooks.Quest
}

// Interceptors returns the client interceptors.
func (c *QuestClient) Interceptors() []Interceptor {
	return c.inters.Quest
}

func (c *QuestClient) mutate(ctx context.Context, m *QuestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Quest mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHosts queries the hosts edge of a Tag.
func (c *TagClient) QueryHosts(t *Tag) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.HostsTable, tag.HostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	return c.inters.Tag
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tag mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id int) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuest queries the quest edge of a Task.
func (c *TaskClient) QueryQuest(t *Task) *QuestQuery {
	query := (&QuestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(quest.Table, quest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.QuestTable, task.QuestColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBeacon queries the beacon edge of a Task.
func (c *TaskClient) QueryBeacon(t *Task) *BeaconQuery {
	query := (&BeaconClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(beacon.Table, beacon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, task.BeaconTable, task.BeaconColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReportedFiles queries the reported_files edge of a Task.
func (c *TaskClient) QueryReportedFiles(t *Task) *HostFileQuery {
	query := (&HostFileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(hostfile.Table, hostfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ReportedFilesTable, task.ReportedFilesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReportedProcesses queries the reported_processes edge of a Task.
func (c *TaskClient) QueryReportedProcesses(t *Task) *HostProcessQuery {
	query := (&HostProcessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(hostprocess.Table, hostprocess.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ReportedProcessesTable, task.ReportedProcessesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReportedCredentials queries the reported_credentials edge of a Task.
func (c *TaskClient) QueryReportedCredentials(t *Task) *HostCredentialQuery {
	query := (&HostCredentialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(hostcredential.Table, hostcredential.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ReportedCredentialsTable, task.ReportedCredentialsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	hooks := c.hooks.Task
	return append(hooks[:len(hooks):len(hooks)], task.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TomeClient is a client for the Tome schema.
type TomeClient struct {
	config
}

// NewTomeClient returns a client for the Tome from the given config.
func NewTomeClient(c config) *TomeClient {
	return &TomeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tome.Hooks(f(g(h())))`.
func (c *TomeClient) Use(hooks ...Hook) {
	c.hooks.Tome = append(c.hooks.Tome, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tome.Intercept(f(g(h())))`.
func (c *TomeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tome = append(c.inters.Tome, interceptors...)
}

// Create returns a builder for creating a Tome entity.
func (c *TomeClient) Create() *TomeCreate {
	mutation := newTomeMutation(c.config, OpCreate)
	return &TomeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tome entities.
func (c *TomeClient) CreateBulk(builders ...*TomeCreate) *TomeCreateBulk {
	return &TomeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TomeClient) MapCreateBulk(slice any, setFunc func(*TomeCreate, int)) *TomeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TomeCreateBulk{err: fmt.Errorf("calling to TomeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TomeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TomeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tome.
func (c *TomeClient) Update() *TomeUpdate {
	mutation := newTomeMutation(c.config, OpUpdate)
	return &TomeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TomeClient) UpdateOne(t *Tome) *TomeUpdateOne {
	mutation := newTomeMutation(c.config, OpUpdateOne, withTome(t))
	return &TomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TomeClient) UpdateOneID(id int) *TomeUpdateOne {
	mutation := newTomeMutation(c.config, OpUpdateOne, withTomeID(id))
	return &TomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tome.
func (c *TomeClient) Delete() *TomeDelete {
	mutation := newTomeMutation(c.config, OpDelete)
	return &TomeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TomeClient) DeleteOne(t *Tome) *TomeDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TomeClient) DeleteOneID(id int) *TomeDeleteOne {
	builder := c.Delete().Where(tome.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TomeDeleteOne{builder}
}

// Query returns a query builder for Tome.
func (c *TomeClient) Query() *TomeQuery {
	return &TomeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTome},
		inters: c.Interceptors(),
	}
}

// Get returns a Tome entity by its id.
func (c *TomeClient) Get(ctx context.Context, id int) (*Tome, error) {
	return c.Query().Where(tome.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TomeClient) GetX(ctx context.Context, id int) *Tome {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFiles queries the files edge of a Tome.
func (c *TomeClient) QueryFiles(t *Tome) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tome.Table, tome.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tome.FilesTable, tome.FilesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUploader queries the uploader edge of a Tome.
func (c *TomeClient) QueryUploader(t *Tome) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tome.Table, tome.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tome.UploaderTable, tome.UploaderColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TomeClient) Hooks() []Hook {
	hooks := c.hooks.Tome
	return append(hooks[:len(hooks):len(hooks)], tome.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TomeClient) Interceptors() []Interceptor {
	return c.inters.Tome
}

func (c *TomeClient) mutate(ctx context.Context, m *TomeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TomeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TomeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TomeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tome mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTomes queries the tomes edge of a User.
func (c *UserClient) QueryTomes(u *User) *TomeQuery {
	query := (&TomeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tome.Table, tome.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.TomesTable, user.TomesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Beacon, File, Host, HostCredential, HostFile, HostProcess, Quest, Tag, Task,
		Tome, User []ent.Hook
	}
	inters struct {
		Beacon, File, Host, HostCredential, HostFile, HostProcess, Quest, Tag, Task,
		Tome, User []ent.Interceptor
	}
)
