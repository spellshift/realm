// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (b *Beacon) Host(ctx context.Context) (*Host, error) {
	result, err := b.Edges.HostOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryHost().Only(ctx)
	}
	return result, err
}

func (b *Beacon) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryTasks().All(ctx)
	}
	return result, err
}

func (f *File) Tomes(ctx context.Context) (result []*Tome, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedTomes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.TomesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryTomes().All(ctx)
	}
	return result, err
}

func (h *Host) Tags(ctx context.Context) (result []*Tag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.TagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryTags().All(ctx)
	}
	return result, err
}

func (h *Host) Beacons(ctx context.Context) (result []*Beacon, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedBeacons(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.BeaconsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryBeacons().All(ctx)
	}
	return result, err
}

func (h *Host) Files(ctx context.Context) (result []*HostFile, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryFiles().All(ctx)
	}
	return result, err
}

func (h *Host) Processes(ctx context.Context) (result []*HostProcess, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedProcesses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.ProcessesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryProcesses().All(ctx)
	}
	return result, err
}

func (h *Host) Credentials(ctx context.Context) (result []*HostCredential, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedCredentials(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.CredentialsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryCredentials().All(ctx)
	}
	return result, err
}

func (hc *HostCredential) Host(ctx context.Context) (*Host, error) {
	result, err := hc.Edges.HostOrErr()
	if IsNotLoaded(err) {
		result, err = hc.QueryHost().Only(ctx)
	}
	return result, err
}

func (hc *HostCredential) Task(ctx context.Context) (*Task, error) {
	result, err := hc.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = hc.QueryTask().Only(ctx)
	}
	return result, err
}

func (hf *HostFile) Host(ctx context.Context) (*Host, error) {
	result, err := hf.Edges.HostOrErr()
	if IsNotLoaded(err) {
		result, err = hf.QueryHost().Only(ctx)
	}
	return result, err
}

func (hf *HostFile) Task(ctx context.Context) (*Task, error) {
	result, err := hf.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = hf.QueryTask().Only(ctx)
	}
	return result, err
}

func (hp *HostProcess) Host(ctx context.Context) (*Host, error) {
	result, err := hp.Edges.HostOrErr()
	if IsNotLoaded(err) {
		result, err = hp.QueryHost().Only(ctx)
	}
	return result, err
}

func (hp *HostProcess) Task(ctx context.Context) (*Task, error) {
	result, err := hp.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = hp.QueryTask().Only(ctx)
	}
	return result, err
}

func (q *Quest) Tome(ctx context.Context) (*Tome, error) {
	result, err := q.Edges.TomeOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryTome().Only(ctx)
	}
	return result, err
}

func (q *Quest) Bundle(ctx context.Context) (*File, error) {
	result, err := q.Edges.BundleOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryBundle().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (q *Quest) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = q.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = q.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = q.QueryTasks().All(ctx)
	}
	return result, err
}

func (q *Quest) Creator(ctx context.Context) (*User, error) {
	result, err := q.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Repository) Tomes(ctx context.Context) (result []*Tome, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedTomes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.TomesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryTomes().All(ctx)
	}
	return result, err
}

func (r *Repository) Owner(ctx context.Context) (*User, error) {
	result, err := r.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tag) Hosts(ctx context.Context) (result []*Host, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedHosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.HostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryHosts().All(ctx)
	}
	return result, err
}

func (t *Task) Quest(ctx context.Context) (*Quest, error) {
	result, err := t.Edges.QuestOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryQuest().Only(ctx)
	}
	return result, err
}

func (t *Task) Beacon(ctx context.Context) (*Beacon, error) {
	result, err := t.Edges.BeaconOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryBeacon().Only(ctx)
	}
	return result, err
}

func (t *Task) ReportedFiles(ctx context.Context) (result []*HostFile, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedReportedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ReportedFilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryReportedFiles().All(ctx)
	}
	return result, err
}

func (t *Task) ReportedProcesses(ctx context.Context) (result []*HostProcess, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedReportedProcesses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ReportedProcessesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryReportedProcesses().All(ctx)
	}
	return result, err
}

func (t *Task) ReportedCredentials(ctx context.Context) (result []*HostCredential, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedReportedCredentials(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ReportedCredentialsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryReportedCredentials().All(ctx)
	}
	return result, err
}

func (t *Tome) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryFiles().All(ctx)
	}
	return result, err
}

func (t *Tome) Uploader(ctx context.Context) (*User, error) {
	result, err := t.Edges.UploaderOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryUploader().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tome) Repository(ctx context.Context) (*Repository, error) {
	result, err := t.Edges.RepositoryOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryRepository().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Tomes(ctx context.Context) (result []*Tome, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTomes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TomesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTomes().All(ctx)
	}
	return result, err
}
