// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/kcarretto/realm/tavern/internal/ent/tag"
)

// UpdateBeaconInput represents a mutation input for updating beacons.
type UpdateBeaconInput struct {
	Name          *string
	ClearHostname bool
	Hostname      *string
	ClearTags     bool
	AddTagIDs     []int
	RemoveTagIDs  []int
}

// Mutate applies the UpdateBeaconInput on the BeaconMutation builder.
func (i *UpdateBeaconInput) Mutate(m *BeaconMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearHostname {
		m.ClearHostname()
	}
	if v := i.Hostname; v != nil {
		m.SetHostname(*v)
	}
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.AddTagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.RemoveTagIDs; len(v) > 0 {
		m.RemoveTagIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateBeaconInput on the BeaconUpdate builder.
func (c *BeaconUpdate) SetInput(i UpdateBeaconInput) *BeaconUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBeaconInput on the BeaconUpdateOne builder.
func (c *BeaconUpdateOne) SetInput(i UpdateBeaconInput) *BeaconUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateQuestInput represents a mutation input for creating quests.
type CreateQuestInput struct {
	Name       string
	Parameters *string
	TomeID     int
}

// Mutate applies the CreateQuestInput on the QuestMutation builder.
func (i *CreateQuestInput) Mutate(m *QuestMutation) {
	m.SetName(i.Name)
	if v := i.Parameters; v != nil {
		m.SetParameters(*v)
	}
	m.SetTomeID(i.TomeID)
}

// SetInput applies the change-set in the CreateQuestInput on the QuestCreate builder.
func (c *QuestCreate) SetInput(i CreateQuestInput) *QuestCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateTagInput represents a mutation input for creating tags.
type CreateTagInput struct {
	Name      string
	Kind      tag.Kind
	BeaconIDs []int
}

// Mutate applies the CreateTagInput on the TagMutation builder.
func (i *CreateTagInput) Mutate(m *TagMutation) {
	m.SetName(i.Name)
	m.SetKind(i.Kind)
	if v := i.BeaconIDs; len(v) > 0 {
		m.AddBeaconIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTagInput on the TagCreate builder.
func (c *TagCreate) SetInput(i CreateTagInput) *TagCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTagInput represents a mutation input for updating tags.
type UpdateTagInput struct {
	Name            *string
	Kind            *tag.Kind
	ClearBeacons    bool
	AddBeaconIDs    []int
	RemoveBeaconIDs []int
}

// Mutate applies the UpdateTagInput on the TagMutation builder.
func (i *UpdateTagInput) Mutate(m *TagMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Kind; v != nil {
		m.SetKind(*v)
	}
	if i.ClearBeacons {
		m.ClearBeacons()
	}
	if v := i.AddBeaconIDs; len(v) > 0 {
		m.AddBeaconIDs(v...)
	}
	if v := i.RemoveBeaconIDs; len(v) > 0 {
		m.RemoveBeaconIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTagInput on the TagUpdate builder.
func (c *TagUpdate) SetInput(i UpdateTagInput) *TagUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTagInput on the TagUpdateOne builder.
func (c *TagUpdateOne) SetInput(i UpdateTagInput) *TagUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTomeInput represents a mutation input for creating tomes.
type CreateTomeInput struct {
	Name        string
	Description string
	ParamDefs   *string
	Eldritch    string
	FileIDs     []int
}

// Mutate applies the CreateTomeInput on the TomeMutation builder.
func (i *CreateTomeInput) Mutate(m *TomeMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.ParamDefs; v != nil {
		m.SetParamDefs(*v)
	}
	m.SetEldritch(i.Eldritch)
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTomeInput on the TomeCreate builder.
func (c *TomeCreate) SetInput(i CreateTomeInput) *TomeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name        *string
	PhotoURL    *string
	IsActivated *bool
	IsAdmin     *bool
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PhotoURL; v != nil {
		m.SetPhotoURL(*v)
	}
	if v := i.IsActivated; v != nil {
		m.SetIsActivated(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
