// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"realm.pub/tavern/internal/ent/beacon"
	"realm.pub/tavern/internal/ent/file"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/process"
	"realm.pub/tavern/internal/ent/quest"
	"realm.pub/tavern/internal/ent/tag"
	"realm.pub/tavern/internal/ent/task"
	"realm.pub/tavern/internal/ent/tome"
	"realm.pub/tavern/internal/ent/user"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// BeaconEdge is the edge representation of Beacon.
type BeaconEdge struct {
	Node   *Beacon `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// BeaconConnection is the connection containing edges to Beacon.
type BeaconConnection struct {
	Edges      []*BeaconEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *BeaconConnection) build(nodes []*Beacon, pager *beaconPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Beacon
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Beacon {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Beacon {
			return nodes[i]
		}
	}
	c.Edges = make([]*BeaconEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BeaconEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BeaconPaginateOption enables pagination customization.
type BeaconPaginateOption func(*beaconPager) error

// WithBeaconOrder configures pagination ordering.
func WithBeaconOrder(order *BeaconOrder) BeaconPaginateOption {
	if order == nil {
		order = DefaultBeaconOrder
	}
	o := *order
	return func(pager *beaconPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBeaconOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBeaconFilter configures pagination filter.
func WithBeaconFilter(filter func(*BeaconQuery) (*BeaconQuery, error)) BeaconPaginateOption {
	return func(pager *beaconPager) error {
		if filter == nil {
			return errors.New("BeaconQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type beaconPager struct {
	reverse bool
	order   *BeaconOrder
	filter  func(*BeaconQuery) (*BeaconQuery, error)
}

func newBeaconPager(opts []BeaconPaginateOption, reverse bool) (*beaconPager, error) {
	pager := &beaconPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBeaconOrder
	}
	return pager, nil
}

func (p *beaconPager) applyFilter(query *BeaconQuery) (*BeaconQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *beaconPager) toCursor(b *Beacon) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *beaconPager) applyCursors(query *BeaconQuery, after, before *Cursor) (*BeaconQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBeaconOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *beaconPager) applyOrder(query *BeaconQuery) *BeaconQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBeaconOrder.Field {
		query = query.Order(DefaultBeaconOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *beaconPager) orderExpr(query *BeaconQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBeaconOrder.Field {
			b.Comma().Ident(DefaultBeaconOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Beacon.
func (b *BeaconQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BeaconPaginateOption,
) (*BeaconConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBeaconPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BeaconConnection{Edges: []*BeaconEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = b.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// BeaconOrderFieldCreatedAt orders Beacon by created_at.
	BeaconOrderFieldCreatedAt = &BeaconOrderField{
		Value: func(b *Beacon) (ent.Value, error) {
			return b.CreatedAt, nil
		},
		column: beacon.FieldCreatedAt,
		toTerm: beacon.ByCreatedAt,
		toCursor: func(b *Beacon) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.CreatedAt,
			}
		},
	}
	// BeaconOrderFieldLastModifiedAt orders Beacon by last_modified_at.
	BeaconOrderFieldLastModifiedAt = &BeaconOrderField{
		Value: func(b *Beacon) (ent.Value, error) {
			return b.LastModifiedAt, nil
		},
		column: beacon.FieldLastModifiedAt,
		toTerm: beacon.ByLastModifiedAt,
		toCursor: func(b *Beacon) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.LastModifiedAt,
			}
		},
	}
	// BeaconOrderFieldLastSeenAt orders Beacon by last_seen_at.
	BeaconOrderFieldLastSeenAt = &BeaconOrderField{
		Value: func(b *Beacon) (ent.Value, error) {
			return b.LastSeenAt, nil
		},
		column: beacon.FieldLastSeenAt,
		toTerm: beacon.ByLastSeenAt,
		toCursor: func(b *Beacon) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.LastSeenAt,
			}
		},
	}
	// BeaconOrderFieldInterval orders Beacon by interval.
	BeaconOrderFieldInterval = &BeaconOrderField{
		Value: func(b *Beacon) (ent.Value, error) {
			return b.Interval, nil
		},
		column: beacon.FieldInterval,
		toTerm: beacon.ByInterval,
		toCursor: func(b *Beacon) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.Interval,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f BeaconOrderField) String() string {
	var str string
	switch f.column {
	case BeaconOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case BeaconOrderFieldLastModifiedAt.column:
		str = "LAST_MODIFIED_AT"
	case BeaconOrderFieldLastSeenAt.column:
		str = "LAST_SEEN_AT"
	case BeaconOrderFieldInterval.column:
		str = "INTERVAL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f BeaconOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *BeaconOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("BeaconOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *BeaconOrderFieldCreatedAt
	case "LAST_MODIFIED_AT":
		*f = *BeaconOrderFieldLastModifiedAt
	case "LAST_SEEN_AT":
		*f = *BeaconOrderFieldLastSeenAt
	case "INTERVAL":
		*f = *BeaconOrderFieldInterval
	default:
		return fmt.Errorf("%s is not a valid BeaconOrderField", str)
	}
	return nil
}

// BeaconOrderField defines the ordering field of Beacon.
type BeaconOrderField struct {
	// Value extracts the ordering value from the given Beacon.
	Value    func(*Beacon) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) beacon.OrderOption
	toCursor func(*Beacon) Cursor
}

// BeaconOrder defines the ordering of Beacon.
type BeaconOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *BeaconOrderField `json:"field"`
}

// DefaultBeaconOrder is the default ordering of Beacon.
var DefaultBeaconOrder = &BeaconOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BeaconOrderField{
		Value: func(b *Beacon) (ent.Value, error) {
			return b.ID, nil
		},
		column: beacon.FieldID,
		toTerm: beacon.ByID,
		toCursor: func(b *Beacon) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Beacon into BeaconEdge.
func (b *Beacon) ToEdge(order *BeaconOrder) *BeaconEdge {
	if order == nil {
		order = DefaultBeaconOrder
	}
	return &BeaconEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// FileEdge is the edge representation of File.
type FileEdge struct {
	Node   *File  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// FileConnection is the connection containing edges to File.
type FileConnection struct {
	Edges      []*FileEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *FileConnection) build(nodes []*File, pager *filePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *File
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *File {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *File {
			return nodes[i]
		}
	}
	c.Edges = make([]*FileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FilePaginateOption enables pagination customization.
type FilePaginateOption func(*filePager) error

// WithFileOrder configures pagination ordering.
func WithFileOrder(order *FileOrder) FilePaginateOption {
	if order == nil {
		order = DefaultFileOrder
	}
	o := *order
	return func(pager *filePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFileFilter configures pagination filter.
func WithFileFilter(filter func(*FileQuery) (*FileQuery, error)) FilePaginateOption {
	return func(pager *filePager) error {
		if filter == nil {
			return errors.New("FileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type filePager struct {
	reverse bool
	order   *FileOrder
	filter  func(*FileQuery) (*FileQuery, error)
}

func newFilePager(opts []FilePaginateOption, reverse bool) (*filePager, error) {
	pager := &filePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFileOrder
	}
	return pager, nil
}

func (p *filePager) applyFilter(query *FileQuery) (*FileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *filePager) toCursor(f *File) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *filePager) applyCursors(query *FileQuery, after, before *Cursor) (*FileQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFileOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *filePager) applyOrder(query *FileQuery) *FileQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFileOrder.Field {
		query = query.Order(DefaultFileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *filePager) orderExpr(query *FileQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFileOrder.Field {
			b.Comma().Ident(DefaultFileOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to File.
func (f *FileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FilePaginateOption,
) (*FileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FileConnection{Edges: []*FileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = f.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if f, err = pager.applyCursors(f, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	f = pager.applyOrder(f)
	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FileOrderFieldCreatedAt orders File by created_at.
	FileOrderFieldCreatedAt = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.CreatedAt, nil
		},
		column: file.FieldCreatedAt,
		toTerm: file.ByCreatedAt,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.CreatedAt,
			}
		},
	}
	// FileOrderFieldLastModifiedAt orders File by last_modified_at.
	FileOrderFieldLastModifiedAt = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.LastModifiedAt, nil
		},
		column: file.FieldLastModifiedAt,
		toTerm: file.ByLastModifiedAt,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.LastModifiedAt,
			}
		},
	}
	// FileOrderFieldName orders File by name.
	FileOrderFieldName = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.Name, nil
		},
		column: file.FieldName,
		toTerm: file.ByName,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Name,
			}
		},
	}
	// FileOrderFieldSize orders File by size.
	FileOrderFieldSize = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.Size, nil
		},
		column: file.FieldSize,
		toTerm: file.BySize,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Size,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FileOrderField) String() string {
	var str string
	switch f.column {
	case FileOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case FileOrderFieldLastModifiedAt.column:
		str = "LAST_MODIFIED_AT"
	case FileOrderFieldName.column:
		str = "NAME"
	case FileOrderFieldSize.column:
		str = "SIZE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FileOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *FileOrderFieldCreatedAt
	case "LAST_MODIFIED_AT":
		*f = *FileOrderFieldLastModifiedAt
	case "NAME":
		*f = *FileOrderFieldName
	case "SIZE":
		*f = *FileOrderFieldSize
	default:
		return fmt.Errorf("%s is not a valid FileOrderField", str)
	}
	return nil
}

// FileOrderField defines the ordering field of File.
type FileOrderField struct {
	// Value extracts the ordering value from the given File.
	Value    func(*File) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) file.OrderOption
	toCursor func(*File) Cursor
}

// FileOrder defines the ordering of File.
type FileOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *FileOrderField `json:"field"`
}

// DefaultFileOrder is the default ordering of File.
var DefaultFileOrder = &FileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.ID, nil
		},
		column: file.FieldID,
		toTerm: file.ByID,
		toCursor: func(f *File) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts File into FileEdge.
func (f *File) ToEdge(order *FileOrder) *FileEdge {
	if order == nil {
		order = DefaultFileOrder
	}
	return &FileEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// HostEdge is the edge representation of Host.
type HostEdge struct {
	Node   *Host  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// HostConnection is the connection containing edges to Host.
type HostConnection struct {
	Edges      []*HostEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *HostConnection) build(nodes []*Host, pager *hostPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Host
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Host {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Host {
			return nodes[i]
		}
	}
	c.Edges = make([]*HostEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &HostEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// HostPaginateOption enables pagination customization.
type HostPaginateOption func(*hostPager) error

// WithHostOrder configures pagination ordering.
func WithHostOrder(order *HostOrder) HostPaginateOption {
	if order == nil {
		order = DefaultHostOrder
	}
	o := *order
	return func(pager *hostPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHostOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHostFilter configures pagination filter.
func WithHostFilter(filter func(*HostQuery) (*HostQuery, error)) HostPaginateOption {
	return func(pager *hostPager) error {
		if filter == nil {
			return errors.New("HostQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hostPager struct {
	reverse bool
	order   *HostOrder
	filter  func(*HostQuery) (*HostQuery, error)
}

func newHostPager(opts []HostPaginateOption, reverse bool) (*hostPager, error) {
	pager := &hostPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHostOrder
	}
	return pager, nil
}

func (p *hostPager) applyFilter(query *HostQuery) (*HostQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hostPager) toCursor(h *Host) Cursor {
	return p.order.Field.toCursor(h)
}

func (p *hostPager) applyCursors(query *HostQuery, after, before *Cursor) (*HostQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultHostOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *hostPager) applyOrder(query *HostQuery) *HostQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultHostOrder.Field {
		query = query.Order(DefaultHostOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *hostPager) orderExpr(query *HostQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultHostOrder.Field {
			b.Comma().Ident(DefaultHostOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Host.
func (h *HostQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HostPaginateOption,
) (*HostConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHostPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if h, err = pager.applyFilter(h); err != nil {
		return nil, err
	}
	conn := &HostConnection{Edges: []*HostEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = h.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if h, err = pager.applyCursors(h, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		h.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := h.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	h = pager.applyOrder(h)
	nodes, err := h.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// HostOrderFieldCreatedAt orders Host by created_at.
	HostOrderFieldCreatedAt = &HostOrderField{
		Value: func(h *Host) (ent.Value, error) {
			return h.CreatedAt, nil
		},
		column: host.FieldCreatedAt,
		toTerm: host.ByCreatedAt,
		toCursor: func(h *Host) Cursor {
			return Cursor{
				ID:    h.ID,
				Value: h.CreatedAt,
			}
		},
	}
	// HostOrderFieldLastModifiedAt orders Host by last_modified_at.
	HostOrderFieldLastModifiedAt = &HostOrderField{
		Value: func(h *Host) (ent.Value, error) {
			return h.LastModifiedAt, nil
		},
		column: host.FieldLastModifiedAt,
		toTerm: host.ByLastModifiedAt,
		toCursor: func(h *Host) Cursor {
			return Cursor{
				ID:    h.ID,
				Value: h.LastModifiedAt,
			}
		},
	}
	// HostOrderFieldLastSeenAt orders Host by last_seen_at.
	HostOrderFieldLastSeenAt = &HostOrderField{
		Value: func(h *Host) (ent.Value, error) {
			return h.LastSeenAt, nil
		},
		column: host.FieldLastSeenAt,
		toTerm: host.ByLastSeenAt,
		toCursor: func(h *Host) Cursor {
			return Cursor{
				ID:    h.ID,
				Value: h.LastSeenAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f HostOrderField) String() string {
	var str string
	switch f.column {
	case HostOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case HostOrderFieldLastModifiedAt.column:
		str = "LAST_MODIFIED_AT"
	case HostOrderFieldLastSeenAt.column:
		str = "LAST_SEEN_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f HostOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *HostOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("HostOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *HostOrderFieldCreatedAt
	case "LAST_MODIFIED_AT":
		*f = *HostOrderFieldLastModifiedAt
	case "LAST_SEEN_AT":
		*f = *HostOrderFieldLastSeenAt
	default:
		return fmt.Errorf("%s is not a valid HostOrderField", str)
	}
	return nil
}

// HostOrderField defines the ordering field of Host.
type HostOrderField struct {
	// Value extracts the ordering value from the given Host.
	Value    func(*Host) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) host.OrderOption
	toCursor func(*Host) Cursor
}

// HostOrder defines the ordering of Host.
type HostOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *HostOrderField `json:"field"`
}

// DefaultHostOrder is the default ordering of Host.
var DefaultHostOrder = &HostOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &HostOrderField{
		Value: func(h *Host) (ent.Value, error) {
			return h.ID, nil
		},
		column: host.FieldID,
		toTerm: host.ByID,
		toCursor: func(h *Host) Cursor {
			return Cursor{ID: h.ID}
		},
	},
}

// ToEdge converts Host into HostEdge.
func (h *Host) ToEdge(order *HostOrder) *HostEdge {
	if order == nil {
		order = DefaultHostOrder
	}
	return &HostEdge{
		Node:   h,
		Cursor: order.Field.toCursor(h),
	}
}

// ProcessEdge is the edge representation of Process.
type ProcessEdge struct {
	Node   *Process `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ProcessConnection is the connection containing edges to Process.
type ProcessConnection struct {
	Edges      []*ProcessEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ProcessConnection) build(nodes []*Process, pager *processPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Process
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Process {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Process {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProcessEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProcessEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProcessPaginateOption enables pagination customization.
type ProcessPaginateOption func(*processPager) error

// WithProcessOrder configures pagination ordering.
func WithProcessOrder(order *ProcessOrder) ProcessPaginateOption {
	if order == nil {
		order = DefaultProcessOrder
	}
	o := *order
	return func(pager *processPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProcessOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProcessFilter configures pagination filter.
func WithProcessFilter(filter func(*ProcessQuery) (*ProcessQuery, error)) ProcessPaginateOption {
	return func(pager *processPager) error {
		if filter == nil {
			return errors.New("ProcessQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type processPager struct {
	reverse bool
	order   *ProcessOrder
	filter  func(*ProcessQuery) (*ProcessQuery, error)
}

func newProcessPager(opts []ProcessPaginateOption, reverse bool) (*processPager, error) {
	pager := &processPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProcessOrder
	}
	return pager, nil
}

func (p *processPager) applyFilter(query *ProcessQuery) (*ProcessQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *processPager) toCursor(pr *Process) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *processPager) applyCursors(query *ProcessQuery, after, before *Cursor) (*ProcessQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultProcessOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *processPager) applyOrder(query *ProcessQuery) *ProcessQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultProcessOrder.Field {
		query = query.Order(DefaultProcessOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *processPager) orderExpr(query *ProcessQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultProcessOrder.Field {
			b.Comma().Ident(DefaultProcessOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Process.
func (pr *ProcessQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProcessPaginateOption,
) (*ProcessConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProcessPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ProcessConnection{Edges: []*ProcessEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ProcessOrderFieldCreatedAt orders Process by created_at.
	ProcessOrderFieldCreatedAt = &ProcessOrderField{
		Value: func(pr *Process) (ent.Value, error) {
			return pr.CreatedAt, nil
		},
		column: process.FieldCreatedAt,
		toTerm: process.ByCreatedAt,
		toCursor: func(pr *Process) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.CreatedAt,
			}
		},
	}
	// ProcessOrderFieldLastModifiedAt orders Process by last_modified_at.
	ProcessOrderFieldLastModifiedAt = &ProcessOrderField{
		Value: func(pr *Process) (ent.Value, error) {
			return pr.LastModifiedAt, nil
		},
		column: process.FieldLastModifiedAt,
		toTerm: process.ByLastModifiedAt,
		toCursor: func(pr *Process) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.LastModifiedAt,
			}
		},
	}
	// ProcessOrderFieldPid orders Process by pid.
	ProcessOrderFieldPid = &ProcessOrderField{
		Value: func(pr *Process) (ent.Value, error) {
			return pr.Pid, nil
		},
		column: process.FieldPid,
		toTerm: process.ByPid,
		toCursor: func(pr *Process) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.Pid,
			}
		},
	}
	// ProcessOrderFieldName orders Process by name.
	ProcessOrderFieldName = &ProcessOrderField{
		Value: func(pr *Process) (ent.Value, error) {
			return pr.Name, nil
		},
		column: process.FieldName,
		toTerm: process.ByName,
		toCursor: func(pr *Process) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ProcessOrderField) String() string {
	var str string
	switch f.column {
	case ProcessOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ProcessOrderFieldLastModifiedAt.column:
		str = "LAST_MODIFIED_AT"
	case ProcessOrderFieldPid.column:
		str = "PROCESS_ID"
	case ProcessOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ProcessOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ProcessOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ProcessOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ProcessOrderFieldCreatedAt
	case "LAST_MODIFIED_AT":
		*f = *ProcessOrderFieldLastModifiedAt
	case "PROCESS_ID":
		*f = *ProcessOrderFieldPid
	case "NAME":
		*f = *ProcessOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid ProcessOrderField", str)
	}
	return nil
}

// ProcessOrderField defines the ordering field of Process.
type ProcessOrderField struct {
	// Value extracts the ordering value from the given Process.
	Value    func(*Process) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) process.OrderOption
	toCursor func(*Process) Cursor
}

// ProcessOrder defines the ordering of Process.
type ProcessOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ProcessOrderField `json:"field"`
}

// DefaultProcessOrder is the default ordering of Process.
var DefaultProcessOrder = &ProcessOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ProcessOrderField{
		Value: func(pr *Process) (ent.Value, error) {
			return pr.ID, nil
		},
		column: process.FieldID,
		toTerm: process.ByID,
		toCursor: func(pr *Process) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Process into ProcessEdge.
func (pr *Process) ToEdge(order *ProcessOrder) *ProcessEdge {
	if order == nil {
		order = DefaultProcessOrder
	}
	return &ProcessEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// QuestEdge is the edge representation of Quest.
type QuestEdge struct {
	Node   *Quest `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// QuestConnection is the connection containing edges to Quest.
type QuestConnection struct {
	Edges      []*QuestEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *QuestConnection) build(nodes []*Quest, pager *questPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Quest
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Quest {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Quest {
			return nodes[i]
		}
	}
	c.Edges = make([]*QuestEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &QuestEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// QuestPaginateOption enables pagination customization.
type QuestPaginateOption func(*questPager) error

// WithQuestOrder configures pagination ordering.
func WithQuestOrder(order *QuestOrder) QuestPaginateOption {
	if order == nil {
		order = DefaultQuestOrder
	}
	o := *order
	return func(pager *questPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultQuestOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithQuestFilter configures pagination filter.
func WithQuestFilter(filter func(*QuestQuery) (*QuestQuery, error)) QuestPaginateOption {
	return func(pager *questPager) error {
		if filter == nil {
			return errors.New("QuestQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type questPager struct {
	reverse bool
	order   *QuestOrder
	filter  func(*QuestQuery) (*QuestQuery, error)
}

func newQuestPager(opts []QuestPaginateOption, reverse bool) (*questPager, error) {
	pager := &questPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultQuestOrder
	}
	return pager, nil
}

func (p *questPager) applyFilter(query *QuestQuery) (*QuestQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *questPager) toCursor(q *Quest) Cursor {
	return p.order.Field.toCursor(q)
}

func (p *questPager) applyCursors(query *QuestQuery, after, before *Cursor) (*QuestQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultQuestOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *questPager) applyOrder(query *QuestQuery) *QuestQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultQuestOrder.Field {
		query = query.Order(DefaultQuestOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *questPager) orderExpr(query *QuestQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultQuestOrder.Field {
			b.Comma().Ident(DefaultQuestOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Quest.
func (q *QuestQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...QuestPaginateOption,
) (*QuestConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newQuestPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if q, err = pager.applyFilter(q); err != nil {
		return nil, err
	}
	conn := &QuestConnection{Edges: []*QuestEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = q.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if q, err = pager.applyCursors(q, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		q.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := q.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	q = pager.applyOrder(q)
	nodes, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// QuestOrderFieldCreatedAt orders Quest by created_at.
	QuestOrderFieldCreatedAt = &QuestOrderField{
		Value: func(q *Quest) (ent.Value, error) {
			return q.CreatedAt, nil
		},
		column: quest.FieldCreatedAt,
		toTerm: quest.ByCreatedAt,
		toCursor: func(q *Quest) Cursor {
			return Cursor{
				ID:    q.ID,
				Value: q.CreatedAt,
			}
		},
	}
	// QuestOrderFieldLastModifiedAt orders Quest by last_modified_at.
	QuestOrderFieldLastModifiedAt = &QuestOrderField{
		Value: func(q *Quest) (ent.Value, error) {
			return q.LastModifiedAt, nil
		},
		column: quest.FieldLastModifiedAt,
		toTerm: quest.ByLastModifiedAt,
		toCursor: func(q *Quest) Cursor {
			return Cursor{
				ID:    q.ID,
				Value: q.LastModifiedAt,
			}
		},
	}
	// QuestOrderFieldName orders Quest by name.
	QuestOrderFieldName = &QuestOrderField{
		Value: func(q *Quest) (ent.Value, error) {
			return q.Name, nil
		},
		column: quest.FieldName,
		toTerm: quest.ByName,
		toCursor: func(q *Quest) Cursor {
			return Cursor{
				ID:    q.ID,
				Value: q.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f QuestOrderField) String() string {
	var str string
	switch f.column {
	case QuestOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case QuestOrderFieldLastModifiedAt.column:
		str = "LAST_MODIFIED_AT"
	case QuestOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f QuestOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *QuestOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("QuestOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *QuestOrderFieldCreatedAt
	case "LAST_MODIFIED_AT":
		*f = *QuestOrderFieldLastModifiedAt
	case "NAME":
		*f = *QuestOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid QuestOrderField", str)
	}
	return nil
}

// QuestOrderField defines the ordering field of Quest.
type QuestOrderField struct {
	// Value extracts the ordering value from the given Quest.
	Value    func(*Quest) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) quest.OrderOption
	toCursor func(*Quest) Cursor
}

// QuestOrder defines the ordering of Quest.
type QuestOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *QuestOrderField `json:"field"`
}

// DefaultQuestOrder is the default ordering of Quest.
var DefaultQuestOrder = &QuestOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &QuestOrderField{
		Value: func(q *Quest) (ent.Value, error) {
			return q.ID, nil
		},
		column: quest.FieldID,
		toTerm: quest.ByID,
		toCursor: func(q *Quest) Cursor {
			return Cursor{ID: q.ID}
		},
	},
}

// ToEdge converts Quest into QuestEdge.
func (q *Quest) ToEdge(order *QuestOrder) *QuestEdge {
	if order == nil {
		order = DefaultQuestOrder
	}
	return &QuestEdge{
		Node:   q,
		Cursor: order.Field.toCursor(q),
	}
}

// TagEdge is the edge representation of Tag.
type TagEdge struct {
	Node   *Tag   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TagConnection is the connection containing edges to Tag.
type TagConnection struct {
	Edges      []*TagEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *TagConnection) build(nodes []*Tag, pager *tagPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Tag
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tag {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tag {
			return nodes[i]
		}
	}
	c.Edges = make([]*TagEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TagEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TagPaginateOption enables pagination customization.
type TagPaginateOption func(*tagPager) error

// WithTagOrder configures pagination ordering.
func WithTagOrder(order *TagOrder) TagPaginateOption {
	if order == nil {
		order = DefaultTagOrder
	}
	o := *order
	return func(pager *tagPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTagOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTagFilter configures pagination filter.
func WithTagFilter(filter func(*TagQuery) (*TagQuery, error)) TagPaginateOption {
	return func(pager *tagPager) error {
		if filter == nil {
			return errors.New("TagQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tagPager struct {
	reverse bool
	order   *TagOrder
	filter  func(*TagQuery) (*TagQuery, error)
}

func newTagPager(opts []TagPaginateOption, reverse bool) (*tagPager, error) {
	pager := &tagPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTagOrder
	}
	return pager, nil
}

func (p *tagPager) applyFilter(query *TagQuery) (*TagQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tagPager) toCursor(t *Tag) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tagPager) applyCursors(query *TagQuery, after, before *Cursor) (*TagQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTagOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tagPager) applyOrder(query *TagQuery) *TagQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTagOrder.Field {
		query = query.Order(DefaultTagOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *tagPager) orderExpr(query *TagQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTagOrder.Field {
			b.Comma().Ident(DefaultTagOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Tag.
func (t *TagQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TagPaginateOption,
) (*TagConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTagPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TagConnection{Edges: []*TagEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TagOrderFieldName orders Tag by name.
	TagOrderFieldName = &TagOrderField{
		Value: func(t *Tag) (ent.Value, error) {
			return t.Name, nil
		},
		column: tag.FieldName,
		toTerm: tag.ByName,
		toCursor: func(t *Tag) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TagOrderField) String() string {
	var str string
	switch f.column {
	case TagOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TagOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TagOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TagOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *TagOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid TagOrderField", str)
	}
	return nil
}

// TagOrderField defines the ordering field of Tag.
type TagOrderField struct {
	// Value extracts the ordering value from the given Tag.
	Value    func(*Tag) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tag.OrderOption
	toCursor func(*Tag) Cursor
}

// TagOrder defines the ordering of Tag.
type TagOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *TagOrderField `json:"field"`
}

// DefaultTagOrder is the default ordering of Tag.
var DefaultTagOrder = &TagOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TagOrderField{
		Value: func(t *Tag) (ent.Value, error) {
			return t.ID, nil
		},
		column: tag.FieldID,
		toTerm: tag.ByID,
		toCursor: func(t *Tag) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tag into TagEdge.
func (t *Tag) ToEdge(order *TagOrder) *TagEdge {
	if order == nil {
		order = DefaultTagOrder
	}
	return &TagEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TaskEdge is the edge representation of Task.
type TaskEdge struct {
	Node   *Task  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TaskConnection is the connection containing edges to Task.
type TaskConnection struct {
	Edges      []*TaskEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *TaskConnection) build(nodes []*Task, pager *taskPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Task
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Task {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Task {
			return nodes[i]
		}
	}
	c.Edges = make([]*TaskEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TaskEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TaskPaginateOption enables pagination customization.
type TaskPaginateOption func(*taskPager) error

// WithTaskOrder configures pagination ordering.
func WithTaskOrder(order []*TaskOrder) TaskPaginateOption {
	return func(pager *taskPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithTaskFilter configures pagination filter.
func WithTaskFilter(filter func(*TaskQuery) (*TaskQuery, error)) TaskPaginateOption {
	return func(pager *taskPager) error {
		if filter == nil {
			return errors.New("TaskQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskPager struct {
	reverse bool
	order   []*TaskOrder
	filter  func(*TaskQuery) (*TaskQuery, error)
}

func newTaskPager(opts []TaskPaginateOption, reverse bool) (*taskPager, error) {
	pager := &taskPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *taskPager) applyFilter(query *TaskQuery) (*TaskQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskPager) toCursor(t *Task) Cursor {
	cs := make([]any, 0, len(p.order))
	for _, o := range p.order {
		cs = append(cs, o.Field.toCursor(t).Value)
	}
	return Cursor{ID: t.ID, Value: cs}
}

func (p *taskPager) applyCursors(query *TaskQuery, after, before *Cursor) (*TaskQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultTaskOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *taskPager) applyOrder(query *TaskQuery) *TaskQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultTaskOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultTaskOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *taskPager) orderExpr(query *TaskQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultTaskOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Task.
func (t *TaskQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskPaginateOption,
) (*TaskConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TaskConnection{Edges: []*TaskEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TaskOrderFieldCreatedAt orders Task by created_at.
	TaskOrderFieldCreatedAt = &TaskOrderField{
		Value: func(t *Task) (ent.Value, error) {
			return t.CreatedAt, nil
		},
		column: task.FieldCreatedAt,
		toTerm: task.ByCreatedAt,
		toCursor: func(t *Task) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// TaskOrderFieldLastModifiedAt orders Task by last_modified_at.
	TaskOrderFieldLastModifiedAt = &TaskOrderField{
		Value: func(t *Task) (ent.Value, error) {
			return t.LastModifiedAt, nil
		},
		column: task.FieldLastModifiedAt,
		toTerm: task.ByLastModifiedAt,
		toCursor: func(t *Task) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.LastModifiedAt,
			}
		},
	}
	// TaskOrderFieldClaimedAt orders Task by claimed_at.
	TaskOrderFieldClaimedAt = &TaskOrderField{
		Value: func(t *Task) (ent.Value, error) {
			return t.ClaimedAt, nil
		},
		column: task.FieldClaimedAt,
		toTerm: task.ByClaimedAt,
		toCursor: func(t *Task) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.ClaimedAt,
			}
		},
	}
	// TaskOrderFieldExecStartedAt orders Task by exec_started_at.
	TaskOrderFieldExecStartedAt = &TaskOrderField{
		Value: func(t *Task) (ent.Value, error) {
			return t.ExecStartedAt, nil
		},
		column: task.FieldExecStartedAt,
		toTerm: task.ByExecStartedAt,
		toCursor: func(t *Task) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.ExecStartedAt,
			}
		},
	}
	// TaskOrderFieldExecFinishedAt orders Task by exec_finished_at.
	TaskOrderFieldExecFinishedAt = &TaskOrderField{
		Value: func(t *Task) (ent.Value, error) {
			return t.ExecFinishedAt, nil
		},
		column: task.FieldExecFinishedAt,
		toTerm: task.ByExecFinishedAt,
		toCursor: func(t *Task) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.ExecFinishedAt,
			}
		},
	}
	// TaskOrderFieldOutputSize orders Task by output_size.
	TaskOrderFieldOutputSize = &TaskOrderField{
		Value: func(t *Task) (ent.Value, error) {
			return t.OutputSize, nil
		},
		column: task.FieldOutputSize,
		toTerm: task.ByOutputSize,
		toCursor: func(t *Task) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.OutputSize,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TaskOrderField) String() string {
	var str string
	switch f.column {
	case TaskOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case TaskOrderFieldLastModifiedAt.column:
		str = "LAST_MODIFIED_AT"
	case TaskOrderFieldClaimedAt.column:
		str = "CLAIMED_AT"
	case TaskOrderFieldExecStartedAt.column:
		str = "EXEC_STARTED_AT"
	case TaskOrderFieldExecFinishedAt.column:
		str = "EXEC_FINISHED_AT"
	case TaskOrderFieldOutputSize.column:
		str = "OUTPUT_SIZE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TaskOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TaskOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TaskOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TaskOrderFieldCreatedAt
	case "LAST_MODIFIED_AT":
		*f = *TaskOrderFieldLastModifiedAt
	case "CLAIMED_AT":
		*f = *TaskOrderFieldClaimedAt
	case "EXEC_STARTED_AT":
		*f = *TaskOrderFieldExecStartedAt
	case "EXEC_FINISHED_AT":
		*f = *TaskOrderFieldExecFinishedAt
	case "OUTPUT_SIZE":
		*f = *TaskOrderFieldOutputSize
	default:
		return fmt.Errorf("%s is not a valid TaskOrderField", str)
	}
	return nil
}

// TaskOrderField defines the ordering field of Task.
type TaskOrderField struct {
	// Value extracts the ordering value from the given Task.
	Value    func(*Task) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) task.OrderOption
	toCursor func(*Task) Cursor
}

// TaskOrder defines the ordering of Task.
type TaskOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TaskOrderField `json:"field"`
}

// DefaultTaskOrder is the default ordering of Task.
var DefaultTaskOrder = &TaskOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TaskOrderField{
		Value: func(t *Task) (ent.Value, error) {
			return t.ID, nil
		},
		column: task.FieldID,
		toTerm: task.ByID,
		toCursor: func(t *Task) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Task into TaskEdge.
func (t *Task) ToEdge(order *TaskOrder) *TaskEdge {
	if order == nil {
		order = DefaultTaskOrder
	}
	return &TaskEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TomeEdge is the edge representation of Tome.
type TomeEdge struct {
	Node   *Tome  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TomeConnection is the connection containing edges to Tome.
type TomeConnection struct {
	Edges      []*TomeEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *TomeConnection) build(nodes []*Tome, pager *tomePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Tome
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tome {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tome {
			return nodes[i]
		}
	}
	c.Edges = make([]*TomeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TomeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TomePaginateOption enables pagination customization.
type TomePaginateOption func(*tomePager) error

// WithTomeOrder configures pagination ordering.
func WithTomeOrder(order *TomeOrder) TomePaginateOption {
	if order == nil {
		order = DefaultTomeOrder
	}
	o := *order
	return func(pager *tomePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTomeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTomeFilter configures pagination filter.
func WithTomeFilter(filter func(*TomeQuery) (*TomeQuery, error)) TomePaginateOption {
	return func(pager *tomePager) error {
		if filter == nil {
			return errors.New("TomeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tomePager struct {
	reverse bool
	order   *TomeOrder
	filter  func(*TomeQuery) (*TomeQuery, error)
}

func newTomePager(opts []TomePaginateOption, reverse bool) (*tomePager, error) {
	pager := &tomePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTomeOrder
	}
	return pager, nil
}

func (p *tomePager) applyFilter(query *TomeQuery) (*TomeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tomePager) toCursor(t *Tome) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tomePager) applyCursors(query *TomeQuery, after, before *Cursor) (*TomeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTomeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tomePager) applyOrder(query *TomeQuery) *TomeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTomeOrder.Field {
		query = query.Order(DefaultTomeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *tomePager) orderExpr(query *TomeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTomeOrder.Field {
			b.Comma().Ident(DefaultTomeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Tome.
func (t *TomeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TomePaginateOption,
) (*TomeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTomePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TomeConnection{Edges: []*TomeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TomeOrderFieldCreatedAt orders Tome by created_at.
	TomeOrderFieldCreatedAt = &TomeOrderField{
		Value: func(t *Tome) (ent.Value, error) {
			return t.CreatedAt, nil
		},
		column: tome.FieldCreatedAt,
		toTerm: tome.ByCreatedAt,
		toCursor: func(t *Tome) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// TomeOrderFieldLastModifiedAt orders Tome by last_modified_at.
	TomeOrderFieldLastModifiedAt = &TomeOrderField{
		Value: func(t *Tome) (ent.Value, error) {
			return t.LastModifiedAt, nil
		},
		column: tome.FieldLastModifiedAt,
		toTerm: tome.ByLastModifiedAt,
		toCursor: func(t *Tome) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.LastModifiedAt,
			}
		},
	}
	// TomeOrderFieldName orders Tome by name.
	TomeOrderFieldName = &TomeOrderField{
		Value: func(t *Tome) (ent.Value, error) {
			return t.Name, nil
		},
		column: tome.FieldName,
		toTerm: tome.ByName,
		toCursor: func(t *Tome) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TomeOrderField) String() string {
	var str string
	switch f.column {
	case TomeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case TomeOrderFieldLastModifiedAt.column:
		str = "LAST_MODIFIED_AT"
	case TomeOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TomeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TomeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TomeOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TomeOrderFieldCreatedAt
	case "LAST_MODIFIED_AT":
		*f = *TomeOrderFieldLastModifiedAt
	case "NAME":
		*f = *TomeOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid TomeOrderField", str)
	}
	return nil
}

// TomeOrderField defines the ordering field of Tome.
type TomeOrderField struct {
	// Value extracts the ordering value from the given Tome.
	Value    func(*Tome) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tome.OrderOption
	toCursor func(*Tome) Cursor
}

// TomeOrder defines the ordering of Tome.
type TomeOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TomeOrderField `json:"field"`
}

// DefaultTomeOrder is the default ordering of Tome.
var DefaultTomeOrder = &TomeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TomeOrderField{
		Value: func(t *Tome) (ent.Value, error) {
			return t.ID, nil
		},
		column: tome.FieldID,
		toTerm: tome.ByID,
		toCursor: func(t *Tome) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tome into TomeEdge.
func (t *Tome) ToEdge(order *TomeOrder) *TomeEdge {
	if order == nil {
		order = DefaultTomeOrder
	}
	return &TomeEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
