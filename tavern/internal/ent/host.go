// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/tavern/internal/ent/host"
)

// Host is the model entity for the Host schema.
type Host struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Unique identifier for the host. Unique to each host.
	Identifier string `json:"identifier,omitempty"`
	// A human readable identifier for the host.
	Name string `json:"name,omitempty"`
	// Primary interface IP address reported by the agent.
	PrimaryIP string `json:"primary_ip,omitempty"`
	// Platform the agent is operating on.
	Platform host.Platform `json:"platform,omitempty"`
	// Timestamp of when a task was last claimed or updated for the host.
	LastSeenAt time.Time `json:"last_seen_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostQuery when eager-loading is set.
	Edges        HostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HostEdges holds the relations/edges for other nodes in the graph.
type HostEdges struct {
	// Tags used to group this host with other hosts.
	Tags []*Tag `json:"tags,omitempty"`
	// Beacons that are present on this host system.
	Beacons []*Beacon `json:"beacons,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTags    map[string][]*Tag
	namedBeacons map[string][]*Beacon
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// BeaconsOrErr returns the Beacons value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) BeaconsOrErr() ([]*Beacon, error) {
	if e.loadedTypes[1] {
		return e.Beacons, nil
	}
	return nil, &NotLoadedError{edge: "beacons"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Host) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case host.FieldID:
			values[i] = new(sql.NullInt64)
		case host.FieldIdentifier, host.FieldName, host.FieldPrimaryIP, host.FieldPlatform:
			values[i] = new(sql.NullString)
		case host.FieldLastSeenAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Host fields.
func (h *Host) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case host.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case host.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				h.Identifier = value.String
			}
		case host.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case host.FieldPrimaryIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_ip", values[i])
			} else if value.Valid {
				h.PrimaryIP = value.String
			}
		case host.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				h.Platform = host.Platform(value.String)
			}
		case host.FieldLastSeenAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen_at", values[i])
			} else if value.Valid {
				h.LastSeenAt = value.Time
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Host.
// This includes values selected through modifiers, order, etc.
func (h *Host) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Host entity.
func (h *Host) QueryTags() *TagQuery {
	return NewHostClient(h.config).QueryTags(h)
}

// QueryBeacons queries the "beacons" edge of the Host entity.
func (h *Host) QueryBeacons() *BeaconQuery {
	return NewHostClient(h.config).QueryBeacons(h)
}

// Update returns a builder for updating this Host.
// Note that you need to call Host.Unwrap() before calling this method if this Host
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Host) Update() *HostUpdateOne {
	return NewHostClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Host entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Host) Unwrap() *Host {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Host is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Host) String() string {
	var builder strings.Builder
	builder.WriteString("Host(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("identifier=")
	builder.WriteString(h.Identifier)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteString(", ")
	builder.WriteString("primary_ip=")
	builder.WriteString(h.PrimaryIP)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", h.Platform))
	builder.WriteString(", ")
	builder.WriteString("last_seen_at=")
	builder.WriteString(h.LastSeenAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTags returns the Tags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (h *Host) NamedTags(name string) ([]*Tag, error) {
	if h.Edges.namedTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := h.Edges.namedTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (h *Host) appendNamedTags(name string, edges ...*Tag) {
	if h.Edges.namedTags == nil {
		h.Edges.namedTags = make(map[string][]*Tag)
	}
	if len(edges) == 0 {
		h.Edges.namedTags[name] = []*Tag{}
	} else {
		h.Edges.namedTags[name] = append(h.Edges.namedTags[name], edges...)
	}
}

// NamedBeacons returns the Beacons named value or an error if the edge was not
// loaded in eager-loading with this name.
func (h *Host) NamedBeacons(name string) ([]*Beacon, error) {
	if h.Edges.namedBeacons == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := h.Edges.namedBeacons[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (h *Host) appendNamedBeacons(name string, edges ...*Beacon) {
	if h.Edges.namedBeacons == nil {
		h.Edges.namedBeacons = make(map[string][]*Beacon)
	}
	if len(edges) == 0 {
		h.Edges.namedBeacons[name] = []*Beacon{}
	} else {
		h.Edges.namedBeacons[name] = append(h.Edges.namedBeacons[name], edges...)
	}
}

// Hosts is a parsable slice of Host.
type Hosts []*Host
