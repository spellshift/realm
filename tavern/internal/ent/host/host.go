// Code generated by ent, DO NOT EDIT.

package host

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"realm.pub/tavern/internal/c2/c2pb"
)

const (
	// Label holds the string label denoting the host type in the database.
	Label = "host"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastModifiedAt holds the string denoting the last_modified_at field in the database.
	FieldLastModifiedAt = "last_modified_at"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrimaryIP holds the string denoting the primary_ip field in the database.
	FieldPrimaryIP = "primary_ip"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldLastSeenAt holds the string denoting the last_seen_at field in the database.
	FieldLastSeenAt = "last_seen_at"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeBeacons holds the string denoting the beacons edge name in mutations.
	EdgeBeacons = "beacons"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeProcesses holds the string denoting the processes edge name in mutations.
	EdgeProcesses = "processes"
	// EdgeCredentials holds the string denoting the credentials edge name in mutations.
	EdgeCredentials = "credentials"
	// Table holds the table name of the host in the database.
	Table = "hosts"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "host_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// BeaconsTable is the table that holds the beacons relation/edge.
	BeaconsTable = "beacons"
	// BeaconsInverseTable is the table name for the Beacon entity.
	// It exists in this package in order to avoid circular dependency with the "beacon" package.
	BeaconsInverseTable = "beacons"
	// BeaconsColumn is the table column denoting the beacons relation/edge.
	BeaconsColumn = "beacon_host"
	// FilesTable is the table that holds the files relation/edge.
	FilesTable = "host_files"
	// FilesInverseTable is the table name for the HostFile entity.
	// It exists in this package in order to avoid circular dependency with the "hostfile" package.
	FilesInverseTable = "host_files"
	// FilesColumn is the table column denoting the files relation/edge.
	FilesColumn = "host_files"
	// ProcessesTable is the table that holds the processes relation/edge.
	ProcessesTable = "host_processes"
	// ProcessesInverseTable is the table name for the HostProcess entity.
	// It exists in this package in order to avoid circular dependency with the "hostprocess" package.
	ProcessesInverseTable = "host_processes"
	// ProcessesColumn is the table column denoting the processes relation/edge.
	ProcessesColumn = "host_processes"
	// CredentialsTable is the table that holds the credentials relation/edge.
	CredentialsTable = "host_credentials"
	// CredentialsInverseTable is the table name for the HostCredential entity.
	// It exists in this package in order to avoid circular dependency with the "hostcredential" package.
	CredentialsInverseTable = "host_credentials"
	// CredentialsColumn is the table column denoting the credentials relation/edge.
	CredentialsColumn = "host_credential_host"
)

// Columns holds all SQL columns for host fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldLastModifiedAt,
	FieldIdentifier,
	FieldName,
	FieldPrimaryIP,
	FieldPlatform,
	FieldLastSeenAt,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"host_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastModifiedAt holds the default value on creation for the "last_modified_at" field.
	DefaultLastModifiedAt func() time.Time
	// UpdateDefaultLastModifiedAt holds the default value on update for the "last_modified_at" field.
	UpdateDefaultLastModifiedAt func() time.Time
	// IdentifierValidator is a validator for the "identifier" field. It is called by the builders before save.
	IdentifierValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// PlatformValidator is a validator for the "platform" field enum values. It is called by the builders before save.
func PlatformValidator(pl c2pb.Host_Platform) error {
	switch pl.String() {
	case "PLATFORM_BSD", "PLATFORM_LINUX", "PLATFORM_MACOS", "PLATFORM_UNSPECIFIED", "PLATFORM_WINDOWS":
		return nil
	default:
		return fmt.Errorf("host: invalid enum value for platform field: %q", pl)
	}
}

// OrderOption defines the ordering options for the Host queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastModifiedAt orders the results by the last_modified_at field.
func ByLastModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastModifiedAt, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrimaryIP orders the results by the primary_ip field.
func ByPrimaryIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryIP, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByLastSeenAt orders the results by the last_seen_at field.
func ByLastSeenAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSeenAt, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBeaconsCount orders the results by beacons count.
func ByBeaconsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBeaconsStep(), opts...)
	}
}

// ByBeacons orders the results by beacons terms.
func ByBeacons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBeaconsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProcessesCount orders the results by processes count.
func ByProcessesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProcessesStep(), opts...)
	}
}

// ByProcesses orders the results by processes terms.
func ByProcesses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcessesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCredentialsCount orders the results by credentials count.
func ByCredentialsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCredentialsStep(), opts...)
	}
}

// ByCredentials orders the results by credentials terms.
func ByCredentials(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCredentialsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
func newBeaconsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BeaconsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, BeaconsTable, BeaconsColumn),
	)
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
	)
}
func newProcessesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcessesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProcessesTable, ProcessesColumn),
	)
}
func newCredentialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CredentialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CredentialsTable, CredentialsColumn),
	)
}

var (
	// c2pb.Host_Platform must implement graphql.Marshaler.
	_ graphql.Marshaler = (*c2pb.Host_Platform)(nil)
	// c2pb.Host_Platform must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*c2pb.Host_Platform)(nil)
)
