// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/c2/c2pb"
	"realm.pub/tavern/internal/ent/beacon"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/hostcredential"
	"realm.pub/tavern/internal/ent/hostfile"
	"realm.pub/tavern/internal/ent/hostprocess"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/tag"
)

// HostUpdate is the builder for updating Host entities.
type HostUpdate struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// Where appends a list predicates to the HostUpdate builder.
func (hu *HostUpdate) Where(ps ...predicate.Host) *HostUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (hu *HostUpdate) SetLastModifiedAt(t time.Time) *HostUpdate {
	hu.mutation.SetLastModifiedAt(t)
	return hu
}

// SetIdentifier sets the "identifier" field.
func (hu *HostUpdate) SetIdentifier(s string) *HostUpdate {
	hu.mutation.SetIdentifier(s)
	return hu
}

// SetName sets the "name" field.
func (hu *HostUpdate) SetName(s string) *HostUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hu *HostUpdate) SetNillableName(s *string) *HostUpdate {
	if s != nil {
		hu.SetName(*s)
	}
	return hu
}

// ClearName clears the value of the "name" field.
func (hu *HostUpdate) ClearName() *HostUpdate {
	hu.mutation.ClearName()
	return hu
}

// SetPrimaryIP sets the "primary_ip" field.
func (hu *HostUpdate) SetPrimaryIP(s string) *HostUpdate {
	hu.mutation.SetPrimaryIP(s)
	return hu
}

// SetNillablePrimaryIP sets the "primary_ip" field if the given value is not nil.
func (hu *HostUpdate) SetNillablePrimaryIP(s *string) *HostUpdate {
	if s != nil {
		hu.SetPrimaryIP(*s)
	}
	return hu
}

// ClearPrimaryIP clears the value of the "primary_ip" field.
func (hu *HostUpdate) ClearPrimaryIP() *HostUpdate {
	hu.mutation.ClearPrimaryIP()
	return hu
}

// SetPlatform sets the "platform" field.
func (hu *HostUpdate) SetPlatform(cp c2pb.Host_Platform) *HostUpdate {
	hu.mutation.SetPlatform(cp)
	return hu
}

// SetLastSeenAt sets the "last_seen_at" field.
func (hu *HostUpdate) SetLastSeenAt(t time.Time) *HostUpdate {
	hu.mutation.SetLastSeenAt(t)
	return hu
}

// SetNillableLastSeenAt sets the "last_seen_at" field if the given value is not nil.
func (hu *HostUpdate) SetNillableLastSeenAt(t *time.Time) *HostUpdate {
	if t != nil {
		hu.SetLastSeenAt(*t)
	}
	return hu
}

// ClearLastSeenAt clears the value of the "last_seen_at" field.
func (hu *HostUpdate) ClearLastSeenAt() *HostUpdate {
	hu.mutation.ClearLastSeenAt()
	return hu
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (hu *HostUpdate) AddTagIDs(ids ...int) *HostUpdate {
	hu.mutation.AddTagIDs(ids...)
	return hu
}

// AddTags adds the "tags" edges to the Tag entity.
func (hu *HostUpdate) AddTags(t ...*Tag) *HostUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.AddTagIDs(ids...)
}

// AddBeaconIDs adds the "beacons" edge to the Beacon entity by IDs.
func (hu *HostUpdate) AddBeaconIDs(ids ...int) *HostUpdate {
	hu.mutation.AddBeaconIDs(ids...)
	return hu
}

// AddBeacons adds the "beacons" edges to the Beacon entity.
func (hu *HostUpdate) AddBeacons(b ...*Beacon) *HostUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return hu.AddBeaconIDs(ids...)
}

// AddFileIDs adds the "files" edge to the HostFile entity by IDs.
func (hu *HostUpdate) AddFileIDs(ids ...int) *HostUpdate {
	hu.mutation.AddFileIDs(ids...)
	return hu
}

// AddFiles adds the "files" edges to the HostFile entity.
func (hu *HostUpdate) AddFiles(h ...*HostFile) *HostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddFileIDs(ids...)
}

// AddProcessIDs adds the "processes" edge to the HostProcess entity by IDs.
func (hu *HostUpdate) AddProcessIDs(ids ...int) *HostUpdate {
	hu.mutation.AddProcessIDs(ids...)
	return hu
}

// AddProcesses adds the "processes" edges to the HostProcess entity.
func (hu *HostUpdate) AddProcesses(h ...*HostProcess) *HostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddProcessIDs(ids...)
}

// AddCredentialIDs adds the "credentials" edge to the HostCredential entity by IDs.
func (hu *HostUpdate) AddCredentialIDs(ids ...int) *HostUpdate {
	hu.mutation.AddCredentialIDs(ids...)
	return hu
}

// AddCredentials adds the "credentials" edges to the HostCredential entity.
func (hu *HostUpdate) AddCredentials(h ...*HostCredential) *HostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddCredentialIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (hu *HostUpdate) Mutation() *HostMutation {
	return hu.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (hu *HostUpdate) ClearTags() *HostUpdate {
	hu.mutation.ClearTags()
	return hu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (hu *HostUpdate) RemoveTagIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveTagIDs(ids...)
	return hu
}

// RemoveTags removes "tags" edges to Tag entities.
func (hu *HostUpdate) RemoveTags(t ...*Tag) *HostUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.RemoveTagIDs(ids...)
}

// ClearBeacons clears all "beacons" edges to the Beacon entity.
func (hu *HostUpdate) ClearBeacons() *HostUpdate {
	hu.mutation.ClearBeacons()
	return hu
}

// RemoveBeaconIDs removes the "beacons" edge to Beacon entities by IDs.
func (hu *HostUpdate) RemoveBeaconIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveBeaconIDs(ids...)
	return hu
}

// RemoveBeacons removes "beacons" edges to Beacon entities.
func (hu *HostUpdate) RemoveBeacons(b ...*Beacon) *HostUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return hu.RemoveBeaconIDs(ids...)
}

// ClearFiles clears all "files" edges to the HostFile entity.
func (hu *HostUpdate) ClearFiles() *HostUpdate {
	hu.mutation.ClearFiles()
	return hu
}

// RemoveFileIDs removes the "files" edge to HostFile entities by IDs.
func (hu *HostUpdate) RemoveFileIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveFileIDs(ids...)
	return hu
}

// RemoveFiles removes "files" edges to HostFile entities.
func (hu *HostUpdate) RemoveFiles(h ...*HostFile) *HostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveFileIDs(ids...)
}

// ClearProcesses clears all "processes" edges to the HostProcess entity.
func (hu *HostUpdate) ClearProcesses() *HostUpdate {
	hu.mutation.ClearProcesses()
	return hu
}

// RemoveProcessIDs removes the "processes" edge to HostProcess entities by IDs.
func (hu *HostUpdate) RemoveProcessIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveProcessIDs(ids...)
	return hu
}

// RemoveProcesses removes "processes" edges to HostProcess entities.
func (hu *HostUpdate) RemoveProcesses(h ...*HostProcess) *HostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveProcessIDs(ids...)
}

// ClearCredentials clears all "credentials" edges to the HostCredential entity.
func (hu *HostUpdate) ClearCredentials() *HostUpdate {
	hu.mutation.ClearCredentials()
	return hu
}

// RemoveCredentialIDs removes the "credentials" edge to HostCredential entities by IDs.
func (hu *HostUpdate) RemoveCredentialIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveCredentialIDs(ids...)
	return hu
}

// RemoveCredentials removes "credentials" edges to HostCredential entities.
func (hu *HostUpdate) RemoveCredentials(h ...*HostCredential) *HostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveCredentialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HostUpdate) Save(ctx context.Context) (int, error) {
	hu.defaults()
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HostUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HostUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HostUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HostUpdate) defaults() {
	if _, ok := hu.mutation.LastModifiedAt(); !ok {
		v := host.UpdateDefaultLastModifiedAt()
		hu.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HostUpdate) check() error {
	if v, ok := hu.mutation.Identifier(); ok {
		if err := host.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Host.identifier": %w`, err)}
		}
	}
	if v, ok := hu.mutation.Name(); ok {
		if err := host.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Host.name": %w`, err)}
		}
	}
	if v, ok := hu.mutation.Platform(); ok {
		if err := host.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Host.platform": %w`, err)}
		}
	}
	return nil
}

func (hu *HostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.LastModifiedAt(); ok {
		_spec.SetField(host.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := hu.mutation.Identifier(); ok {
		_spec.SetField(host.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.SetField(host.FieldName, field.TypeString, value)
	}
	if hu.mutation.NameCleared() {
		_spec.ClearField(host.FieldName, field.TypeString)
	}
	if value, ok := hu.mutation.PrimaryIP(); ok {
		_spec.SetField(host.FieldPrimaryIP, field.TypeString, value)
	}
	if hu.mutation.PrimaryIPCleared() {
		_spec.ClearField(host.FieldPrimaryIP, field.TypeString)
	}
	if value, ok := hu.mutation.Platform(); ok {
		_spec.SetField(host.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := hu.mutation.LastSeenAt(); ok {
		_spec.SetField(host.FieldLastSeenAt, field.TypeTime, value)
	}
	if hu.mutation.LastSeenAtCleared() {
		_spec.ClearField(host.FieldLastSeenAt, field.TypeTime)
	}
	if hu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   host.TagsTable,
			Columns: host.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !hu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   host.TagsTable,
			Columns: host.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   host.TagsTable,
			Columns: host.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.BeaconsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.BeaconsTable,
			Columns: []string{host.BeaconsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedBeaconsIDs(); len(nodes) > 0 && !hu.mutation.BeaconsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.BeaconsTable,
			Columns: []string{host.BeaconsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.BeaconsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.BeaconsTable,
			Columns: []string{host.BeaconsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.FilesTable,
			Columns: []string{host.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !hu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.FilesTable,
			Columns: []string{host.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.FilesTable,
			Columns: []string{host.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.ProcessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ProcessesTable,
			Columns: []string{host.ProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedProcessesIDs(); len(nodes) > 0 && !hu.mutation.ProcessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ProcessesTable,
			Columns: []string{host.ProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.ProcessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ProcessesTable,
			Columns: []string{host.ProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.CredentialsTable,
			Columns: []string{host.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostcredential.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !hu.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.CredentialsTable,
			Columns: []string{host.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostcredential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.CredentialsTable,
			Columns: []string{host.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostcredential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HostUpdateOne is the builder for updating a single Host entity.
type HostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostMutation
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (huo *HostUpdateOne) SetLastModifiedAt(t time.Time) *HostUpdateOne {
	huo.mutation.SetLastModifiedAt(t)
	return huo
}

// SetIdentifier sets the "identifier" field.
func (huo *HostUpdateOne) SetIdentifier(s string) *HostUpdateOne {
	huo.mutation.SetIdentifier(s)
	return huo
}

// SetName sets the "name" field.
func (huo *HostUpdateOne) SetName(s string) *HostUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableName(s *string) *HostUpdateOne {
	if s != nil {
		huo.SetName(*s)
	}
	return huo
}

// ClearName clears the value of the "name" field.
func (huo *HostUpdateOne) ClearName() *HostUpdateOne {
	huo.mutation.ClearName()
	return huo
}

// SetPrimaryIP sets the "primary_ip" field.
func (huo *HostUpdateOne) SetPrimaryIP(s string) *HostUpdateOne {
	huo.mutation.SetPrimaryIP(s)
	return huo
}

// SetNillablePrimaryIP sets the "primary_ip" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillablePrimaryIP(s *string) *HostUpdateOne {
	if s != nil {
		huo.SetPrimaryIP(*s)
	}
	return huo
}

// ClearPrimaryIP clears the value of the "primary_ip" field.
func (huo *HostUpdateOne) ClearPrimaryIP() *HostUpdateOne {
	huo.mutation.ClearPrimaryIP()
	return huo
}

// SetPlatform sets the "platform" field.
func (huo *HostUpdateOne) SetPlatform(cp c2pb.Host_Platform) *HostUpdateOne {
	huo.mutation.SetPlatform(cp)
	return huo
}

// SetLastSeenAt sets the "last_seen_at" field.
func (huo *HostUpdateOne) SetLastSeenAt(t time.Time) *HostUpdateOne {
	huo.mutation.SetLastSeenAt(t)
	return huo
}

// SetNillableLastSeenAt sets the "last_seen_at" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableLastSeenAt(t *time.Time) *HostUpdateOne {
	if t != nil {
		huo.SetLastSeenAt(*t)
	}
	return huo
}

// ClearLastSeenAt clears the value of the "last_seen_at" field.
func (huo *HostUpdateOne) ClearLastSeenAt() *HostUpdateOne {
	huo.mutation.ClearLastSeenAt()
	return huo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (huo *HostUpdateOne) AddTagIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddTagIDs(ids...)
	return huo
}

// AddTags adds the "tags" edges to the Tag entity.
func (huo *HostUpdateOne) AddTags(t ...*Tag) *HostUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.AddTagIDs(ids...)
}

// AddBeaconIDs adds the "beacons" edge to the Beacon entity by IDs.
func (huo *HostUpdateOne) AddBeaconIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddBeaconIDs(ids...)
	return huo
}

// AddBeacons adds the "beacons" edges to the Beacon entity.
func (huo *HostUpdateOne) AddBeacons(b ...*Beacon) *HostUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return huo.AddBeaconIDs(ids...)
}

// AddFileIDs adds the "files" edge to the HostFile entity by IDs.
func (huo *HostUpdateOne) AddFileIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddFileIDs(ids...)
	return huo
}

// AddFiles adds the "files" edges to the HostFile entity.
func (huo *HostUpdateOne) AddFiles(h ...*HostFile) *HostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddFileIDs(ids...)
}

// AddProcessIDs adds the "processes" edge to the HostProcess entity by IDs.
func (huo *HostUpdateOne) AddProcessIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddProcessIDs(ids...)
	return huo
}

// AddProcesses adds the "processes" edges to the HostProcess entity.
func (huo *HostUpdateOne) AddProcesses(h ...*HostProcess) *HostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddProcessIDs(ids...)
}

// AddCredentialIDs adds the "credentials" edge to the HostCredential entity by IDs.
func (huo *HostUpdateOne) AddCredentialIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddCredentialIDs(ids...)
	return huo
}

// AddCredentials adds the "credentials" edges to the HostCredential entity.
func (huo *HostUpdateOne) AddCredentials(h ...*HostCredential) *HostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddCredentialIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (huo *HostUpdateOne) Mutation() *HostMutation {
	return huo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (huo *HostUpdateOne) ClearTags() *HostUpdateOne {
	huo.mutation.ClearTags()
	return huo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (huo *HostUpdateOne) RemoveTagIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveTagIDs(ids...)
	return huo
}

// RemoveTags removes "tags" edges to Tag entities.
func (huo *HostUpdateOne) RemoveTags(t ...*Tag) *HostUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.RemoveTagIDs(ids...)
}

// ClearBeacons clears all "beacons" edges to the Beacon entity.
func (huo *HostUpdateOne) ClearBeacons() *HostUpdateOne {
	huo.mutation.ClearBeacons()
	return huo
}

// RemoveBeaconIDs removes the "beacons" edge to Beacon entities by IDs.
func (huo *HostUpdateOne) RemoveBeaconIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveBeaconIDs(ids...)
	return huo
}

// RemoveBeacons removes "beacons" edges to Beacon entities.
func (huo *HostUpdateOne) RemoveBeacons(b ...*Beacon) *HostUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return huo.RemoveBeaconIDs(ids...)
}

// ClearFiles clears all "files" edges to the HostFile entity.
func (huo *HostUpdateOne) ClearFiles() *HostUpdateOne {
	huo.mutation.ClearFiles()
	return huo
}

// RemoveFileIDs removes the "files" edge to HostFile entities by IDs.
func (huo *HostUpdateOne) RemoveFileIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveFileIDs(ids...)
	return huo
}

// RemoveFiles removes "files" edges to HostFile entities.
func (huo *HostUpdateOne) RemoveFiles(h ...*HostFile) *HostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveFileIDs(ids...)
}

// ClearProcesses clears all "processes" edges to the HostProcess entity.
func (huo *HostUpdateOne) ClearProcesses() *HostUpdateOne {
	huo.mutation.ClearProcesses()
	return huo
}

// RemoveProcessIDs removes the "processes" edge to HostProcess entities by IDs.
func (huo *HostUpdateOne) RemoveProcessIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveProcessIDs(ids...)
	return huo
}

// RemoveProcesses removes "processes" edges to HostProcess entities.
func (huo *HostUpdateOne) RemoveProcesses(h ...*HostProcess) *HostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveProcessIDs(ids...)
}

// ClearCredentials clears all "credentials" edges to the HostCredential entity.
func (huo *HostUpdateOne) ClearCredentials() *HostUpdateOne {
	huo.mutation.ClearCredentials()
	return huo
}

// RemoveCredentialIDs removes the "credentials" edge to HostCredential entities by IDs.
func (huo *HostUpdateOne) RemoveCredentialIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveCredentialIDs(ids...)
	return huo
}

// RemoveCredentials removes "credentials" edges to HostCredential entities.
func (huo *HostUpdateOne) RemoveCredentials(h ...*HostCredential) *HostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveCredentialIDs(ids...)
}

// Where appends a list predicates to the HostUpdate builder.
func (huo *HostUpdateOne) Where(ps ...predicate.Host) *HostUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HostUpdateOne) Select(field string, fields ...string) *HostUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Host entity.
func (huo *HostUpdateOne) Save(ctx context.Context) (*Host, error) {
	huo.defaults()
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HostUpdateOne) SaveX(ctx context.Context) *Host {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HostUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HostUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HostUpdateOne) defaults() {
	if _, ok := huo.mutation.LastModifiedAt(); !ok {
		v := host.UpdateDefaultLastModifiedAt()
		huo.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HostUpdateOne) check() error {
	if v, ok := huo.mutation.Identifier(); ok {
		if err := host.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Host.identifier": %w`, err)}
		}
	}
	if v, ok := huo.mutation.Name(); ok {
		if err := host.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Host.name": %w`, err)}
		}
	}
	if v, ok := huo.mutation.Platform(); ok {
		if err := host.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Host.platform": %w`, err)}
		}
	}
	return nil
}

func (huo *HostUpdateOne) sqlSave(ctx context.Context) (_node *Host, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Host.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, host.FieldID)
		for _, f := range fields {
			if !host.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != host.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.LastModifiedAt(); ok {
		_spec.SetField(host.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := huo.mutation.Identifier(); ok {
		_spec.SetField(host.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.SetField(host.FieldName, field.TypeString, value)
	}
	if huo.mutation.NameCleared() {
		_spec.ClearField(host.FieldName, field.TypeString)
	}
	if value, ok := huo.mutation.PrimaryIP(); ok {
		_spec.SetField(host.FieldPrimaryIP, field.TypeString, value)
	}
	if huo.mutation.PrimaryIPCleared() {
		_spec.ClearField(host.FieldPrimaryIP, field.TypeString)
	}
	if value, ok := huo.mutation.Platform(); ok {
		_spec.SetField(host.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := huo.mutation.LastSeenAt(); ok {
		_spec.SetField(host.FieldLastSeenAt, field.TypeTime, value)
	}
	if huo.mutation.LastSeenAtCleared() {
		_spec.ClearField(host.FieldLastSeenAt, field.TypeTime)
	}
	if huo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   host.TagsTable,
			Columns: host.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !huo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   host.TagsTable,
			Columns: host.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   host.TagsTable,
			Columns: host.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.BeaconsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.BeaconsTable,
			Columns: []string{host.BeaconsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedBeaconsIDs(); len(nodes) > 0 && !huo.mutation.BeaconsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.BeaconsTable,
			Columns: []string{host.BeaconsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.BeaconsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.BeaconsTable,
			Columns: []string{host.BeaconsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.FilesTable,
			Columns: []string{host.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !huo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.FilesTable,
			Columns: []string{host.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.FilesTable,
			Columns: []string{host.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.ProcessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ProcessesTable,
			Columns: []string{host.ProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedProcessesIDs(); len(nodes) > 0 && !huo.mutation.ProcessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ProcessesTable,
			Columns: []string{host.ProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.ProcessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ProcessesTable,
			Columns: []string{host.ProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.CredentialsTable,
			Columns: []string{host.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostcredential.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !huo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.CredentialsTable,
			Columns: []string{host.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostcredential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.CredentialsTable,
			Columns: []string{host.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostcredential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Host{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
