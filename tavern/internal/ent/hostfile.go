// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/hostfile"
	"realm.pub/tavern/internal/ent/task"
)

// HostFile is the model entity for the HostFile schema.
type HostFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp of when this ent was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Timestamp of when this ent was last updated
	LastModifiedAt time.Time `json:"last_modified_at,omitempty"`
	// Path to the file on the host system.
	Path string `json:"path,omitempty"`
	// User who owns the file on the host system.
	Owner string `json:"owner,omitempty"`
	// Group who owns the file on the host system.
	Group string `json:"group,omitempty"`
	// Permissions for the file on the host system.
	Permissions string `json:"permissions,omitempty"`
	// The size of the file in bytes
	Size int `json:"size,omitempty"`
	// A SHA3-256 digest of the content field
	Hash string `json:"hash,omitempty"`
	// The content of the file
	Content []byte `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostFileQuery when eager-loading is set.
	Edges               HostFileEdges `json:"edges"`
	host_files          *int
	host_file_host      *int
	task_reported_files *int
	selectValues        sql.SelectValues
}

// HostFileEdges holds the relations/edges for other nodes in the graph.
type HostFileEdges struct {
	// Host the file was reported on.
	Host *Host `json:"host,omitempty"`
	// Task that reported this file.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostFileEdges) HostOrErr() (*Host, error) {
	if e.loadedTypes[0] {
		if e.Host == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: host.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostFileEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HostFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hostfile.FieldContent:
			values[i] = new([]byte)
		case hostfile.FieldID, hostfile.FieldSize:
			values[i] = new(sql.NullInt64)
		case hostfile.FieldPath, hostfile.FieldOwner, hostfile.FieldGroup, hostfile.FieldPermissions, hostfile.FieldHash:
			values[i] = new(sql.NullString)
		case hostfile.FieldCreatedAt, hostfile.FieldLastModifiedAt:
			values[i] = new(sql.NullTime)
		case hostfile.ForeignKeys[0]: // host_files
			values[i] = new(sql.NullInt64)
		case hostfile.ForeignKeys[1]: // host_file_host
			values[i] = new(sql.NullInt64)
		case hostfile.ForeignKeys[2]: // task_reported_files
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HostFile fields.
func (hf *HostFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hostfile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hf.ID = int(value.Int64)
		case hostfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hf.CreatedAt = value.Time
			}
		case hostfile.FieldLastModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_at", values[i])
			} else if value.Valid {
				hf.LastModifiedAt = value.Time
			}
		case hostfile.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				hf.Path = value.String
			}
		case hostfile.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				hf.Owner = value.String
			}
		case hostfile.FieldGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group", values[i])
			} else if value.Valid {
				hf.Group = value.String
			}
		case hostfile.FieldPermissions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value.Valid {
				hf.Permissions = value.String
			}
		case hostfile.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				hf.Size = int(value.Int64)
			}
		case hostfile.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				hf.Hash = value.String
			}
		case hostfile.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				hf.Content = *value
			}
		case hostfile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_files", value)
			} else if value.Valid {
				hf.host_files = new(int)
				*hf.host_files = int(value.Int64)
			}
		case hostfile.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_file_host", value)
			} else if value.Valid {
				hf.host_file_host = new(int)
				*hf.host_file_host = int(value.Int64)
			}
		case hostfile.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_reported_files", value)
			} else if value.Valid {
				hf.task_reported_files = new(int)
				*hf.task_reported_files = int(value.Int64)
			}
		default:
			hf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HostFile.
// This includes values selected through modifiers, order, etc.
func (hf *HostFile) Value(name string) (ent.Value, error) {
	return hf.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the HostFile entity.
func (hf *HostFile) QueryHost() *HostQuery {
	return NewHostFileClient(hf.config).QueryHost(hf)
}

// QueryTask queries the "task" edge of the HostFile entity.
func (hf *HostFile) QueryTask() *TaskQuery {
	return NewHostFileClient(hf.config).QueryTask(hf)
}

// Update returns a builder for updating this HostFile.
// Note that you need to call HostFile.Unwrap() before calling this method if this HostFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (hf *HostFile) Update() *HostFileUpdateOne {
	return NewHostFileClient(hf.config).UpdateOne(hf)
}

// Unwrap unwraps the HostFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hf *HostFile) Unwrap() *HostFile {
	_tx, ok := hf.config.driver.(*txDriver)
	if !ok {
		panic("ent: HostFile is not a transactional entity")
	}
	hf.config.driver = _tx.drv
	return hf
}

// String implements the fmt.Stringer.
func (hf *HostFile) String() string {
	var builder strings.Builder
	builder.WriteString("HostFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_modified_at=")
	builder.WriteString(hf.LastModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(hf.Path)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(hf.Owner)
	builder.WriteString(", ")
	builder.WriteString("group=")
	builder.WriteString(hf.Group)
	builder.WriteString(", ")
	builder.WriteString("permissions=")
	builder.WriteString(hf.Permissions)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", hf.Size))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(hf.Hash)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", hf.Content))
	builder.WriteByte(')')
	return builder.String()
}

// HostFiles is a parsable slice of HostFile.
type HostFiles []*HostFile
