// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/hostfile"
	"realm.pub/tavern/internal/ent/task"
)

// HostFileCreate is the builder for creating a HostFile entity.
type HostFileCreate struct {
	config
	mutation *HostFileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hfc *HostFileCreate) SetCreatedAt(t time.Time) *HostFileCreate {
	hfc.mutation.SetCreatedAt(t)
	return hfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hfc *HostFileCreate) SetNillableCreatedAt(t *time.Time) *HostFileCreate {
	if t != nil {
		hfc.SetCreatedAt(*t)
	}
	return hfc
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (hfc *HostFileCreate) SetLastModifiedAt(t time.Time) *HostFileCreate {
	hfc.mutation.SetLastModifiedAt(t)
	return hfc
}

// SetNillableLastModifiedAt sets the "last_modified_at" field if the given value is not nil.
func (hfc *HostFileCreate) SetNillableLastModifiedAt(t *time.Time) *HostFileCreate {
	if t != nil {
		hfc.SetLastModifiedAt(*t)
	}
	return hfc
}

// SetPath sets the "path" field.
func (hfc *HostFileCreate) SetPath(s string) *HostFileCreate {
	hfc.mutation.SetPath(s)
	return hfc
}

// SetOwner sets the "owner" field.
func (hfc *HostFileCreate) SetOwner(s string) *HostFileCreate {
	hfc.mutation.SetOwner(s)
	return hfc
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (hfc *HostFileCreate) SetNillableOwner(s *string) *HostFileCreate {
	if s != nil {
		hfc.SetOwner(*s)
	}
	return hfc
}

// SetGroup sets the "group" field.
func (hfc *HostFileCreate) SetGroup(s string) *HostFileCreate {
	hfc.mutation.SetGroup(s)
	return hfc
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (hfc *HostFileCreate) SetNillableGroup(s *string) *HostFileCreate {
	if s != nil {
		hfc.SetGroup(*s)
	}
	return hfc
}

// SetPermissions sets the "permissions" field.
func (hfc *HostFileCreate) SetPermissions(s string) *HostFileCreate {
	hfc.mutation.SetPermissions(s)
	return hfc
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (hfc *HostFileCreate) SetNillablePermissions(s *string) *HostFileCreate {
	if s != nil {
		hfc.SetPermissions(*s)
	}
	return hfc
}

// SetSize sets the "size" field.
func (hfc *HostFileCreate) SetSize(u uint64) *HostFileCreate {
	hfc.mutation.SetSize(u)
	return hfc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (hfc *HostFileCreate) SetNillableSize(u *uint64) *HostFileCreate {
	if u != nil {
		hfc.SetSize(*u)
	}
	return hfc
}

// SetHash sets the "hash" field.
func (hfc *HostFileCreate) SetHash(s string) *HostFileCreate {
	hfc.mutation.SetHash(s)
	return hfc
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (hfc *HostFileCreate) SetNillableHash(s *string) *HostFileCreate {
	if s != nil {
		hfc.SetHash(*s)
	}
	return hfc
}

// SetContent sets the "content" field.
func (hfc *HostFileCreate) SetContent(b []byte) *HostFileCreate {
	hfc.mutation.SetContent(b)
	return hfc
}

// SetHostID sets the "host" edge to the Host entity by ID.
func (hfc *HostFileCreate) SetHostID(id int) *HostFileCreate {
	hfc.mutation.SetHostID(id)
	return hfc
}

// SetHost sets the "host" edge to the Host entity.
func (hfc *HostFileCreate) SetHost(h *Host) *HostFileCreate {
	return hfc.SetHostID(h.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (hfc *HostFileCreate) SetTaskID(id int) *HostFileCreate {
	hfc.mutation.SetTaskID(id)
	return hfc
}

// SetTask sets the "task" edge to the Task entity.
func (hfc *HostFileCreate) SetTask(t *Task) *HostFileCreate {
	return hfc.SetTaskID(t.ID)
}

// Mutation returns the HostFileMutation object of the builder.
func (hfc *HostFileCreate) Mutation() *HostFileMutation {
	return hfc.mutation
}

// Save creates the HostFile in the database.
func (hfc *HostFileCreate) Save(ctx context.Context) (*HostFile, error) {
	if err := hfc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, hfc.sqlSave, hfc.mutation, hfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hfc *HostFileCreate) SaveX(ctx context.Context) *HostFile {
	v, err := hfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hfc *HostFileCreate) Exec(ctx context.Context) error {
	_, err := hfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hfc *HostFileCreate) ExecX(ctx context.Context) {
	if err := hfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hfc *HostFileCreate) defaults() error {
	if _, ok := hfc.mutation.CreatedAt(); !ok {
		if hostfile.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized hostfile.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := hostfile.DefaultCreatedAt()
		hfc.mutation.SetCreatedAt(v)
	}
	if _, ok := hfc.mutation.LastModifiedAt(); !ok {
		if hostfile.DefaultLastModifiedAt == nil {
			return fmt.Errorf("ent: uninitialized hostfile.DefaultLastModifiedAt (forgotten import ent/runtime?)")
		}
		v := hostfile.DefaultLastModifiedAt()
		hfc.mutation.SetLastModifiedAt(v)
	}
	if _, ok := hfc.mutation.Size(); !ok {
		v := hostfile.DefaultSize
		hfc.mutation.SetSize(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hfc *HostFileCreate) check() error {
	if _, ok := hfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HostFile.created_at"`)}
	}
	if _, ok := hfc.mutation.LastModifiedAt(); !ok {
		return &ValidationError{Name: "last_modified_at", err: errors.New(`ent: missing required field "HostFile.last_modified_at"`)}
	}
	if _, ok := hfc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "HostFile.path"`)}
	}
	if v, ok := hfc.mutation.Path(); ok {
		if err := hostfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "HostFile.path": %w`, err)}
		}
	}
	if _, ok := hfc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "HostFile.size"`)}
	}
	if v, ok := hfc.mutation.Size(); ok {
		if err := hostfile.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "HostFile.size": %w`, err)}
		}
	}
	if v, ok := hfc.mutation.Hash(); ok {
		if err := hostfile.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "HostFile.hash": %w`, err)}
		}
	}
	if _, ok := hfc.mutation.HostID(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required edge "HostFile.host"`)}
	}
	if _, ok := hfc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "HostFile.task"`)}
	}
	return nil
}

func (hfc *HostFileCreate) sqlSave(ctx context.Context) (*HostFile, error) {
	if err := hfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hfc.mutation.id = &_node.ID
	hfc.mutation.done = true
	return _node, nil
}

func (hfc *HostFileCreate) createSpec() (*HostFile, *sqlgraph.CreateSpec) {
	var (
		_node = &HostFile{config: hfc.config}
		_spec = sqlgraph.NewCreateSpec(hostfile.Table, sqlgraph.NewFieldSpec(hostfile.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hfc.conflict
	if value, ok := hfc.mutation.CreatedAt(); ok {
		_spec.SetField(hostfile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hfc.mutation.LastModifiedAt(); ok {
		_spec.SetField(hostfile.FieldLastModifiedAt, field.TypeTime, value)
		_node.LastModifiedAt = value
	}
	if value, ok := hfc.mutation.Path(); ok {
		_spec.SetField(hostfile.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := hfc.mutation.Owner(); ok {
		_spec.SetField(hostfile.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := hfc.mutation.Group(); ok {
		_spec.SetField(hostfile.FieldGroup, field.TypeString, value)
		_node.Group = value
	}
	if value, ok := hfc.mutation.Permissions(); ok {
		_spec.SetField(hostfile.FieldPermissions, field.TypeString, value)
		_node.Permissions = value
	}
	if value, ok := hfc.mutation.Size(); ok {
		_spec.SetField(hostfile.FieldSize, field.TypeUint64, value)
		_node.Size = value
	}
	if value, ok := hfc.mutation.Hash(); ok {
		_spec.SetField(hostfile.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := hfc.mutation.Content(); ok {
		_spec.SetField(hostfile.FieldContent, field.TypeBytes, value)
		_node.Content = value
	}
	if nodes := hfc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostfile.HostTable,
			Columns: []string{hostfile.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.host_file_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hfc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostfile.TaskTable,
			Columns: []string{hostfile.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_reported_files = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HostFile.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HostFileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hfc *HostFileCreate) OnConflict(opts ...sql.ConflictOption) *HostFileUpsertOne {
	hfc.conflict = opts
	return &HostFileUpsertOne{
		create: hfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HostFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hfc *HostFileCreate) OnConflictColumns(columns ...string) *HostFileUpsertOne {
	hfc.conflict = append(hfc.conflict, sql.ConflictColumns(columns...))
	return &HostFileUpsertOne{
		create: hfc,
	}
}

type (
	// HostFileUpsertOne is the builder for "upsert"-ing
	//  one HostFile node.
	HostFileUpsertOne struct {
		create *HostFileCreate
	}

	// HostFileUpsert is the "OnConflict" setter.
	HostFileUpsert struct {
		*sql.UpdateSet
	}
)

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *HostFileUpsert) SetLastModifiedAt(v time.Time) *HostFileUpsert {
	u.Set(hostfile.FieldLastModifiedAt, v)
	return u
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *HostFileUpsert) UpdateLastModifiedAt() *HostFileUpsert {
	u.SetExcluded(hostfile.FieldLastModifiedAt)
	return u
}

// SetPath sets the "path" field.
func (u *HostFileUpsert) SetPath(v string) *HostFileUpsert {
	u.Set(hostfile.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HostFileUpsert) UpdatePath() *HostFileUpsert {
	u.SetExcluded(hostfile.FieldPath)
	return u
}

// SetOwner sets the "owner" field.
func (u *HostFileUpsert) SetOwner(v string) *HostFileUpsert {
	u.Set(hostfile.FieldOwner, v)
	return u
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *HostFileUpsert) UpdateOwner() *HostFileUpsert {
	u.SetExcluded(hostfile.FieldOwner)
	return u
}

// ClearOwner clears the value of the "owner" field.
func (u *HostFileUpsert) ClearOwner() *HostFileUpsert {
	u.SetNull(hostfile.FieldOwner)
	return u
}

// SetGroup sets the "group" field.
func (u *HostFileUpsert) SetGroup(v string) *HostFileUpsert {
	u.Set(hostfile.FieldGroup, v)
	return u
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *HostFileUpsert) UpdateGroup() *HostFileUpsert {
	u.SetExcluded(hostfile.FieldGroup)
	return u
}

// ClearGroup clears the value of the "group" field.
func (u *HostFileUpsert) ClearGroup() *HostFileUpsert {
	u.SetNull(hostfile.FieldGroup)
	return u
}

// SetPermissions sets the "permissions" field.
func (u *HostFileUpsert) SetPermissions(v string) *HostFileUpsert {
	u.Set(hostfile.FieldPermissions, v)
	return u
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *HostFileUpsert) UpdatePermissions() *HostFileUpsert {
	u.SetExcluded(hostfile.FieldPermissions)
	return u
}

// ClearPermissions clears the value of the "permissions" field.
func (u *HostFileUpsert) ClearPermissions() *HostFileUpsert {
	u.SetNull(hostfile.FieldPermissions)
	return u
}

// SetSize sets the "size" field.
func (u *HostFileUpsert) SetSize(v uint64) *HostFileUpsert {
	u.Set(hostfile.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *HostFileUpsert) UpdateSize() *HostFileUpsert {
	u.SetExcluded(hostfile.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *HostFileUpsert) AddSize(v uint64) *HostFileUpsert {
	u.Add(hostfile.FieldSize, v)
	return u
}

// SetHash sets the "hash" field.
func (u *HostFileUpsert) SetHash(v string) *HostFileUpsert {
	u.Set(hostfile.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *HostFileUpsert) UpdateHash() *HostFileUpsert {
	u.SetExcluded(hostfile.FieldHash)
	return u
}

// ClearHash clears the value of the "hash" field.
func (u *HostFileUpsert) ClearHash() *HostFileUpsert {
	u.SetNull(hostfile.FieldHash)
	return u
}

// SetContent sets the "content" field.
func (u *HostFileUpsert) SetContent(v []byte) *HostFileUpsert {
	u.Set(hostfile.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *HostFileUpsert) UpdateContent() *HostFileUpsert {
	u.SetExcluded(hostfile.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *HostFileUpsert) ClearContent() *HostFileUpsert {
	u.SetNull(hostfile.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HostFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HostFileUpsertOne) UpdateNewValues() *HostFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hostfile.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HostFile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HostFileUpsertOne) Ignore() *HostFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HostFileUpsertOne) DoNothing() *HostFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HostFileCreate.OnConflict
// documentation for more info.
func (u *HostFileUpsertOne) Update(set func(*HostFileUpsert)) *HostFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HostFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *HostFileUpsertOne) SetLastModifiedAt(v time.Time) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *HostFileUpsertOne) UpdateLastModifiedAt() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetPath sets the "path" field.
func (u *HostFileUpsertOne) SetPath(v string) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HostFileUpsertOne) UpdatePath() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdatePath()
	})
}

// SetOwner sets the "owner" field.
func (u *HostFileUpsertOne) SetOwner(v string) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *HostFileUpsertOne) UpdateOwner() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateOwner()
	})
}

// ClearOwner clears the value of the "owner" field.
func (u *HostFileUpsertOne) ClearOwner() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearOwner()
	})
}

// SetGroup sets the "group" field.
func (u *HostFileUpsertOne) SetGroup(v string) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.SetGroup(v)
	})
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *HostFileUpsertOne) UpdateGroup() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateGroup()
	})
}

// ClearGroup clears the value of the "group" field.
func (u *HostFileUpsertOne) ClearGroup() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearGroup()
	})
}

// SetPermissions sets the "permissions" field.
func (u *HostFileUpsertOne) SetPermissions(v string) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *HostFileUpsertOne) UpdatePermissions() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *HostFileUpsertOne) ClearPermissions() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearPermissions()
	})
}

// SetSize sets the "size" field.
func (u *HostFileUpsertOne) SetSize(v uint64) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *HostFileUpsertOne) AddSize(v uint64) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *HostFileUpsertOne) UpdateSize() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateSize()
	})
}

// SetHash sets the "hash" field.
func (u *HostFileUpsertOne) SetHash(v string) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *HostFileUpsertOne) UpdateHash() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateHash()
	})
}

// ClearHash clears the value of the "hash" field.
func (u *HostFileUpsertOne) ClearHash() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearHash()
	})
}

// SetContent sets the "content" field.
func (u *HostFileUpsertOne) SetContent(v []byte) *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *HostFileUpsertOne) UpdateContent() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *HostFileUpsertOne) ClearContent() *HostFileUpsertOne {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearContent()
	})
}

// Exec executes the query.
func (u *HostFileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HostFileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HostFileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HostFileUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HostFileUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HostFileCreateBulk is the builder for creating many HostFile entities in bulk.
type HostFileCreateBulk struct {
	config
	err      error
	builders []*HostFileCreate
	conflict []sql.ConflictOption
}

// Save creates the HostFile entities in the database.
func (hfcb *HostFileCreateBulk) Save(ctx context.Context) ([]*HostFile, error) {
	if hfcb.err != nil {
		return nil, hfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hfcb.builders))
	nodes := make([]*HostFile, len(hfcb.builders))
	mutators := make([]Mutator, len(hfcb.builders))
	for i := range hfcb.builders {
		func(i int, root context.Context) {
			builder := hfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hfcb *HostFileCreateBulk) SaveX(ctx context.Context) []*HostFile {
	v, err := hfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hfcb *HostFileCreateBulk) Exec(ctx context.Context) error {
	_, err := hfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hfcb *HostFileCreateBulk) ExecX(ctx context.Context) {
	if err := hfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HostFile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HostFileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hfcb *HostFileCreateBulk) OnConflict(opts ...sql.ConflictOption) *HostFileUpsertBulk {
	hfcb.conflict = opts
	return &HostFileUpsertBulk{
		create: hfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HostFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hfcb *HostFileCreateBulk) OnConflictColumns(columns ...string) *HostFileUpsertBulk {
	hfcb.conflict = append(hfcb.conflict, sql.ConflictColumns(columns...))
	return &HostFileUpsertBulk{
		create: hfcb,
	}
}

// HostFileUpsertBulk is the builder for "upsert"-ing
// a bulk of HostFile nodes.
type HostFileUpsertBulk struct {
	create *HostFileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HostFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HostFileUpsertBulk) UpdateNewValues() *HostFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hostfile.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HostFile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HostFileUpsertBulk) Ignore() *HostFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HostFileUpsertBulk) DoNothing() *HostFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HostFileCreateBulk.OnConflict
// documentation for more info.
func (u *HostFileUpsertBulk) Update(set func(*HostFileUpsert)) *HostFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HostFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *HostFileUpsertBulk) SetLastModifiedAt(v time.Time) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *HostFileUpsertBulk) UpdateLastModifiedAt() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetPath sets the "path" field.
func (u *HostFileUpsertBulk) SetPath(v string) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HostFileUpsertBulk) UpdatePath() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdatePath()
	})
}

// SetOwner sets the "owner" field.
func (u *HostFileUpsertBulk) SetOwner(v string) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *HostFileUpsertBulk) UpdateOwner() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateOwner()
	})
}

// ClearOwner clears the value of the "owner" field.
func (u *HostFileUpsertBulk) ClearOwner() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearOwner()
	})
}

// SetGroup sets the "group" field.
func (u *HostFileUpsertBulk) SetGroup(v string) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.SetGroup(v)
	})
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *HostFileUpsertBulk) UpdateGroup() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateGroup()
	})
}

// ClearGroup clears the value of the "group" field.
func (u *HostFileUpsertBulk) ClearGroup() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearGroup()
	})
}

// SetPermissions sets the "permissions" field.
func (u *HostFileUpsertBulk) SetPermissions(v string) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *HostFileUpsertBulk) UpdatePermissions() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *HostFileUpsertBulk) ClearPermissions() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearPermissions()
	})
}

// SetSize sets the "size" field.
func (u *HostFileUpsertBulk) SetSize(v uint64) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *HostFileUpsertBulk) AddSize(v uint64) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *HostFileUpsertBulk) UpdateSize() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateSize()
	})
}

// SetHash sets the "hash" field.
func (u *HostFileUpsertBulk) SetHash(v string) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *HostFileUpsertBulk) UpdateHash() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateHash()
	})
}

// ClearHash clears the value of the "hash" field.
func (u *HostFileUpsertBulk) ClearHash() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearHash()
	})
}

// SetContent sets the "content" field.
func (u *HostFileUpsertBulk) SetContent(v []byte) *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *HostFileUpsertBulk) UpdateContent() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *HostFileUpsertBulk) ClearContent() *HostFileUpsertBulk {
	return u.Update(func(s *HostFileUpsert) {
		s.ClearContent()
	})
}

// Exec executes the query.
func (u *HostFileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HostFileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HostFileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HostFileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
