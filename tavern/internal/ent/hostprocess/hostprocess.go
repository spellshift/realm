// Code generated by ent, DO NOT EDIT.

package hostprocess

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"realm.pub/tavern/internal/c2/epb"
)

const (
	// Label holds the string label denoting the hostprocess type in the database.
	Label = "host_process"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastModifiedAt holds the string denoting the last_modified_at field in the database.
	FieldLastModifiedAt = "last_modified_at"
	// FieldPid holds the string denoting the pid field in the database.
	FieldPid = "pid"
	// FieldPpid holds the string denoting the ppid field in the database.
	FieldPpid = "ppid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrincipal holds the string denoting the principal field in the database.
	FieldPrincipal = "principal"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldCmd holds the string denoting the cmd field in the database.
	FieldCmd = "cmd"
	// FieldEnv holds the string denoting the env field in the database.
	FieldEnv = "env"
	// FieldCwd holds the string denoting the cwd field in the database.
	FieldCwd = "cwd"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the hostprocess in the database.
	Table = "host_processes"
	// HostTable is the table that holds the host relation/edge.
	HostTable = "host_processes"
	// HostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostInverseTable = "hosts"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "host_process_host"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "host_processes"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_reported_processes"
)

// Columns holds all SQL columns for hostprocess fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldLastModifiedAt,
	FieldPid,
	FieldPpid,
	FieldName,
	FieldPrincipal,
	FieldPath,
	FieldCmd,
	FieldEnv,
	FieldCwd,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "host_processes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"host_processes",
	"host_process_host",
	"task_reported_processes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastModifiedAt holds the default value on creation for the "last_modified_at" field.
	DefaultLastModifiedAt func() time.Time
	// UpdateDefaultLastModifiedAt holds the default value on update for the "last_modified_at" field.
	UpdateDefaultLastModifiedAt func() time.Time
	// PrincipalValidator is a validator for the "principal" field. It is called by the builders before save.
	PrincipalValidator func(string) error
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s epb.Process_Status) error {
	switch s.String() {
	case "STATUS_IDLE", "STATUS_STOP", "STATUS_ZOMBIE", "STATUS_LOCK_BLOCKED", "STATUS_UNSPECIFIED", "STATUS_PARKED", "STATUS_RUN", "STATUS_DEAD", "STATUS_UNINTERUPTIBLE_DISK_SLEEP", "STATUS_UNKNOWN", "STATUS_SLEEP", "STATUS_TRACING", "STATUS_WAKE_KILL", "STATUS_WAKING":
		return nil
	default:
		return fmt.Errorf("hostprocess: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the HostProcess queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastModifiedAt orders the results by the last_modified_at field.
func ByLastModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastModifiedAt, opts...).ToFunc()
}

// ByPid orders the results by the pid field.
func ByPid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPid, opts...).ToFunc()
}

// ByPpid orders the results by the ppid field.
func ByPpid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPpid, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrincipal orders the results by the principal field.
func ByPrincipal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrincipal, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByCmd orders the results by the cmd field.
func ByCmd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCmd, opts...).ToFunc()
}

// ByEnv orders the results by the env field.
func ByEnv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnv, opts...).ToFunc()
}

// ByCwd orders the results by the cwd field.
func ByCwd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCwd, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByHostField orders the results by host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HostTable, HostColumn),
	)
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}

var (
	// epb.Process_Status must implement graphql.Marshaler.
	_ graphql.Marshaler = (*epb.Process_Status)(nil)
	// epb.Process_Status must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*epb.Process_Status)(nil)
)
