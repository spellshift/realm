// Code generated by ent, DO NOT EDIT.

package hostprocess

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"realm.pub/tavern/internal/c2/epb"
	"realm.pub/tavern/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldCreatedAt, v))
}

// LastModifiedAt applies equality check predicate on the "last_modified_at" field. It's identical to LastModifiedAtEQ.
func LastModifiedAt(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldLastModifiedAt, v))
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldPid, v))
}

// Ppid applies equality check predicate on the "ppid" field. It's identical to PpidEQ.
func Ppid(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldPpid, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldName, v))
}

// Principal applies equality check predicate on the "principal" field. It's identical to PrincipalEQ.
func Principal(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldPrincipal, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldPath, v))
}

// Cmd applies equality check predicate on the "cmd" field. It's identical to CmdEQ.
func Cmd(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldCmd, v))
}

// Env applies equality check predicate on the "env" field. It's identical to EnvEQ.
func Env(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldEnv, v))
}

// Cwd applies equality check predicate on the "cwd" field. It's identical to CwdEQ.
func Cwd(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldCwd, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldCreatedAt, v))
}

// LastModifiedAtEQ applies the EQ predicate on the "last_modified_at" field.
func LastModifiedAtEQ(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldLastModifiedAt, v))
}

// LastModifiedAtNEQ applies the NEQ predicate on the "last_modified_at" field.
func LastModifiedAtNEQ(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldLastModifiedAt, v))
}

// LastModifiedAtIn applies the In predicate on the "last_modified_at" field.
func LastModifiedAtIn(vs ...time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldLastModifiedAt, vs...))
}

// LastModifiedAtNotIn applies the NotIn predicate on the "last_modified_at" field.
func LastModifiedAtNotIn(vs ...time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldLastModifiedAt, vs...))
}

// LastModifiedAtGT applies the GT predicate on the "last_modified_at" field.
func LastModifiedAtGT(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldLastModifiedAt, v))
}

// LastModifiedAtGTE applies the GTE predicate on the "last_modified_at" field.
func LastModifiedAtGTE(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldLastModifiedAt, v))
}

// LastModifiedAtLT applies the LT predicate on the "last_modified_at" field.
func LastModifiedAtLT(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldLastModifiedAt, v))
}

// LastModifiedAtLTE applies the LTE predicate on the "last_modified_at" field.
func LastModifiedAtLTE(v time.Time) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldLastModifiedAt, v))
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldPid, v))
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldPid, v))
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldPid, vs...))
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldPid, vs...))
}

// PidGT applies the GT predicate on the "pid" field.
func PidGT(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldPid, v))
}

// PidGTE applies the GTE predicate on the "pid" field.
func PidGTE(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldPid, v))
}

// PidLT applies the LT predicate on the "pid" field.
func PidLT(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldPid, v))
}

// PidLTE applies the LTE predicate on the "pid" field.
func PidLTE(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldPid, v))
}

// PpidEQ applies the EQ predicate on the "ppid" field.
func PpidEQ(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldPpid, v))
}

// PpidNEQ applies the NEQ predicate on the "ppid" field.
func PpidNEQ(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldPpid, v))
}

// PpidIn applies the In predicate on the "ppid" field.
func PpidIn(vs ...uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldPpid, vs...))
}

// PpidNotIn applies the NotIn predicate on the "ppid" field.
func PpidNotIn(vs ...uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldPpid, vs...))
}

// PpidGT applies the GT predicate on the "ppid" field.
func PpidGT(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldPpid, v))
}

// PpidGTE applies the GTE predicate on the "ppid" field.
func PpidGTE(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldPpid, v))
}

// PpidLT applies the LT predicate on the "ppid" field.
func PpidLT(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldPpid, v))
}

// PpidLTE applies the LTE predicate on the "ppid" field.
func PpidLTE(v uint64) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldPpid, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContainsFold(FieldName, v))
}

// PrincipalEQ applies the EQ predicate on the "principal" field.
func PrincipalEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldPrincipal, v))
}

// PrincipalNEQ applies the NEQ predicate on the "principal" field.
func PrincipalNEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldPrincipal, v))
}

// PrincipalIn applies the In predicate on the "principal" field.
func PrincipalIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldPrincipal, vs...))
}

// PrincipalNotIn applies the NotIn predicate on the "principal" field.
func PrincipalNotIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldPrincipal, vs...))
}

// PrincipalGT applies the GT predicate on the "principal" field.
func PrincipalGT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldPrincipal, v))
}

// PrincipalGTE applies the GTE predicate on the "principal" field.
func PrincipalGTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldPrincipal, v))
}

// PrincipalLT applies the LT predicate on the "principal" field.
func PrincipalLT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldPrincipal, v))
}

// PrincipalLTE applies the LTE predicate on the "principal" field.
func PrincipalLTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldPrincipal, v))
}

// PrincipalContains applies the Contains predicate on the "principal" field.
func PrincipalContains(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContains(FieldPrincipal, v))
}

// PrincipalHasPrefix applies the HasPrefix predicate on the "principal" field.
func PrincipalHasPrefix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasPrefix(FieldPrincipal, v))
}

// PrincipalHasSuffix applies the HasSuffix predicate on the "principal" field.
func PrincipalHasSuffix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasSuffix(FieldPrincipal, v))
}

// PrincipalEqualFold applies the EqualFold predicate on the "principal" field.
func PrincipalEqualFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEqualFold(FieldPrincipal, v))
}

// PrincipalContainsFold applies the ContainsFold predicate on the "principal" field.
func PrincipalContainsFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContainsFold(FieldPrincipal, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasSuffix(FieldPath, v))
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIsNull(FieldPath))
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotNull(FieldPath))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContainsFold(FieldPath, v))
}

// CmdEQ applies the EQ predicate on the "cmd" field.
func CmdEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldCmd, v))
}

// CmdNEQ applies the NEQ predicate on the "cmd" field.
func CmdNEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldCmd, v))
}

// CmdIn applies the In predicate on the "cmd" field.
func CmdIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldCmd, vs...))
}

// CmdNotIn applies the NotIn predicate on the "cmd" field.
func CmdNotIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldCmd, vs...))
}

// CmdGT applies the GT predicate on the "cmd" field.
func CmdGT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldCmd, v))
}

// CmdGTE applies the GTE predicate on the "cmd" field.
func CmdGTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldCmd, v))
}

// CmdLT applies the LT predicate on the "cmd" field.
func CmdLT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldCmd, v))
}

// CmdLTE applies the LTE predicate on the "cmd" field.
func CmdLTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldCmd, v))
}

// CmdContains applies the Contains predicate on the "cmd" field.
func CmdContains(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContains(FieldCmd, v))
}

// CmdHasPrefix applies the HasPrefix predicate on the "cmd" field.
func CmdHasPrefix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasPrefix(FieldCmd, v))
}

// CmdHasSuffix applies the HasSuffix predicate on the "cmd" field.
func CmdHasSuffix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasSuffix(FieldCmd, v))
}

// CmdIsNil applies the IsNil predicate on the "cmd" field.
func CmdIsNil() predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIsNull(FieldCmd))
}

// CmdNotNil applies the NotNil predicate on the "cmd" field.
func CmdNotNil() predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotNull(FieldCmd))
}

// CmdEqualFold applies the EqualFold predicate on the "cmd" field.
func CmdEqualFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEqualFold(FieldCmd, v))
}

// CmdContainsFold applies the ContainsFold predicate on the "cmd" field.
func CmdContainsFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContainsFold(FieldCmd, v))
}

// EnvEQ applies the EQ predicate on the "env" field.
func EnvEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldEnv, v))
}

// EnvNEQ applies the NEQ predicate on the "env" field.
func EnvNEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldEnv, v))
}

// EnvIn applies the In predicate on the "env" field.
func EnvIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldEnv, vs...))
}

// EnvNotIn applies the NotIn predicate on the "env" field.
func EnvNotIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldEnv, vs...))
}

// EnvGT applies the GT predicate on the "env" field.
func EnvGT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldEnv, v))
}

// EnvGTE applies the GTE predicate on the "env" field.
func EnvGTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldEnv, v))
}

// EnvLT applies the LT predicate on the "env" field.
func EnvLT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldEnv, v))
}

// EnvLTE applies the LTE predicate on the "env" field.
func EnvLTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldEnv, v))
}

// EnvContains applies the Contains predicate on the "env" field.
func EnvContains(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContains(FieldEnv, v))
}

// EnvHasPrefix applies the HasPrefix predicate on the "env" field.
func EnvHasPrefix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasPrefix(FieldEnv, v))
}

// EnvHasSuffix applies the HasSuffix predicate on the "env" field.
func EnvHasSuffix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasSuffix(FieldEnv, v))
}

// EnvIsNil applies the IsNil predicate on the "env" field.
func EnvIsNil() predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIsNull(FieldEnv))
}

// EnvNotNil applies the NotNil predicate on the "env" field.
func EnvNotNil() predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotNull(FieldEnv))
}

// EnvEqualFold applies the EqualFold predicate on the "env" field.
func EnvEqualFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEqualFold(FieldEnv, v))
}

// EnvContainsFold applies the ContainsFold predicate on the "env" field.
func EnvContainsFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContainsFold(FieldEnv, v))
}

// CwdEQ applies the EQ predicate on the "cwd" field.
func CwdEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldCwd, v))
}

// CwdNEQ applies the NEQ predicate on the "cwd" field.
func CwdNEQ(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldCwd, v))
}

// CwdIn applies the In predicate on the "cwd" field.
func CwdIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldCwd, vs...))
}

// CwdNotIn applies the NotIn predicate on the "cwd" field.
func CwdNotIn(vs ...string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldCwd, vs...))
}

// CwdGT applies the GT predicate on the "cwd" field.
func CwdGT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGT(FieldCwd, v))
}

// CwdGTE applies the GTE predicate on the "cwd" field.
func CwdGTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldGTE(FieldCwd, v))
}

// CwdLT applies the LT predicate on the "cwd" field.
func CwdLT(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLT(FieldCwd, v))
}

// CwdLTE applies the LTE predicate on the "cwd" field.
func CwdLTE(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldLTE(FieldCwd, v))
}

// CwdContains applies the Contains predicate on the "cwd" field.
func CwdContains(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContains(FieldCwd, v))
}

// CwdHasPrefix applies the HasPrefix predicate on the "cwd" field.
func CwdHasPrefix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasPrefix(FieldCwd, v))
}

// CwdHasSuffix applies the HasSuffix predicate on the "cwd" field.
func CwdHasSuffix(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldHasSuffix(FieldCwd, v))
}

// CwdIsNil applies the IsNil predicate on the "cwd" field.
func CwdIsNil() predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIsNull(FieldCwd))
}

// CwdNotNil applies the NotNil predicate on the "cwd" field.
func CwdNotNil() predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotNull(FieldCwd))
}

// CwdEqualFold applies the EqualFold predicate on the "cwd" field.
func CwdEqualFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEqualFold(FieldCwd, v))
}

// CwdContainsFold applies the ContainsFold predicate on the "cwd" field.
func CwdContainsFold(v string) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldContainsFold(FieldCwd, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v epb.Process_Status) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v epb.Process_Status) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...epb.Process_Status) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...epb.Process_Status) predicate.HostProcess {
	return predicate.HostProcess(sql.FieldNotIn(FieldStatus, vs...))
}

// HasHost applies the HasEdge predicate on the "host" edge.
func HasHost() predicate.HostProcess {
	return predicate.HostProcess(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, HostTable, HostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostWith applies the HasEdge predicate on the "host" edge with a given conditions (other predicates).
func HasHostWith(preds ...predicate.Host) predicate.HostProcess {
	return predicate.HostProcess(func(s *sql.Selector) {
		step := newHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.HostProcess {
	return predicate.HostProcess(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.HostProcess {
	return predicate.HostProcess(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HostProcess) predicate.HostProcess {
	return predicate.HostProcess(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HostProcess) predicate.HostProcess {
	return predicate.HostProcess(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HostProcess) predicate.HostProcess {
	return predicate.HostProcess(sql.NotPredicates(p))
}
