// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/c2/epb"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/hostprocess"
	"realm.pub/tavern/internal/ent/task"
)

// HostProcessCreate is the builder for creating a HostProcess entity.
type HostProcessCreate struct {
	config
	mutation *HostProcessMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hpc *HostProcessCreate) SetCreatedAt(t time.Time) *HostProcessCreate {
	hpc.mutation.SetCreatedAt(t)
	return hpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hpc *HostProcessCreate) SetNillableCreatedAt(t *time.Time) *HostProcessCreate {
	if t != nil {
		hpc.SetCreatedAt(*t)
	}
	return hpc
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (hpc *HostProcessCreate) SetLastModifiedAt(t time.Time) *HostProcessCreate {
	hpc.mutation.SetLastModifiedAt(t)
	return hpc
}

// SetNillableLastModifiedAt sets the "last_modified_at" field if the given value is not nil.
func (hpc *HostProcessCreate) SetNillableLastModifiedAt(t *time.Time) *HostProcessCreate {
	if t != nil {
		hpc.SetLastModifiedAt(*t)
	}
	return hpc
}

// SetPid sets the "pid" field.
func (hpc *HostProcessCreate) SetPid(u uint64) *HostProcessCreate {
	hpc.mutation.SetPid(u)
	return hpc
}

// SetPpid sets the "ppid" field.
func (hpc *HostProcessCreate) SetPpid(u uint64) *HostProcessCreate {
	hpc.mutation.SetPpid(u)
	return hpc
}

// SetName sets the "name" field.
func (hpc *HostProcessCreate) SetName(s string) *HostProcessCreate {
	hpc.mutation.SetName(s)
	return hpc
}

// SetPrincipal sets the "principal" field.
func (hpc *HostProcessCreate) SetPrincipal(s string) *HostProcessCreate {
	hpc.mutation.SetPrincipal(s)
	return hpc
}

// SetPath sets the "path" field.
func (hpc *HostProcessCreate) SetPath(s string) *HostProcessCreate {
	hpc.mutation.SetPath(s)
	return hpc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (hpc *HostProcessCreate) SetNillablePath(s *string) *HostProcessCreate {
	if s != nil {
		hpc.SetPath(*s)
	}
	return hpc
}

// SetCmd sets the "cmd" field.
func (hpc *HostProcessCreate) SetCmd(s string) *HostProcessCreate {
	hpc.mutation.SetCmd(s)
	return hpc
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (hpc *HostProcessCreate) SetNillableCmd(s *string) *HostProcessCreate {
	if s != nil {
		hpc.SetCmd(*s)
	}
	return hpc
}

// SetEnv sets the "env" field.
func (hpc *HostProcessCreate) SetEnv(s string) *HostProcessCreate {
	hpc.mutation.SetEnv(s)
	return hpc
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (hpc *HostProcessCreate) SetNillableEnv(s *string) *HostProcessCreate {
	if s != nil {
		hpc.SetEnv(*s)
	}
	return hpc
}

// SetCwd sets the "cwd" field.
func (hpc *HostProcessCreate) SetCwd(s string) *HostProcessCreate {
	hpc.mutation.SetCwd(s)
	return hpc
}

// SetNillableCwd sets the "cwd" field if the given value is not nil.
func (hpc *HostProcessCreate) SetNillableCwd(s *string) *HostProcessCreate {
	if s != nil {
		hpc.SetCwd(*s)
	}
	return hpc
}

// SetStatus sets the "status" field.
func (hpc *HostProcessCreate) SetStatus(es epb.Process_Status) *HostProcessCreate {
	hpc.mutation.SetStatus(es)
	return hpc
}

// SetHostID sets the "host" edge to the Host entity by ID.
func (hpc *HostProcessCreate) SetHostID(id int) *HostProcessCreate {
	hpc.mutation.SetHostID(id)
	return hpc
}

// SetHost sets the "host" edge to the Host entity.
func (hpc *HostProcessCreate) SetHost(h *Host) *HostProcessCreate {
	return hpc.SetHostID(h.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (hpc *HostProcessCreate) SetTaskID(id int) *HostProcessCreate {
	hpc.mutation.SetTaskID(id)
	return hpc
}

// SetTask sets the "task" edge to the Task entity.
func (hpc *HostProcessCreate) SetTask(t *Task) *HostProcessCreate {
	return hpc.SetTaskID(t.ID)
}

// Mutation returns the HostProcessMutation object of the builder.
func (hpc *HostProcessCreate) Mutation() *HostProcessMutation {
	return hpc.mutation
}

// Save creates the HostProcess in the database.
func (hpc *HostProcessCreate) Save(ctx context.Context) (*HostProcess, error) {
	hpc.defaults()
	return withHooks(ctx, hpc.sqlSave, hpc.mutation, hpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hpc *HostProcessCreate) SaveX(ctx context.Context) *HostProcess {
	v, err := hpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hpc *HostProcessCreate) Exec(ctx context.Context) error {
	_, err := hpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpc *HostProcessCreate) ExecX(ctx context.Context) {
	if err := hpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpc *HostProcessCreate) defaults() {
	if _, ok := hpc.mutation.CreatedAt(); !ok {
		v := hostprocess.DefaultCreatedAt()
		hpc.mutation.SetCreatedAt(v)
	}
	if _, ok := hpc.mutation.LastModifiedAt(); !ok {
		v := hostprocess.DefaultLastModifiedAt()
		hpc.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpc *HostProcessCreate) check() error {
	if _, ok := hpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HostProcess.created_at"`)}
	}
	if _, ok := hpc.mutation.LastModifiedAt(); !ok {
		return &ValidationError{Name: "last_modified_at", err: errors.New(`ent: missing required field "HostProcess.last_modified_at"`)}
	}
	if _, ok := hpc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New(`ent: missing required field "HostProcess.pid"`)}
	}
	if _, ok := hpc.mutation.Ppid(); !ok {
		return &ValidationError{Name: "ppid", err: errors.New(`ent: missing required field "HostProcess.ppid"`)}
	}
	if _, ok := hpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "HostProcess.name"`)}
	}
	if _, ok := hpc.mutation.Principal(); !ok {
		return &ValidationError{Name: "principal", err: errors.New(`ent: missing required field "HostProcess.principal"`)}
	}
	if v, ok := hpc.mutation.Principal(); ok {
		if err := hostprocess.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "HostProcess.principal": %w`, err)}
		}
	}
	if _, ok := hpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "HostProcess.status"`)}
	}
	if v, ok := hpc.mutation.Status(); ok {
		if err := hostprocess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HostProcess.status": %w`, err)}
		}
	}
	if _, ok := hpc.mutation.HostID(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required edge "HostProcess.host"`)}
	}
	if _, ok := hpc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "HostProcess.task"`)}
	}
	return nil
}

func (hpc *HostProcessCreate) sqlSave(ctx context.Context) (*HostProcess, error) {
	if err := hpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hpc.mutation.id = &_node.ID
	hpc.mutation.done = true
	return _node, nil
}

func (hpc *HostProcessCreate) createSpec() (*HostProcess, *sqlgraph.CreateSpec) {
	var (
		_node = &HostProcess{config: hpc.config}
		_spec = sqlgraph.NewCreateSpec(hostprocess.Table, sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hpc.conflict
	if value, ok := hpc.mutation.CreatedAt(); ok {
		_spec.SetField(hostprocess.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hpc.mutation.LastModifiedAt(); ok {
		_spec.SetField(hostprocess.FieldLastModifiedAt, field.TypeTime, value)
		_node.LastModifiedAt = value
	}
	if value, ok := hpc.mutation.Pid(); ok {
		_spec.SetField(hostprocess.FieldPid, field.TypeUint64, value)
		_node.Pid = value
	}
	if value, ok := hpc.mutation.Ppid(); ok {
		_spec.SetField(hostprocess.FieldPpid, field.TypeUint64, value)
		_node.Ppid = value
	}
	if value, ok := hpc.mutation.Name(); ok {
		_spec.SetField(hostprocess.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hpc.mutation.Principal(); ok {
		_spec.SetField(hostprocess.FieldPrincipal, field.TypeString, value)
		_node.Principal = value
	}
	if value, ok := hpc.mutation.Path(); ok {
		_spec.SetField(hostprocess.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := hpc.mutation.Cmd(); ok {
		_spec.SetField(hostprocess.FieldCmd, field.TypeString, value)
		_node.Cmd = value
	}
	if value, ok := hpc.mutation.Env(); ok {
		_spec.SetField(hostprocess.FieldEnv, field.TypeString, value)
		_node.Env = value
	}
	if value, ok := hpc.mutation.Cwd(); ok {
		_spec.SetField(hostprocess.FieldCwd, field.TypeString, value)
		_node.Cwd = value
	}
	if value, ok := hpc.mutation.Status(); ok {
		_spec.SetField(hostprocess.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := hpc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostprocess.HostTable,
			Columns: []string{hostprocess.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.host_process_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hpc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostprocess.TaskTable,
			Columns: []string{hostprocess.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_reported_processes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HostProcess.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HostProcessUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hpc *HostProcessCreate) OnConflict(opts ...sql.ConflictOption) *HostProcessUpsertOne {
	hpc.conflict = opts
	return &HostProcessUpsertOne{
		create: hpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HostProcess.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hpc *HostProcessCreate) OnConflictColumns(columns ...string) *HostProcessUpsertOne {
	hpc.conflict = append(hpc.conflict, sql.ConflictColumns(columns...))
	return &HostProcessUpsertOne{
		create: hpc,
	}
}

type (
	// HostProcessUpsertOne is the builder for "upsert"-ing
	//  one HostProcess node.
	HostProcessUpsertOne struct {
		create *HostProcessCreate
	}

	// HostProcessUpsert is the "OnConflict" setter.
	HostProcessUpsert struct {
		*sql.UpdateSet
	}
)

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *HostProcessUpsert) SetLastModifiedAt(v time.Time) *HostProcessUpsert {
	u.Set(hostprocess.FieldLastModifiedAt, v)
	return u
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdateLastModifiedAt() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldLastModifiedAt)
	return u
}

// SetPid sets the "pid" field.
func (u *HostProcessUpsert) SetPid(v uint64) *HostProcessUpsert {
	u.Set(hostprocess.FieldPid, v)
	return u
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdatePid() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldPid)
	return u
}

// AddPid adds v to the "pid" field.
func (u *HostProcessUpsert) AddPid(v uint64) *HostProcessUpsert {
	u.Add(hostprocess.FieldPid, v)
	return u
}

// SetPpid sets the "ppid" field.
func (u *HostProcessUpsert) SetPpid(v uint64) *HostProcessUpsert {
	u.Set(hostprocess.FieldPpid, v)
	return u
}

// UpdatePpid sets the "ppid" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdatePpid() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldPpid)
	return u
}

// AddPpid adds v to the "ppid" field.
func (u *HostProcessUpsert) AddPpid(v uint64) *HostProcessUpsert {
	u.Add(hostprocess.FieldPpid, v)
	return u
}

// SetName sets the "name" field.
func (u *HostProcessUpsert) SetName(v string) *HostProcessUpsert {
	u.Set(hostprocess.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdateName() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldName)
	return u
}

// SetPrincipal sets the "principal" field.
func (u *HostProcessUpsert) SetPrincipal(v string) *HostProcessUpsert {
	u.Set(hostprocess.FieldPrincipal, v)
	return u
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdatePrincipal() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldPrincipal)
	return u
}

// SetPath sets the "path" field.
func (u *HostProcessUpsert) SetPath(v string) *HostProcessUpsert {
	u.Set(hostprocess.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdatePath() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *HostProcessUpsert) ClearPath() *HostProcessUpsert {
	u.SetNull(hostprocess.FieldPath)
	return u
}

// SetCmd sets the "cmd" field.
func (u *HostProcessUpsert) SetCmd(v string) *HostProcessUpsert {
	u.Set(hostprocess.FieldCmd, v)
	return u
}

// UpdateCmd sets the "cmd" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdateCmd() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldCmd)
	return u
}

// ClearCmd clears the value of the "cmd" field.
func (u *HostProcessUpsert) ClearCmd() *HostProcessUpsert {
	u.SetNull(hostprocess.FieldCmd)
	return u
}

// SetEnv sets the "env" field.
func (u *HostProcessUpsert) SetEnv(v string) *HostProcessUpsert {
	u.Set(hostprocess.FieldEnv, v)
	return u
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdateEnv() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldEnv)
	return u
}

// ClearEnv clears the value of the "env" field.
func (u *HostProcessUpsert) ClearEnv() *HostProcessUpsert {
	u.SetNull(hostprocess.FieldEnv)
	return u
}

// SetCwd sets the "cwd" field.
func (u *HostProcessUpsert) SetCwd(v string) *HostProcessUpsert {
	u.Set(hostprocess.FieldCwd, v)
	return u
}

// UpdateCwd sets the "cwd" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdateCwd() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldCwd)
	return u
}

// ClearCwd clears the value of the "cwd" field.
func (u *HostProcessUpsert) ClearCwd() *HostProcessUpsert {
	u.SetNull(hostprocess.FieldCwd)
	return u
}

// SetStatus sets the "status" field.
func (u *HostProcessUpsert) SetStatus(v epb.Process_Status) *HostProcessUpsert {
	u.Set(hostprocess.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HostProcessUpsert) UpdateStatus() *HostProcessUpsert {
	u.SetExcluded(hostprocess.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HostProcess.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HostProcessUpsertOne) UpdateNewValues() *HostProcessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hostprocess.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HostProcess.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HostProcessUpsertOne) Ignore() *HostProcessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HostProcessUpsertOne) DoNothing() *HostProcessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HostProcessCreate.OnConflict
// documentation for more info.
func (u *HostProcessUpsertOne) Update(set func(*HostProcessUpsert)) *HostProcessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HostProcessUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *HostProcessUpsertOne) SetLastModifiedAt(v time.Time) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdateLastModifiedAt() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetPid sets the "pid" field.
func (u *HostProcessUpsertOne) SetPid(v uint64) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetPid(v)
	})
}

// AddPid adds v to the "pid" field.
func (u *HostProcessUpsertOne) AddPid(v uint64) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.AddPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdatePid() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdatePid()
	})
}

// SetPpid sets the "ppid" field.
func (u *HostProcessUpsertOne) SetPpid(v uint64) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetPpid(v)
	})
}

// AddPpid adds v to the "ppid" field.
func (u *HostProcessUpsertOne) AddPpid(v uint64) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.AddPpid(v)
	})
}

// UpdatePpid sets the "ppid" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdatePpid() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdatePpid()
	})
}

// SetName sets the "name" field.
func (u *HostProcessUpsertOne) SetName(v string) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdateName() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateName()
	})
}

// SetPrincipal sets the "principal" field.
func (u *HostProcessUpsertOne) SetPrincipal(v string) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetPrincipal(v)
	})
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdatePrincipal() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdatePrincipal()
	})
}

// SetPath sets the "path" field.
func (u *HostProcessUpsertOne) SetPath(v string) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdatePath() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *HostProcessUpsertOne) ClearPath() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.ClearPath()
	})
}

// SetCmd sets the "cmd" field.
func (u *HostProcessUpsertOne) SetCmd(v string) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetCmd(v)
	})
}

// UpdateCmd sets the "cmd" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdateCmd() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateCmd()
	})
}

// ClearCmd clears the value of the "cmd" field.
func (u *HostProcessUpsertOne) ClearCmd() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.ClearCmd()
	})
}

// SetEnv sets the "env" field.
func (u *HostProcessUpsertOne) SetEnv(v string) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdateEnv() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateEnv()
	})
}

// ClearEnv clears the value of the "env" field.
func (u *HostProcessUpsertOne) ClearEnv() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.ClearEnv()
	})
}

// SetCwd sets the "cwd" field.
func (u *HostProcessUpsertOne) SetCwd(v string) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetCwd(v)
	})
}

// UpdateCwd sets the "cwd" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdateCwd() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateCwd()
	})
}

// ClearCwd clears the value of the "cwd" field.
func (u *HostProcessUpsertOne) ClearCwd() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.ClearCwd()
	})
}

// SetStatus sets the "status" field.
func (u *HostProcessUpsertOne) SetStatus(v epb.Process_Status) *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HostProcessUpsertOne) UpdateStatus() *HostProcessUpsertOne {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *HostProcessUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HostProcessCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HostProcessUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HostProcessUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HostProcessUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HostProcessCreateBulk is the builder for creating many HostProcess entities in bulk.
type HostProcessCreateBulk struct {
	config
	err      error
	builders []*HostProcessCreate
	conflict []sql.ConflictOption
}

// Save creates the HostProcess entities in the database.
func (hpcb *HostProcessCreateBulk) Save(ctx context.Context) ([]*HostProcess, error) {
	if hpcb.err != nil {
		return nil, hpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hpcb.builders))
	nodes := make([]*HostProcess, len(hpcb.builders))
	mutators := make([]Mutator, len(hpcb.builders))
	for i := range hpcb.builders {
		func(i int, root context.Context) {
			builder := hpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostProcessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hpcb *HostProcessCreateBulk) SaveX(ctx context.Context) []*HostProcess {
	v, err := hpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hpcb *HostProcessCreateBulk) Exec(ctx context.Context) error {
	_, err := hpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpcb *HostProcessCreateBulk) ExecX(ctx context.Context) {
	if err := hpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HostProcess.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HostProcessUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hpcb *HostProcessCreateBulk) OnConflict(opts ...sql.ConflictOption) *HostProcessUpsertBulk {
	hpcb.conflict = opts
	return &HostProcessUpsertBulk{
		create: hpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HostProcess.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hpcb *HostProcessCreateBulk) OnConflictColumns(columns ...string) *HostProcessUpsertBulk {
	hpcb.conflict = append(hpcb.conflict, sql.ConflictColumns(columns...))
	return &HostProcessUpsertBulk{
		create: hpcb,
	}
}

// HostProcessUpsertBulk is the builder for "upsert"-ing
// a bulk of HostProcess nodes.
type HostProcessUpsertBulk struct {
	create *HostProcessCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HostProcess.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HostProcessUpsertBulk) UpdateNewValues() *HostProcessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hostprocess.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HostProcess.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HostProcessUpsertBulk) Ignore() *HostProcessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HostProcessUpsertBulk) DoNothing() *HostProcessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HostProcessCreateBulk.OnConflict
// documentation for more info.
func (u *HostProcessUpsertBulk) Update(set func(*HostProcessUpsert)) *HostProcessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HostProcessUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *HostProcessUpsertBulk) SetLastModifiedAt(v time.Time) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdateLastModifiedAt() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetPid sets the "pid" field.
func (u *HostProcessUpsertBulk) SetPid(v uint64) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetPid(v)
	})
}

// AddPid adds v to the "pid" field.
func (u *HostProcessUpsertBulk) AddPid(v uint64) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.AddPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdatePid() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdatePid()
	})
}

// SetPpid sets the "ppid" field.
func (u *HostProcessUpsertBulk) SetPpid(v uint64) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetPpid(v)
	})
}

// AddPpid adds v to the "ppid" field.
func (u *HostProcessUpsertBulk) AddPpid(v uint64) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.AddPpid(v)
	})
}

// UpdatePpid sets the "ppid" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdatePpid() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdatePpid()
	})
}

// SetName sets the "name" field.
func (u *HostProcessUpsertBulk) SetName(v string) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdateName() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateName()
	})
}

// SetPrincipal sets the "principal" field.
func (u *HostProcessUpsertBulk) SetPrincipal(v string) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetPrincipal(v)
	})
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdatePrincipal() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdatePrincipal()
	})
}

// SetPath sets the "path" field.
func (u *HostProcessUpsertBulk) SetPath(v string) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdatePath() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *HostProcessUpsertBulk) ClearPath() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.ClearPath()
	})
}

// SetCmd sets the "cmd" field.
func (u *HostProcessUpsertBulk) SetCmd(v string) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetCmd(v)
	})
}

// UpdateCmd sets the "cmd" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdateCmd() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateCmd()
	})
}

// ClearCmd clears the value of the "cmd" field.
func (u *HostProcessUpsertBulk) ClearCmd() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.ClearCmd()
	})
}

// SetEnv sets the "env" field.
func (u *HostProcessUpsertBulk) SetEnv(v string) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdateEnv() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateEnv()
	})
}

// ClearEnv clears the value of the "env" field.
func (u *HostProcessUpsertBulk) ClearEnv() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.ClearEnv()
	})
}

// SetCwd sets the "cwd" field.
func (u *HostProcessUpsertBulk) SetCwd(v string) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetCwd(v)
	})
}

// UpdateCwd sets the "cwd" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdateCwd() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateCwd()
	})
}

// ClearCwd clears the value of the "cwd" field.
func (u *HostProcessUpsertBulk) ClearCwd() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.ClearCwd()
	})
}

// SetStatus sets the "status" field.
func (u *HostProcessUpsertBulk) SetStatus(v epb.Process_Status) *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HostProcessUpsertBulk) UpdateStatus() *HostProcessUpsertBulk {
	return u.Update(func(s *HostProcessUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *HostProcessUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HostProcessCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HostProcessCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HostProcessUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
