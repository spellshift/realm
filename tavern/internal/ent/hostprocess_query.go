// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/hostprocess"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/task"
)

// HostProcessQuery is the builder for querying HostProcess entities.
type HostProcessQuery struct {
	config
	ctx        *QueryContext
	order      []hostprocess.OrderOption
	inters     []Interceptor
	predicates []predicate.HostProcess
	withHost   *HostQuery
	withTask   *TaskQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*HostProcess) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HostProcessQuery builder.
func (hpq *HostProcessQuery) Where(ps ...predicate.HostProcess) *HostProcessQuery {
	hpq.predicates = append(hpq.predicates, ps...)
	return hpq
}

// Limit the number of records to be returned by this query.
func (hpq *HostProcessQuery) Limit(limit int) *HostProcessQuery {
	hpq.ctx.Limit = &limit
	return hpq
}

// Offset to start from.
func (hpq *HostProcessQuery) Offset(offset int) *HostProcessQuery {
	hpq.ctx.Offset = &offset
	return hpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hpq *HostProcessQuery) Unique(unique bool) *HostProcessQuery {
	hpq.ctx.Unique = &unique
	return hpq
}

// Order specifies how the records should be ordered.
func (hpq *HostProcessQuery) Order(o ...hostprocess.OrderOption) *HostProcessQuery {
	hpq.order = append(hpq.order, o...)
	return hpq
}

// QueryHost chains the current query on the "host" edge.
func (hpq *HostProcessQuery) QueryHost() *HostQuery {
	query := (&HostClient{config: hpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostprocess.Table, hostprocess.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostprocess.HostTable, hostprocess.HostColumn),
		)
		fromU = sqlgraph.SetNeighbors(hpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTask chains the current query on the "task" edge.
func (hpq *HostProcessQuery) QueryTask() *TaskQuery {
	query := (&TaskClient{config: hpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostprocess.Table, hostprocess.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostprocess.TaskTable, hostprocess.TaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(hpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HostProcess entity from the query.
// Returns a *NotFoundError when no HostProcess was found.
func (hpq *HostProcessQuery) First(ctx context.Context) (*HostProcess, error) {
	nodes, err := hpq.Limit(1).All(setContextOp(ctx, hpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hostprocess.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hpq *HostProcessQuery) FirstX(ctx context.Context) *HostProcess {
	node, err := hpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HostProcess ID from the query.
// Returns a *NotFoundError when no HostProcess ID was found.
func (hpq *HostProcessQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hpq.Limit(1).IDs(setContextOp(ctx, hpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hostprocess.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hpq *HostProcessQuery) FirstIDX(ctx context.Context) int {
	id, err := hpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HostProcess entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HostProcess entity is found.
// Returns a *NotFoundError when no HostProcess entities are found.
func (hpq *HostProcessQuery) Only(ctx context.Context) (*HostProcess, error) {
	nodes, err := hpq.Limit(2).All(setContextOp(ctx, hpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hostprocess.Label}
	default:
		return nil, &NotSingularError{hostprocess.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hpq *HostProcessQuery) OnlyX(ctx context.Context) *HostProcess {
	node, err := hpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HostProcess ID in the query.
// Returns a *NotSingularError when more than one HostProcess ID is found.
// Returns a *NotFoundError when no entities are found.
func (hpq *HostProcessQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hpq.Limit(2).IDs(setContextOp(ctx, hpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hostprocess.Label}
	default:
		err = &NotSingularError{hostprocess.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hpq *HostProcessQuery) OnlyIDX(ctx context.Context) int {
	id, err := hpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HostProcesses.
func (hpq *HostProcessQuery) All(ctx context.Context) ([]*HostProcess, error) {
	ctx = setContextOp(ctx, hpq.ctx, ent.OpQueryAll)
	if err := hpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HostProcess, *HostProcessQuery]()
	return withInterceptors[[]*HostProcess](ctx, hpq, qr, hpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hpq *HostProcessQuery) AllX(ctx context.Context) []*HostProcess {
	nodes, err := hpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HostProcess IDs.
func (hpq *HostProcessQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hpq.ctx.Unique == nil && hpq.path != nil {
		hpq.Unique(true)
	}
	ctx = setContextOp(ctx, hpq.ctx, ent.OpQueryIDs)
	if err = hpq.Select(hostprocess.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hpq *HostProcessQuery) IDsX(ctx context.Context) []int {
	ids, err := hpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hpq *HostProcessQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hpq.ctx, ent.OpQueryCount)
	if err := hpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hpq, querierCount[*HostProcessQuery](), hpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hpq *HostProcessQuery) CountX(ctx context.Context) int {
	count, err := hpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hpq *HostProcessQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hpq.ctx, ent.OpQueryExist)
	switch _, err := hpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hpq *HostProcessQuery) ExistX(ctx context.Context) bool {
	exist, err := hpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HostProcessQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hpq *HostProcessQuery) Clone() *HostProcessQuery {
	if hpq == nil {
		return nil
	}
	return &HostProcessQuery{
		config:     hpq.config,
		ctx:        hpq.ctx.Clone(),
		order:      append([]hostprocess.OrderOption{}, hpq.order...),
		inters:     append([]Interceptor{}, hpq.inters...),
		predicates: append([]predicate.HostProcess{}, hpq.predicates...),
		withHost:   hpq.withHost.Clone(),
		withTask:   hpq.withTask.Clone(),
		// clone intermediate query.
		sql:  hpq.sql.Clone(),
		path: hpq.path,
	}
}

// WithHost tells the query-builder to eager-load the nodes that are connected to
// the "host" edge. The optional arguments are used to configure the query builder of the edge.
func (hpq *HostProcessQuery) WithHost(opts ...func(*HostQuery)) *HostProcessQuery {
	query := (&HostClient{config: hpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hpq.withHost = query
	return hpq
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (hpq *HostProcessQuery) WithTask(opts ...func(*TaskQuery)) *HostProcessQuery {
	query := (&TaskClient{config: hpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hpq.withTask = query
	return hpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HostProcess.Query().
//		GroupBy(hostprocess.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hpq *HostProcessQuery) GroupBy(field string, fields ...string) *HostProcessGroupBy {
	hpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HostProcessGroupBy{build: hpq}
	grbuild.flds = &hpq.ctx.Fields
	grbuild.label = hostprocess.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HostProcess.Query().
//		Select(hostprocess.FieldCreatedAt).
//		Scan(ctx, &v)
func (hpq *HostProcessQuery) Select(fields ...string) *HostProcessSelect {
	hpq.ctx.Fields = append(hpq.ctx.Fields, fields...)
	sbuild := &HostProcessSelect{HostProcessQuery: hpq}
	sbuild.label = hostprocess.Label
	sbuild.flds, sbuild.scan = &hpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HostProcessSelect configured with the given aggregations.
func (hpq *HostProcessQuery) Aggregate(fns ...AggregateFunc) *HostProcessSelect {
	return hpq.Select().Aggregate(fns...)
}

func (hpq *HostProcessQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hpq); err != nil {
				return err
			}
		}
	}
	for _, f := range hpq.ctx.Fields {
		if !hostprocess.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hpq.path != nil {
		prev, err := hpq.path(ctx)
		if err != nil {
			return err
		}
		hpq.sql = prev
	}
	return nil
}

func (hpq *HostProcessQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HostProcess, error) {
	var (
		nodes       = []*HostProcess{}
		withFKs     = hpq.withFKs
		_spec       = hpq.querySpec()
		loadedTypes = [2]bool{
			hpq.withHost != nil,
			hpq.withTask != nil,
		}
	)
	if hpq.withHost != nil || hpq.withTask != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hostprocess.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HostProcess).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HostProcess{config: hpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hpq.modifiers) > 0 {
		_spec.Modifiers = hpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hpq.withHost; query != nil {
		if err := hpq.loadHost(ctx, query, nodes, nil,
			func(n *HostProcess, e *Host) { n.Edges.Host = e }); err != nil {
			return nil, err
		}
	}
	if query := hpq.withTask; query != nil {
		if err := hpq.loadTask(ctx, query, nodes, nil,
			func(n *HostProcess, e *Task) { n.Edges.Task = e }); err != nil {
			return nil, err
		}
	}
	for i := range hpq.loadTotal {
		if err := hpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hpq *HostProcessQuery) loadHost(ctx context.Context, query *HostQuery, nodes []*HostProcess, init func(*HostProcess), assign func(*HostProcess, *Host)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HostProcess)
	for i := range nodes {
		if nodes[i].host_process_host == nil {
			continue
		}
		fk := *nodes[i].host_process_host
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(host.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "host_process_host" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hpq *HostProcessQuery) loadTask(ctx context.Context, query *TaskQuery, nodes []*HostProcess, init func(*HostProcess), assign func(*HostProcess, *Task)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HostProcess)
	for i := range nodes {
		if nodes[i].task_reported_processes == nil {
			continue
		}
		fk := *nodes[i].task_reported_processes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(task.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "task_reported_processes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (hpq *HostProcessQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hpq.querySpec()
	if len(hpq.modifiers) > 0 {
		_spec.Modifiers = hpq.modifiers
	}
	_spec.Node.Columns = hpq.ctx.Fields
	if len(hpq.ctx.Fields) > 0 {
		_spec.Unique = hpq.ctx.Unique != nil && *hpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hpq.driver, _spec)
}

func (hpq *HostProcessQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hostprocess.Table, hostprocess.Columns, sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt))
	_spec.From = hpq.sql
	if unique := hpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hpq.path != nil {
		_spec.Unique = true
	}
	if fields := hpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostprocess.FieldID)
		for i := range fields {
			if fields[i] != hostprocess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hpq *HostProcessQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hpq.driver.Dialect())
	t1 := builder.Table(hostprocess.Table)
	columns := hpq.ctx.Fields
	if len(columns) == 0 {
		columns = hostprocess.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hpq.sql != nil {
		selector = hpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hpq.ctx.Unique != nil && *hpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hpq.predicates {
		p(selector)
	}
	for _, p := range hpq.order {
		p(selector)
	}
	if offset := hpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HostProcessGroupBy is the group-by builder for HostProcess entities.
type HostProcessGroupBy struct {
	selector
	build *HostProcessQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hpgb *HostProcessGroupBy) Aggregate(fns ...AggregateFunc) *HostProcessGroupBy {
	hpgb.fns = append(hpgb.fns, fns...)
	return hpgb
}

// Scan applies the selector query and scans the result into the given value.
func (hpgb *HostProcessGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hpgb.build.ctx, ent.OpQueryGroupBy)
	if err := hpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HostProcessQuery, *HostProcessGroupBy](ctx, hpgb.build, hpgb, hpgb.build.inters, v)
}

func (hpgb *HostProcessGroupBy) sqlScan(ctx context.Context, root *HostProcessQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hpgb.fns))
	for _, fn := range hpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hpgb.flds)+len(hpgb.fns))
		for _, f := range *hpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HostProcessSelect is the builder for selecting fields of HostProcess entities.
type HostProcessSelect struct {
	*HostProcessQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hps *HostProcessSelect) Aggregate(fns ...AggregateFunc) *HostProcessSelect {
	hps.fns = append(hps.fns, fns...)
	return hps
}

// Scan applies the selector query and scans the result into the given value.
func (hps *HostProcessSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hps.ctx, ent.OpQuerySelect)
	if err := hps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HostProcessQuery, *HostProcessSelect](ctx, hps.HostProcessQuery, hps, hps.inters, v)
}

func (hps *HostProcessSelect) sqlScan(ctx context.Context, root *HostProcessQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hps.fns))
	for _, fn := range hps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
