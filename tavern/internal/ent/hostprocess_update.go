// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/c2/epb"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/hostprocess"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/task"
)

// HostProcessUpdate is the builder for updating HostProcess entities.
type HostProcessUpdate struct {
	config
	hooks    []Hook
	mutation *HostProcessMutation
}

// Where appends a list predicates to the HostProcessUpdate builder.
func (hpu *HostProcessUpdate) Where(ps ...predicate.HostProcess) *HostProcessUpdate {
	hpu.mutation.Where(ps...)
	return hpu
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (hpu *HostProcessUpdate) SetLastModifiedAt(t time.Time) *HostProcessUpdate {
	hpu.mutation.SetLastModifiedAt(t)
	return hpu
}

// SetPid sets the "pid" field.
func (hpu *HostProcessUpdate) SetPid(u uint64) *HostProcessUpdate {
	hpu.mutation.ResetPid()
	hpu.mutation.SetPid(u)
	return hpu
}

// AddPid adds u to the "pid" field.
func (hpu *HostProcessUpdate) AddPid(u int64) *HostProcessUpdate {
	hpu.mutation.AddPid(u)
	return hpu
}

// SetPpid sets the "ppid" field.
func (hpu *HostProcessUpdate) SetPpid(u uint64) *HostProcessUpdate {
	hpu.mutation.ResetPpid()
	hpu.mutation.SetPpid(u)
	return hpu
}

// AddPpid adds u to the "ppid" field.
func (hpu *HostProcessUpdate) AddPpid(u int64) *HostProcessUpdate {
	hpu.mutation.AddPpid(u)
	return hpu
}

// SetName sets the "name" field.
func (hpu *HostProcessUpdate) SetName(s string) *HostProcessUpdate {
	hpu.mutation.SetName(s)
	return hpu
}

// SetPrincipal sets the "principal" field.
func (hpu *HostProcessUpdate) SetPrincipal(s string) *HostProcessUpdate {
	hpu.mutation.SetPrincipal(s)
	return hpu
}

// SetPath sets the "path" field.
func (hpu *HostProcessUpdate) SetPath(s string) *HostProcessUpdate {
	hpu.mutation.SetPath(s)
	return hpu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (hpu *HostProcessUpdate) SetNillablePath(s *string) *HostProcessUpdate {
	if s != nil {
		hpu.SetPath(*s)
	}
	return hpu
}

// ClearPath clears the value of the "path" field.
func (hpu *HostProcessUpdate) ClearPath() *HostProcessUpdate {
	hpu.mutation.ClearPath()
	return hpu
}

// SetCmd sets the "cmd" field.
func (hpu *HostProcessUpdate) SetCmd(s string) *HostProcessUpdate {
	hpu.mutation.SetCmd(s)
	return hpu
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (hpu *HostProcessUpdate) SetNillableCmd(s *string) *HostProcessUpdate {
	if s != nil {
		hpu.SetCmd(*s)
	}
	return hpu
}

// ClearCmd clears the value of the "cmd" field.
func (hpu *HostProcessUpdate) ClearCmd() *HostProcessUpdate {
	hpu.mutation.ClearCmd()
	return hpu
}

// SetEnv sets the "env" field.
func (hpu *HostProcessUpdate) SetEnv(s string) *HostProcessUpdate {
	hpu.mutation.SetEnv(s)
	return hpu
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (hpu *HostProcessUpdate) SetNillableEnv(s *string) *HostProcessUpdate {
	if s != nil {
		hpu.SetEnv(*s)
	}
	return hpu
}

// ClearEnv clears the value of the "env" field.
func (hpu *HostProcessUpdate) ClearEnv() *HostProcessUpdate {
	hpu.mutation.ClearEnv()
	return hpu
}

// SetCwd sets the "cwd" field.
func (hpu *HostProcessUpdate) SetCwd(s string) *HostProcessUpdate {
	hpu.mutation.SetCwd(s)
	return hpu
}

// SetNillableCwd sets the "cwd" field if the given value is not nil.
func (hpu *HostProcessUpdate) SetNillableCwd(s *string) *HostProcessUpdate {
	if s != nil {
		hpu.SetCwd(*s)
	}
	return hpu
}

// ClearCwd clears the value of the "cwd" field.
func (hpu *HostProcessUpdate) ClearCwd() *HostProcessUpdate {
	hpu.mutation.ClearCwd()
	return hpu
}

// SetStatus sets the "status" field.
func (hpu *HostProcessUpdate) SetStatus(es epb.Process_Status) *HostProcessUpdate {
	hpu.mutation.SetStatus(es)
	return hpu
}

// SetHostID sets the "host" edge to the Host entity by ID.
func (hpu *HostProcessUpdate) SetHostID(id int) *HostProcessUpdate {
	hpu.mutation.SetHostID(id)
	return hpu
}

// SetHost sets the "host" edge to the Host entity.
func (hpu *HostProcessUpdate) SetHost(h *Host) *HostProcessUpdate {
	return hpu.SetHostID(h.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (hpu *HostProcessUpdate) SetTaskID(id int) *HostProcessUpdate {
	hpu.mutation.SetTaskID(id)
	return hpu
}

// SetTask sets the "task" edge to the Task entity.
func (hpu *HostProcessUpdate) SetTask(t *Task) *HostProcessUpdate {
	return hpu.SetTaskID(t.ID)
}

// Mutation returns the HostProcessMutation object of the builder.
func (hpu *HostProcessUpdate) Mutation() *HostProcessMutation {
	return hpu.mutation
}

// ClearHost clears the "host" edge to the Host entity.
func (hpu *HostProcessUpdate) ClearHost() *HostProcessUpdate {
	hpu.mutation.ClearHost()
	return hpu
}

// ClearTask clears the "task" edge to the Task entity.
func (hpu *HostProcessUpdate) ClearTask() *HostProcessUpdate {
	hpu.mutation.ClearTask()
	return hpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hpu *HostProcessUpdate) Save(ctx context.Context) (int, error) {
	hpu.defaults()
	return withHooks(ctx, hpu.sqlSave, hpu.mutation, hpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hpu *HostProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := hpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hpu *HostProcessUpdate) Exec(ctx context.Context) error {
	_, err := hpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpu *HostProcessUpdate) ExecX(ctx context.Context) {
	if err := hpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpu *HostProcessUpdate) defaults() {
	if _, ok := hpu.mutation.LastModifiedAt(); !ok {
		v := hostprocess.UpdateDefaultLastModifiedAt()
		hpu.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpu *HostProcessUpdate) check() error {
	if v, ok := hpu.mutation.Principal(); ok {
		if err := hostprocess.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "HostProcess.principal": %w`, err)}
		}
	}
	if v, ok := hpu.mutation.Status(); ok {
		if err := hostprocess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HostProcess.status": %w`, err)}
		}
	}
	if _, ok := hpu.mutation.HostID(); hpu.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HostProcess.host"`)
	}
	if _, ok := hpu.mutation.TaskID(); hpu.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HostProcess.task"`)
	}
	return nil
}

func (hpu *HostProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostprocess.Table, hostprocess.Columns, sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt))
	if ps := hpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hpu.mutation.LastModifiedAt(); ok {
		_spec.SetField(hostprocess.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := hpu.mutation.Pid(); ok {
		_spec.SetField(hostprocess.FieldPid, field.TypeUint64, value)
	}
	if value, ok := hpu.mutation.AddedPid(); ok {
		_spec.AddField(hostprocess.FieldPid, field.TypeUint64, value)
	}
	if value, ok := hpu.mutation.Ppid(); ok {
		_spec.SetField(hostprocess.FieldPpid, field.TypeUint64, value)
	}
	if value, ok := hpu.mutation.AddedPpid(); ok {
		_spec.AddField(hostprocess.FieldPpid, field.TypeUint64, value)
	}
	if value, ok := hpu.mutation.Name(); ok {
		_spec.SetField(hostprocess.FieldName, field.TypeString, value)
	}
	if value, ok := hpu.mutation.Principal(); ok {
		_spec.SetField(hostprocess.FieldPrincipal, field.TypeString, value)
	}
	if value, ok := hpu.mutation.Path(); ok {
		_spec.SetField(hostprocess.FieldPath, field.TypeString, value)
	}
	if hpu.mutation.PathCleared() {
		_spec.ClearField(hostprocess.FieldPath, field.TypeString)
	}
	if value, ok := hpu.mutation.Cmd(); ok {
		_spec.SetField(hostprocess.FieldCmd, field.TypeString, value)
	}
	if hpu.mutation.CmdCleared() {
		_spec.ClearField(hostprocess.FieldCmd, field.TypeString)
	}
	if value, ok := hpu.mutation.Env(); ok {
		_spec.SetField(hostprocess.FieldEnv, field.TypeString, value)
	}
	if hpu.mutation.EnvCleared() {
		_spec.ClearField(hostprocess.FieldEnv, field.TypeString)
	}
	if value, ok := hpu.mutation.Cwd(); ok {
		_spec.SetField(hostprocess.FieldCwd, field.TypeString, value)
	}
	if hpu.mutation.CwdCleared() {
		_spec.ClearField(hostprocess.FieldCwd, field.TypeString)
	}
	if value, ok := hpu.mutation.Status(); ok {
		_spec.SetField(hostprocess.FieldStatus, field.TypeEnum, value)
	}
	if hpu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostprocess.HostTable,
			Columns: []string{hostprocess.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hpu.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostprocess.HostTable,
			Columns: []string{hostprocess.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hpu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostprocess.TaskTable,
			Columns: []string{hostprocess.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hpu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostprocess.TaskTable,
			Columns: []string{hostprocess.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hpu.mutation.done = true
	return n, nil
}

// HostProcessUpdateOne is the builder for updating a single HostProcess entity.
type HostProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostProcessMutation
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (hpuo *HostProcessUpdateOne) SetLastModifiedAt(t time.Time) *HostProcessUpdateOne {
	hpuo.mutation.SetLastModifiedAt(t)
	return hpuo
}

// SetPid sets the "pid" field.
func (hpuo *HostProcessUpdateOne) SetPid(u uint64) *HostProcessUpdateOne {
	hpuo.mutation.ResetPid()
	hpuo.mutation.SetPid(u)
	return hpuo
}

// AddPid adds u to the "pid" field.
func (hpuo *HostProcessUpdateOne) AddPid(u int64) *HostProcessUpdateOne {
	hpuo.mutation.AddPid(u)
	return hpuo
}

// SetPpid sets the "ppid" field.
func (hpuo *HostProcessUpdateOne) SetPpid(u uint64) *HostProcessUpdateOne {
	hpuo.mutation.ResetPpid()
	hpuo.mutation.SetPpid(u)
	return hpuo
}

// AddPpid adds u to the "ppid" field.
func (hpuo *HostProcessUpdateOne) AddPpid(u int64) *HostProcessUpdateOne {
	hpuo.mutation.AddPpid(u)
	return hpuo
}

// SetName sets the "name" field.
func (hpuo *HostProcessUpdateOne) SetName(s string) *HostProcessUpdateOne {
	hpuo.mutation.SetName(s)
	return hpuo
}

// SetPrincipal sets the "principal" field.
func (hpuo *HostProcessUpdateOne) SetPrincipal(s string) *HostProcessUpdateOne {
	hpuo.mutation.SetPrincipal(s)
	return hpuo
}

// SetPath sets the "path" field.
func (hpuo *HostProcessUpdateOne) SetPath(s string) *HostProcessUpdateOne {
	hpuo.mutation.SetPath(s)
	return hpuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (hpuo *HostProcessUpdateOne) SetNillablePath(s *string) *HostProcessUpdateOne {
	if s != nil {
		hpuo.SetPath(*s)
	}
	return hpuo
}

// ClearPath clears the value of the "path" field.
func (hpuo *HostProcessUpdateOne) ClearPath() *HostProcessUpdateOne {
	hpuo.mutation.ClearPath()
	return hpuo
}

// SetCmd sets the "cmd" field.
func (hpuo *HostProcessUpdateOne) SetCmd(s string) *HostProcessUpdateOne {
	hpuo.mutation.SetCmd(s)
	return hpuo
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (hpuo *HostProcessUpdateOne) SetNillableCmd(s *string) *HostProcessUpdateOne {
	if s != nil {
		hpuo.SetCmd(*s)
	}
	return hpuo
}

// ClearCmd clears the value of the "cmd" field.
func (hpuo *HostProcessUpdateOne) ClearCmd() *HostProcessUpdateOne {
	hpuo.mutation.ClearCmd()
	return hpuo
}

// SetEnv sets the "env" field.
func (hpuo *HostProcessUpdateOne) SetEnv(s string) *HostProcessUpdateOne {
	hpuo.mutation.SetEnv(s)
	return hpuo
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (hpuo *HostProcessUpdateOne) SetNillableEnv(s *string) *HostProcessUpdateOne {
	if s != nil {
		hpuo.SetEnv(*s)
	}
	return hpuo
}

// ClearEnv clears the value of the "env" field.
func (hpuo *HostProcessUpdateOne) ClearEnv() *HostProcessUpdateOne {
	hpuo.mutation.ClearEnv()
	return hpuo
}

// SetCwd sets the "cwd" field.
func (hpuo *HostProcessUpdateOne) SetCwd(s string) *HostProcessUpdateOne {
	hpuo.mutation.SetCwd(s)
	return hpuo
}

// SetNillableCwd sets the "cwd" field if the given value is not nil.
func (hpuo *HostProcessUpdateOne) SetNillableCwd(s *string) *HostProcessUpdateOne {
	if s != nil {
		hpuo.SetCwd(*s)
	}
	return hpuo
}

// ClearCwd clears the value of the "cwd" field.
func (hpuo *HostProcessUpdateOne) ClearCwd() *HostProcessUpdateOne {
	hpuo.mutation.ClearCwd()
	return hpuo
}

// SetStatus sets the "status" field.
func (hpuo *HostProcessUpdateOne) SetStatus(es epb.Process_Status) *HostProcessUpdateOne {
	hpuo.mutation.SetStatus(es)
	return hpuo
}

// SetHostID sets the "host" edge to the Host entity by ID.
func (hpuo *HostProcessUpdateOne) SetHostID(id int) *HostProcessUpdateOne {
	hpuo.mutation.SetHostID(id)
	return hpuo
}

// SetHost sets the "host" edge to the Host entity.
func (hpuo *HostProcessUpdateOne) SetHost(h *Host) *HostProcessUpdateOne {
	return hpuo.SetHostID(h.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (hpuo *HostProcessUpdateOne) SetTaskID(id int) *HostProcessUpdateOne {
	hpuo.mutation.SetTaskID(id)
	return hpuo
}

// SetTask sets the "task" edge to the Task entity.
func (hpuo *HostProcessUpdateOne) SetTask(t *Task) *HostProcessUpdateOne {
	return hpuo.SetTaskID(t.ID)
}

// Mutation returns the HostProcessMutation object of the builder.
func (hpuo *HostProcessUpdateOne) Mutation() *HostProcessMutation {
	return hpuo.mutation
}

// ClearHost clears the "host" edge to the Host entity.
func (hpuo *HostProcessUpdateOne) ClearHost() *HostProcessUpdateOne {
	hpuo.mutation.ClearHost()
	return hpuo
}

// ClearTask clears the "task" edge to the Task entity.
func (hpuo *HostProcessUpdateOne) ClearTask() *HostProcessUpdateOne {
	hpuo.mutation.ClearTask()
	return hpuo
}

// Where appends a list predicates to the HostProcessUpdate builder.
func (hpuo *HostProcessUpdateOne) Where(ps ...predicate.HostProcess) *HostProcessUpdateOne {
	hpuo.mutation.Where(ps...)
	return hpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hpuo *HostProcessUpdateOne) Select(field string, fields ...string) *HostProcessUpdateOne {
	hpuo.fields = append([]string{field}, fields...)
	return hpuo
}

// Save executes the query and returns the updated HostProcess entity.
func (hpuo *HostProcessUpdateOne) Save(ctx context.Context) (*HostProcess, error) {
	hpuo.defaults()
	return withHooks(ctx, hpuo.sqlSave, hpuo.mutation, hpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hpuo *HostProcessUpdateOne) SaveX(ctx context.Context) *HostProcess {
	node, err := hpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hpuo *HostProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := hpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpuo *HostProcessUpdateOne) ExecX(ctx context.Context) {
	if err := hpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpuo *HostProcessUpdateOne) defaults() {
	if _, ok := hpuo.mutation.LastModifiedAt(); !ok {
		v := hostprocess.UpdateDefaultLastModifiedAt()
		hpuo.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpuo *HostProcessUpdateOne) check() error {
	if v, ok := hpuo.mutation.Principal(); ok {
		if err := hostprocess.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "HostProcess.principal": %w`, err)}
		}
	}
	if v, ok := hpuo.mutation.Status(); ok {
		if err := hostprocess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HostProcess.status": %w`, err)}
		}
	}
	if _, ok := hpuo.mutation.HostID(); hpuo.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HostProcess.host"`)
	}
	if _, ok := hpuo.mutation.TaskID(); hpuo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HostProcess.task"`)
	}
	return nil
}

func (hpuo *HostProcessUpdateOne) sqlSave(ctx context.Context) (_node *HostProcess, err error) {
	if err := hpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostprocess.Table, hostprocess.Columns, sqlgraph.NewFieldSpec(hostprocess.FieldID, field.TypeInt))
	id, ok := hpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostProcess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostprocess.FieldID)
		for _, f := range fields {
			if !hostprocess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostprocess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hpuo.mutation.LastModifiedAt(); ok {
		_spec.SetField(hostprocess.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := hpuo.mutation.Pid(); ok {
		_spec.SetField(hostprocess.FieldPid, field.TypeUint64, value)
	}
	if value, ok := hpuo.mutation.AddedPid(); ok {
		_spec.AddField(hostprocess.FieldPid, field.TypeUint64, value)
	}
	if value, ok := hpuo.mutation.Ppid(); ok {
		_spec.SetField(hostprocess.FieldPpid, field.TypeUint64, value)
	}
	if value, ok := hpuo.mutation.AddedPpid(); ok {
		_spec.AddField(hostprocess.FieldPpid, field.TypeUint64, value)
	}
	if value, ok := hpuo.mutation.Name(); ok {
		_spec.SetField(hostprocess.FieldName, field.TypeString, value)
	}
	if value, ok := hpuo.mutation.Principal(); ok {
		_spec.SetField(hostprocess.FieldPrincipal, field.TypeString, value)
	}
	if value, ok := hpuo.mutation.Path(); ok {
		_spec.SetField(hostprocess.FieldPath, field.TypeString, value)
	}
	if hpuo.mutation.PathCleared() {
		_spec.ClearField(hostprocess.FieldPath, field.TypeString)
	}
	if value, ok := hpuo.mutation.Cmd(); ok {
		_spec.SetField(hostprocess.FieldCmd, field.TypeString, value)
	}
	if hpuo.mutation.CmdCleared() {
		_spec.ClearField(hostprocess.FieldCmd, field.TypeString)
	}
	if value, ok := hpuo.mutation.Env(); ok {
		_spec.SetField(hostprocess.FieldEnv, field.TypeString, value)
	}
	if hpuo.mutation.EnvCleared() {
		_spec.ClearField(hostprocess.FieldEnv, field.TypeString)
	}
	if value, ok := hpuo.mutation.Cwd(); ok {
		_spec.SetField(hostprocess.FieldCwd, field.TypeString, value)
	}
	if hpuo.mutation.CwdCleared() {
		_spec.ClearField(hostprocess.FieldCwd, field.TypeString)
	}
	if value, ok := hpuo.mutation.Status(); ok {
		_spec.SetField(hostprocess.FieldStatus, field.TypeEnum, value)
	}
	if hpuo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostprocess.HostTable,
			Columns: []string{hostprocess.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hpuo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostprocess.HostTable,
			Columns: []string{hostprocess.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hpuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostprocess.TaskTable,
			Columns: []string{hostprocess.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hpuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostprocess.TaskTable,
			Columns: []string{hostprocess.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostProcess{config: hpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hpuo.mutation.done = true
	return _node, nil
}
