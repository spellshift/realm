// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"realm.pub/tavern/internal/ent/beacon"
	"realm.pub/tavern/internal/ent/file"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/quest"
	"realm.pub/tavern/internal/ent/tag"
	"realm.pub/tavern/internal/ent/task"
	"realm.pub/tavern/internal/ent/tome"
	"realm.pub/tavern/internal/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBeacon = "Beacon"
	TypeFile   = "File"
	TypeHost   = "Host"
	TypeQuest  = "Quest"
	TypeTag    = "Tag"
	TypeTask   = "Task"
	TypeTome   = "Tome"
	TypeUser   = "User"
)

// BeaconMutation represents an operation that mutates the Beacon nodes in the graph.
type BeaconMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	principal        *string
	identifier       *string
	agent_identifier *string
	last_seen_at     *time.Time
	interval         *uint64
	addinterval      *int64
	clearedFields    map[string]struct{}
	host             *int
	clearedhost      bool
	tasks            map[int]struct{}
	removedtasks     map[int]struct{}
	clearedtasks     bool
	done             bool
	oldValue         func(context.Context) (*Beacon, error)
	predicates       []predicate.Beacon
}

var _ ent.Mutation = (*BeaconMutation)(nil)

// beaconOption allows management of the mutation configuration using functional options.
type beaconOption func(*BeaconMutation)

// newBeaconMutation creates new mutation for the Beacon entity.
func newBeaconMutation(c config, op Op, opts ...beaconOption) *BeaconMutation {
	m := &BeaconMutation{
		config:        c,
		op:            op,
		typ:           TypeBeacon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBeaconID sets the ID field of the mutation.
func withBeaconID(id int) beaconOption {
	return func(m *BeaconMutation) {
		var (
			err   error
			once  sync.Once
			value *Beacon
		)
		m.oldValue = func(ctx context.Context) (*Beacon, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Beacon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBeacon sets the old Beacon of the mutation.
func withBeacon(node *Beacon) beaconOption {
	return func(m *BeaconMutation) {
		m.oldValue = func(context.Context) (*Beacon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BeaconMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BeaconMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BeaconMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BeaconMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Beacon.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *BeaconMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BeaconMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Beacon entity.
// If the Beacon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BeaconMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BeaconMutation) ResetName() {
	m.name = nil
}

// SetPrincipal sets the "principal" field.
func (m *BeaconMutation) SetPrincipal(s string) {
	m.principal = &s
}

// Principal returns the value of the "principal" field in the mutation.
func (m *BeaconMutation) Principal() (r string, exists bool) {
	v := m.principal
	if v == nil {
		return
	}
	return *v, true
}

// OldPrincipal returns the old "principal" field's value of the Beacon entity.
// If the Beacon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BeaconMutation) OldPrincipal(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrincipal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrincipal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrincipal: %w", err)
	}
	return oldValue.Principal, nil
}

// ClearPrincipal clears the value of the "principal" field.
func (m *BeaconMutation) ClearPrincipal() {
	m.principal = nil
	m.clearedFields[beacon.FieldPrincipal] = struct{}{}
}

// PrincipalCleared returns if the "principal" field was cleared in this mutation.
func (m *BeaconMutation) PrincipalCleared() bool {
	_, ok := m.clearedFields[beacon.FieldPrincipal]
	return ok
}

// ResetPrincipal resets all changes to the "principal" field.
func (m *BeaconMutation) ResetPrincipal() {
	m.principal = nil
	delete(m.clearedFields, beacon.FieldPrincipal)
}

// SetIdentifier sets the "identifier" field.
func (m *BeaconMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *BeaconMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the Beacon entity.
// If the Beacon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BeaconMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *BeaconMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetAgentIdentifier sets the "agent_identifier" field.
func (m *BeaconMutation) SetAgentIdentifier(s string) {
	m.agent_identifier = &s
}

// AgentIdentifier returns the value of the "agent_identifier" field in the mutation.
func (m *BeaconMutation) AgentIdentifier() (r string, exists bool) {
	v := m.agent_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldAgentIdentifier returns the old "agent_identifier" field's value of the Beacon entity.
// If the Beacon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BeaconMutation) OldAgentIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgentIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgentIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgentIdentifier: %w", err)
	}
	return oldValue.AgentIdentifier, nil
}

// ClearAgentIdentifier clears the value of the "agent_identifier" field.
func (m *BeaconMutation) ClearAgentIdentifier() {
	m.agent_identifier = nil
	m.clearedFields[beacon.FieldAgentIdentifier] = struct{}{}
}

// AgentIdentifierCleared returns if the "agent_identifier" field was cleared in this mutation.
func (m *BeaconMutation) AgentIdentifierCleared() bool {
	_, ok := m.clearedFields[beacon.FieldAgentIdentifier]
	return ok
}

// ResetAgentIdentifier resets all changes to the "agent_identifier" field.
func (m *BeaconMutation) ResetAgentIdentifier() {
	m.agent_identifier = nil
	delete(m.clearedFields, beacon.FieldAgentIdentifier)
}

// SetLastSeenAt sets the "last_seen_at" field.
func (m *BeaconMutation) SetLastSeenAt(t time.Time) {
	m.last_seen_at = &t
}

// LastSeenAt returns the value of the "last_seen_at" field in the mutation.
func (m *BeaconMutation) LastSeenAt() (r time.Time, exists bool) {
	v := m.last_seen_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSeenAt returns the old "last_seen_at" field's value of the Beacon entity.
// If the Beacon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BeaconMutation) OldLastSeenAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSeenAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSeenAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSeenAt: %w", err)
	}
	return oldValue.LastSeenAt, nil
}

// ClearLastSeenAt clears the value of the "last_seen_at" field.
func (m *BeaconMutation) ClearLastSeenAt() {
	m.last_seen_at = nil
	m.clearedFields[beacon.FieldLastSeenAt] = struct{}{}
}

// LastSeenAtCleared returns if the "last_seen_at" field was cleared in this mutation.
func (m *BeaconMutation) LastSeenAtCleared() bool {
	_, ok := m.clearedFields[beacon.FieldLastSeenAt]
	return ok
}

// ResetLastSeenAt resets all changes to the "last_seen_at" field.
func (m *BeaconMutation) ResetLastSeenAt() {
	m.last_seen_at = nil
	delete(m.clearedFields, beacon.FieldLastSeenAt)
}

// SetInterval sets the "interval" field.
func (m *BeaconMutation) SetInterval(u uint64) {
	m.interval = &u
	m.addinterval = nil
}

// Interval returns the value of the "interval" field in the mutation.
func (m *BeaconMutation) Interval() (r uint64, exists bool) {
	v := m.interval
	if v == nil {
		return
	}
	return *v, true
}

// OldInterval returns the old "interval" field's value of the Beacon entity.
// If the Beacon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BeaconMutation) OldInterval(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterval: %w", err)
	}
	return oldValue.Interval, nil
}

// AddInterval adds u to the "interval" field.
func (m *BeaconMutation) AddInterval(u int64) {
	if m.addinterval != nil {
		*m.addinterval += u
	} else {
		m.addinterval = &u
	}
}

// AddedInterval returns the value that was added to the "interval" field in this mutation.
func (m *BeaconMutation) AddedInterval() (r int64, exists bool) {
	v := m.addinterval
	if v == nil {
		return
	}
	return *v, true
}

// ClearInterval clears the value of the "interval" field.
func (m *BeaconMutation) ClearInterval() {
	m.interval = nil
	m.addinterval = nil
	m.clearedFields[beacon.FieldInterval] = struct{}{}
}

// IntervalCleared returns if the "interval" field was cleared in this mutation.
func (m *BeaconMutation) IntervalCleared() bool {
	_, ok := m.clearedFields[beacon.FieldInterval]
	return ok
}

// ResetInterval resets all changes to the "interval" field.
func (m *BeaconMutation) ResetInterval() {
	m.interval = nil
	m.addinterval = nil
	delete(m.clearedFields, beacon.FieldInterval)
}

// SetHostID sets the "host" edge to the Host entity by id.
func (m *BeaconMutation) SetHostID(id int) {
	m.host = &id
}

// ClearHost clears the "host" edge to the Host entity.
func (m *BeaconMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the Host entity was cleared.
func (m *BeaconMutation) HostCleared() bool {
	return m.clearedhost
}

// HostID returns the "host" edge ID in the mutation.
func (m *BeaconMutation) HostID() (id int, exists bool) {
	if m.host != nil {
		return *m.host, true
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HostID instead. It exists only for internal usage by the builders.
func (m *BeaconMutation) HostIDs() (ids []int) {
	if id := m.host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *BeaconMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *BeaconMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *BeaconMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *BeaconMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *BeaconMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *BeaconMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *BeaconMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *BeaconMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the BeaconMutation builder.
func (m *BeaconMutation) Where(ps ...predicate.Beacon) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BeaconMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BeaconMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Beacon, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BeaconMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BeaconMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Beacon).
func (m *BeaconMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BeaconMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, beacon.FieldName)
	}
	if m.principal != nil {
		fields = append(fields, beacon.FieldPrincipal)
	}
	if m.identifier != nil {
		fields = append(fields, beacon.FieldIdentifier)
	}
	if m.agent_identifier != nil {
		fields = append(fields, beacon.FieldAgentIdentifier)
	}
	if m.last_seen_at != nil {
		fields = append(fields, beacon.FieldLastSeenAt)
	}
	if m.interval != nil {
		fields = append(fields, beacon.FieldInterval)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BeaconMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case beacon.FieldName:
		return m.Name()
	case beacon.FieldPrincipal:
		return m.Principal()
	case beacon.FieldIdentifier:
		return m.Identifier()
	case beacon.FieldAgentIdentifier:
		return m.AgentIdentifier()
	case beacon.FieldLastSeenAt:
		return m.LastSeenAt()
	case beacon.FieldInterval:
		return m.Interval()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BeaconMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case beacon.FieldName:
		return m.OldName(ctx)
	case beacon.FieldPrincipal:
		return m.OldPrincipal(ctx)
	case beacon.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case beacon.FieldAgentIdentifier:
		return m.OldAgentIdentifier(ctx)
	case beacon.FieldLastSeenAt:
		return m.OldLastSeenAt(ctx)
	case beacon.FieldInterval:
		return m.OldInterval(ctx)
	}
	return nil, fmt.Errorf("unknown Beacon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BeaconMutation) SetField(name string, value ent.Value) error {
	switch name {
	case beacon.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case beacon.FieldPrincipal:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrincipal(v)
		return nil
	case beacon.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case beacon.FieldAgentIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgentIdentifier(v)
		return nil
	case beacon.FieldLastSeenAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSeenAt(v)
		return nil
	case beacon.FieldInterval:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterval(v)
		return nil
	}
	return fmt.Errorf("unknown Beacon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BeaconMutation) AddedFields() []string {
	var fields []string
	if m.addinterval != nil {
		fields = append(fields, beacon.FieldInterval)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BeaconMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case beacon.FieldInterval:
		return m.AddedInterval()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BeaconMutation) AddField(name string, value ent.Value) error {
	switch name {
	case beacon.FieldInterval:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInterval(v)
		return nil
	}
	return fmt.Errorf("unknown Beacon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BeaconMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(beacon.FieldPrincipal) {
		fields = append(fields, beacon.FieldPrincipal)
	}
	if m.FieldCleared(beacon.FieldAgentIdentifier) {
		fields = append(fields, beacon.FieldAgentIdentifier)
	}
	if m.FieldCleared(beacon.FieldLastSeenAt) {
		fields = append(fields, beacon.FieldLastSeenAt)
	}
	if m.FieldCleared(beacon.FieldInterval) {
		fields = append(fields, beacon.FieldInterval)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BeaconMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BeaconMutation) ClearField(name string) error {
	switch name {
	case beacon.FieldPrincipal:
		m.ClearPrincipal()
		return nil
	case beacon.FieldAgentIdentifier:
		m.ClearAgentIdentifier()
		return nil
	case beacon.FieldLastSeenAt:
		m.ClearLastSeenAt()
		return nil
	case beacon.FieldInterval:
		m.ClearInterval()
		return nil
	}
	return fmt.Errorf("unknown Beacon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BeaconMutation) ResetField(name string) error {
	switch name {
	case beacon.FieldName:
		m.ResetName()
		return nil
	case beacon.FieldPrincipal:
		m.ResetPrincipal()
		return nil
	case beacon.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case beacon.FieldAgentIdentifier:
		m.ResetAgentIdentifier()
		return nil
	case beacon.FieldLastSeenAt:
		m.ResetLastSeenAt()
		return nil
	case beacon.FieldInterval:
		m.ResetInterval()
		return nil
	}
	return fmt.Errorf("unknown Beacon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BeaconMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.host != nil {
		edges = append(edges, beacon.EdgeHost)
	}
	if m.tasks != nil {
		edges = append(edges, beacon.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BeaconMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case beacon.EdgeHost:
		if id := m.host; id != nil {
			return []ent.Value{*id}
		}
	case beacon.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BeaconMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtasks != nil {
		edges = append(edges, beacon.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BeaconMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case beacon.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BeaconMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedhost {
		edges = append(edges, beacon.EdgeHost)
	}
	if m.clearedtasks {
		edges = append(edges, beacon.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BeaconMutation) EdgeCleared(name string) bool {
	switch name {
	case beacon.EdgeHost:
		return m.clearedhost
	case beacon.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BeaconMutation) ClearEdge(name string) error {
	switch name {
	case beacon.EdgeHost:
		m.ClearHost()
		return nil
	}
	return fmt.Errorf("unknown Beacon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BeaconMutation) ResetEdge(name string) error {
	switch name {
	case beacon.EdgeHost:
		m.ResetHost()
		return nil
	case beacon.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown Beacon edge %s", name)
}

// FileMutation represents an operation that mutates the File nodes in the graph.
type FileMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	last_modified_at *time.Time
	name             *string
	size             *int
	addsize          *int
	hash             *string
	content          *[]byte
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*File, error)
	predicates       []predicate.File
}

var _ ent.Mutation = (*FileMutation)(nil)

// fileOption allows management of the mutation configuration using functional options.
type fileOption func(*FileMutation)

// newFileMutation creates new mutation for the File entity.
func newFileMutation(c config, op Op, opts ...fileOption) *FileMutation {
	m := &FileMutation{
		config:        c,
		op:            op,
		typ:           TypeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileID sets the ID field of the mutation.
func withFileID(id int) fileOption {
	return func(m *FileMutation) {
		var (
			err   error
			once  sync.Once
			value *File
		)
		m.oldValue = func(ctx context.Context) (*File, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().File.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFile sets the old File of the mutation.
func withFile(node *File) fileOption {
	return func(m *FileMutation) {
		m.oldValue = func(context.Context) (*File, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().File.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (m *FileMutation) SetLastModifiedAt(t time.Time) {
	m.last_modified_at = &t
}

// LastModifiedAt returns the value of the "last_modified_at" field in the mutation.
func (m *FileMutation) LastModifiedAt() (r time.Time, exists bool) {
	v := m.last_modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifiedAt returns the old "last_modified_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldLastModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifiedAt: %w", err)
	}
	return oldValue.LastModifiedAt, nil
}

// ResetLastModifiedAt resets all changes to the "last_modified_at" field.
func (m *FileMutation) ResetLastModifiedAt() {
	m.last_modified_at = nil
}

// SetName sets the "name" field.
func (m *FileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FileMutation) ResetName() {
	m.name = nil
}

// SetSize sets the "size" field.
func (m *FileMutation) SetSize(i int) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FileMutation) Size() (r int, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *FileMutation) AddSize(i int) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FileMutation) AddedSize() (r int, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetHash sets the "hash" field.
func (m *FileMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *FileMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *FileMutation) ResetHash() {
	m.hash = nil
}

// SetContent sets the "content" field.
func (m *FileMutation) SetContent(b []byte) {
	m.content = &b
}

// Content returns the value of the "content" field in the mutation.
func (m *FileMutation) Content() (r []byte, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldContent(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *FileMutation) ResetContent() {
	m.content = nil
}

// Where appends a list predicates to the FileMutation builder.
func (m *FileMutation) Where(ps ...predicate.File) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.File, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (File).
func (m *FileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, file.FieldCreatedAt)
	}
	if m.last_modified_at != nil {
		fields = append(fields, file.FieldLastModifiedAt)
	}
	if m.name != nil {
		fields = append(fields, file.FieldName)
	}
	if m.size != nil {
		fields = append(fields, file.FieldSize)
	}
	if m.hash != nil {
		fields = append(fields, file.FieldHash)
	}
	if m.content != nil {
		fields = append(fields, file.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case file.FieldCreatedAt:
		return m.CreatedAt()
	case file.FieldLastModifiedAt:
		return m.LastModifiedAt()
	case file.FieldName:
		return m.Name()
	case file.FieldSize:
		return m.Size()
	case file.FieldHash:
		return m.Hash()
	case file.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case file.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case file.FieldLastModifiedAt:
		return m.OldLastModifiedAt(ctx)
	case file.FieldName:
		return m.OldName(ctx)
	case file.FieldSize:
		return m.OldSize(ctx)
	case file.FieldHash:
		return m.OldHash(ctx)
	case file.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown File field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case file.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case file.FieldLastModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifiedAt(v)
		return nil
	case file.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case file.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case file.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case file.FieldContent:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, file.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case file.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case file.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown File numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown File nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMutation) ResetField(name string) error {
	switch name {
	case file.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case file.FieldLastModifiedAt:
		m.ResetLastModifiedAt()
		return nil
	case file.FieldName:
		m.ResetName()
		return nil
	case file.FieldSize:
		m.ResetSize()
		return nil
	case file.FieldHash:
		m.ResetHash()
		return nil
	case file.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown File unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown File edge %s", name)
}

// HostMutation represents an operation that mutates the Host nodes in the graph.
type HostMutation struct {
	config
	op             Op
	typ            string
	id             *int
	identifier     *string
	name           *string
	primary_ip     *string
	platform       *host.Platform
	last_seen_at   *time.Time
	clearedFields  map[string]struct{}
	tags           map[int]struct{}
	removedtags    map[int]struct{}
	clearedtags    bool
	beacons        map[int]struct{}
	removedbeacons map[int]struct{}
	clearedbeacons bool
	done           bool
	oldValue       func(context.Context) (*Host, error)
	predicates     []predicate.Host
}

var _ ent.Mutation = (*HostMutation)(nil)

// hostOption allows management of the mutation configuration using functional options.
type hostOption func(*HostMutation)

// newHostMutation creates new mutation for the Host entity.
func newHostMutation(c config, op Op, opts ...hostOption) *HostMutation {
	m := &HostMutation{
		config:        c,
		op:            op,
		typ:           TypeHost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHostID sets the ID field of the mutation.
func withHostID(id int) hostOption {
	return func(m *HostMutation) {
		var (
			err   error
			once  sync.Once
			value *Host
		)
		m.oldValue = func(ctx context.Context) (*Host, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Host.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHost sets the old Host of the mutation.
func withHost(node *Host) hostOption {
	return func(m *HostMutation) {
		m.oldValue = func(context.Context) (*Host, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Host.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdentifier sets the "identifier" field.
func (m *HostMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *HostMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *HostMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetName sets the "name" field.
func (m *HostMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HostMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *HostMutation) ClearName() {
	m.name = nil
	m.clearedFields[host.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *HostMutation) NameCleared() bool {
	_, ok := m.clearedFields[host.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *HostMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, host.FieldName)
}

// SetPrimaryIP sets the "primary_ip" field.
func (m *HostMutation) SetPrimaryIP(s string) {
	m.primary_ip = &s
}

// PrimaryIP returns the value of the "primary_ip" field in the mutation.
func (m *HostMutation) PrimaryIP() (r string, exists bool) {
	v := m.primary_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldPrimaryIP returns the old "primary_ip" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldPrimaryIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrimaryIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrimaryIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrimaryIP: %w", err)
	}
	return oldValue.PrimaryIP, nil
}

// ClearPrimaryIP clears the value of the "primary_ip" field.
func (m *HostMutation) ClearPrimaryIP() {
	m.primary_ip = nil
	m.clearedFields[host.FieldPrimaryIP] = struct{}{}
}

// PrimaryIPCleared returns if the "primary_ip" field was cleared in this mutation.
func (m *HostMutation) PrimaryIPCleared() bool {
	_, ok := m.clearedFields[host.FieldPrimaryIP]
	return ok
}

// ResetPrimaryIP resets all changes to the "primary_ip" field.
func (m *HostMutation) ResetPrimaryIP() {
	m.primary_ip = nil
	delete(m.clearedFields, host.FieldPrimaryIP)
}

// SetPlatform sets the "platform" field.
func (m *HostMutation) SetPlatform(h host.Platform) {
	m.platform = &h
}

// Platform returns the value of the "platform" field in the mutation.
func (m *HostMutation) Platform() (r host.Platform, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldPlatform(ctx context.Context) (v host.Platform, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *HostMutation) ResetPlatform() {
	m.platform = nil
}

// SetLastSeenAt sets the "last_seen_at" field.
func (m *HostMutation) SetLastSeenAt(t time.Time) {
	m.last_seen_at = &t
}

// LastSeenAt returns the value of the "last_seen_at" field in the mutation.
func (m *HostMutation) LastSeenAt() (r time.Time, exists bool) {
	v := m.last_seen_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSeenAt returns the old "last_seen_at" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldLastSeenAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSeenAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSeenAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSeenAt: %w", err)
	}
	return oldValue.LastSeenAt, nil
}

// ClearLastSeenAt clears the value of the "last_seen_at" field.
func (m *HostMutation) ClearLastSeenAt() {
	m.last_seen_at = nil
	m.clearedFields[host.FieldLastSeenAt] = struct{}{}
}

// LastSeenAtCleared returns if the "last_seen_at" field was cleared in this mutation.
func (m *HostMutation) LastSeenAtCleared() bool {
	_, ok := m.clearedFields[host.FieldLastSeenAt]
	return ok
}

// ResetLastSeenAt resets all changes to the "last_seen_at" field.
func (m *HostMutation) ResetLastSeenAt() {
	m.last_seen_at = nil
	delete(m.clearedFields, host.FieldLastSeenAt)
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *HostMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *HostMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *HostMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *HostMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *HostMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *HostMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *HostMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddBeaconIDs adds the "beacons" edge to the Beacon entity by ids.
func (m *HostMutation) AddBeaconIDs(ids ...int) {
	if m.beacons == nil {
		m.beacons = make(map[int]struct{})
	}
	for i := range ids {
		m.beacons[ids[i]] = struct{}{}
	}
}

// ClearBeacons clears the "beacons" edge to the Beacon entity.
func (m *HostMutation) ClearBeacons() {
	m.clearedbeacons = true
}

// BeaconsCleared reports if the "beacons" edge to the Beacon entity was cleared.
func (m *HostMutation) BeaconsCleared() bool {
	return m.clearedbeacons
}

// RemoveBeaconIDs removes the "beacons" edge to the Beacon entity by IDs.
func (m *HostMutation) RemoveBeaconIDs(ids ...int) {
	if m.removedbeacons == nil {
		m.removedbeacons = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.beacons, ids[i])
		m.removedbeacons[ids[i]] = struct{}{}
	}
}

// RemovedBeacons returns the removed IDs of the "beacons" edge to the Beacon entity.
func (m *HostMutation) RemovedBeaconsIDs() (ids []int) {
	for id := range m.removedbeacons {
		ids = append(ids, id)
	}
	return
}

// BeaconsIDs returns the "beacons" edge IDs in the mutation.
func (m *HostMutation) BeaconsIDs() (ids []int) {
	for id := range m.beacons {
		ids = append(ids, id)
	}
	return
}

// ResetBeacons resets all changes to the "beacons" edge.
func (m *HostMutation) ResetBeacons() {
	m.beacons = nil
	m.clearedbeacons = false
	m.removedbeacons = nil
}

// Where appends a list predicates to the HostMutation builder.
func (m *HostMutation) Where(ps ...predicate.Host) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Host, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Host).
func (m *HostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HostMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.identifier != nil {
		fields = append(fields, host.FieldIdentifier)
	}
	if m.name != nil {
		fields = append(fields, host.FieldName)
	}
	if m.primary_ip != nil {
		fields = append(fields, host.FieldPrimaryIP)
	}
	if m.platform != nil {
		fields = append(fields, host.FieldPlatform)
	}
	if m.last_seen_at != nil {
		fields = append(fields, host.FieldLastSeenAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case host.FieldIdentifier:
		return m.Identifier()
	case host.FieldName:
		return m.Name()
	case host.FieldPrimaryIP:
		return m.PrimaryIP()
	case host.FieldPlatform:
		return m.Platform()
	case host.FieldLastSeenAt:
		return m.LastSeenAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case host.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case host.FieldName:
		return m.OldName(ctx)
	case host.FieldPrimaryIP:
		return m.OldPrimaryIP(ctx)
	case host.FieldPlatform:
		return m.OldPlatform(ctx)
	case host.FieldLastSeenAt:
		return m.OldLastSeenAt(ctx)
	}
	return nil, fmt.Errorf("unknown Host field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case host.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case host.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case host.FieldPrimaryIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrimaryIP(v)
		return nil
	case host.FieldPlatform:
		v, ok := value.(host.Platform)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case host.FieldLastSeenAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSeenAt(v)
		return nil
	}
	return fmt.Errorf("unknown Host field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Host numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(host.FieldName) {
		fields = append(fields, host.FieldName)
	}
	if m.FieldCleared(host.FieldPrimaryIP) {
		fields = append(fields, host.FieldPrimaryIP)
	}
	if m.FieldCleared(host.FieldLastSeenAt) {
		fields = append(fields, host.FieldLastSeenAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HostMutation) ClearField(name string) error {
	switch name {
	case host.FieldName:
		m.ClearName()
		return nil
	case host.FieldPrimaryIP:
		m.ClearPrimaryIP()
		return nil
	case host.FieldLastSeenAt:
		m.ClearLastSeenAt()
		return nil
	}
	return fmt.Errorf("unknown Host nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HostMutation) ResetField(name string) error {
	switch name {
	case host.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case host.FieldName:
		m.ResetName()
		return nil
	case host.FieldPrimaryIP:
		m.ResetPrimaryIP()
		return nil
	case host.FieldPlatform:
		m.ResetPlatform()
		return nil
	case host.FieldLastSeenAt:
		m.ResetLastSeenAt()
		return nil
	}
	return fmt.Errorf("unknown Host field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HostMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tags != nil {
		edges = append(edges, host.EdgeTags)
	}
	if m.beacons != nil {
		edges = append(edges, host.EdgeBeacons)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case host.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case host.EdgeBeacons:
		ids := make([]ent.Value, 0, len(m.beacons))
		for id := range m.beacons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtags != nil {
		edges = append(edges, host.EdgeTags)
	}
	if m.removedbeacons != nil {
		edges = append(edges, host.EdgeBeacons)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case host.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case host.EdgeBeacons:
		ids := make([]ent.Value, 0, len(m.removedbeacons))
		for id := range m.removedbeacons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtags {
		edges = append(edges, host.EdgeTags)
	}
	if m.clearedbeacons {
		edges = append(edges, host.EdgeBeacons)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HostMutation) EdgeCleared(name string) bool {
	switch name {
	case host.EdgeTags:
		return m.clearedtags
	case host.EdgeBeacons:
		return m.clearedbeacons
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HostMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Host unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HostMutation) ResetEdge(name string) error {
	switch name {
	case host.EdgeTags:
		m.ResetTags()
		return nil
	case host.EdgeBeacons:
		m.ResetBeacons()
		return nil
	}
	return fmt.Errorf("unknown Host edge %s", name)
}

// QuestMutation represents an operation that mutates the Quest nodes in the graph.
type QuestMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	last_modified_at *time.Time
	name             *string
	parameters       *string
	clearedFields    map[string]struct{}
	tome             *int
	clearedtome      bool
	bundle           *int
	clearedbundle    bool
	tasks            map[int]struct{}
	removedtasks     map[int]struct{}
	clearedtasks     bool
	creator          *int
	clearedcreator   bool
	done             bool
	oldValue         func(context.Context) (*Quest, error)
	predicates       []predicate.Quest
}

var _ ent.Mutation = (*QuestMutation)(nil)

// questOption allows management of the mutation configuration using functional options.
type questOption func(*QuestMutation)

// newQuestMutation creates new mutation for the Quest entity.
func newQuestMutation(c config, op Op, opts ...questOption) *QuestMutation {
	m := &QuestMutation{
		config:        c,
		op:            op,
		typ:           TypeQuest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestID sets the ID field of the mutation.
func withQuestID(id int) questOption {
	return func(m *QuestMutation) {
		var (
			err   error
			once  sync.Once
			value *Quest
		)
		m.oldValue = func(ctx context.Context) (*Quest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Quest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuest sets the old Quest of the mutation.
func withQuest(node *Quest) questOption {
	return func(m *QuestMutation) {
		m.oldValue = func(context.Context) (*Quest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Quest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Quest entity.
// If the Quest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (m *QuestMutation) SetLastModifiedAt(t time.Time) {
	m.last_modified_at = &t
}

// LastModifiedAt returns the value of the "last_modified_at" field in the mutation.
func (m *QuestMutation) LastModifiedAt() (r time.Time, exists bool) {
	v := m.last_modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifiedAt returns the old "last_modified_at" field's value of the Quest entity.
// If the Quest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestMutation) OldLastModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifiedAt: %w", err)
	}
	return oldValue.LastModifiedAt, nil
}

// ResetLastModifiedAt resets all changes to the "last_modified_at" field.
func (m *QuestMutation) ResetLastModifiedAt() {
	m.last_modified_at = nil
}

// SetName sets the "name" field.
func (m *QuestMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *QuestMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Quest entity.
// If the Quest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *QuestMutation) ResetName() {
	m.name = nil
}

// SetParameters sets the "parameters" field.
func (m *QuestMutation) SetParameters(s string) {
	m.parameters = &s
}

// Parameters returns the value of the "parameters" field in the mutation.
func (m *QuestMutation) Parameters() (r string, exists bool) {
	v := m.parameters
	if v == nil {
		return
	}
	return *v, true
}

// OldParameters returns the old "parameters" field's value of the Quest entity.
// If the Quest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestMutation) OldParameters(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParameters is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParameters requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParameters: %w", err)
	}
	return oldValue.Parameters, nil
}

// ClearParameters clears the value of the "parameters" field.
func (m *QuestMutation) ClearParameters() {
	m.parameters = nil
	m.clearedFields[quest.FieldParameters] = struct{}{}
}

// ParametersCleared returns if the "parameters" field was cleared in this mutation.
func (m *QuestMutation) ParametersCleared() bool {
	_, ok := m.clearedFields[quest.FieldParameters]
	return ok
}

// ResetParameters resets all changes to the "parameters" field.
func (m *QuestMutation) ResetParameters() {
	m.parameters = nil
	delete(m.clearedFields, quest.FieldParameters)
}

// SetTomeID sets the "tome" edge to the Tome entity by id.
func (m *QuestMutation) SetTomeID(id int) {
	m.tome = &id
}

// ClearTome clears the "tome" edge to the Tome entity.
func (m *QuestMutation) ClearTome() {
	m.clearedtome = true
}

// TomeCleared reports if the "tome" edge to the Tome entity was cleared.
func (m *QuestMutation) TomeCleared() bool {
	return m.clearedtome
}

// TomeID returns the "tome" edge ID in the mutation.
func (m *QuestMutation) TomeID() (id int, exists bool) {
	if m.tome != nil {
		return *m.tome, true
	}
	return
}

// TomeIDs returns the "tome" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TomeID instead. It exists only for internal usage by the builders.
func (m *QuestMutation) TomeIDs() (ids []int) {
	if id := m.tome; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTome resets all changes to the "tome" edge.
func (m *QuestMutation) ResetTome() {
	m.tome = nil
	m.clearedtome = false
}

// SetBundleID sets the "bundle" edge to the File entity by id.
func (m *QuestMutation) SetBundleID(id int) {
	m.bundle = &id
}

// ClearBundle clears the "bundle" edge to the File entity.
func (m *QuestMutation) ClearBundle() {
	m.clearedbundle = true
}

// BundleCleared reports if the "bundle" edge to the File entity was cleared.
func (m *QuestMutation) BundleCleared() bool {
	return m.clearedbundle
}

// BundleID returns the "bundle" edge ID in the mutation.
func (m *QuestMutation) BundleID() (id int, exists bool) {
	if m.bundle != nil {
		return *m.bundle, true
	}
	return
}

// BundleIDs returns the "bundle" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BundleID instead. It exists only for internal usage by the builders.
func (m *QuestMutation) BundleIDs() (ids []int) {
	if id := m.bundle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBundle resets all changes to the "bundle" edge.
func (m *QuestMutation) ResetBundle() {
	m.bundle = nil
	m.clearedbundle = false
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *QuestMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *QuestMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *QuestMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *QuestMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *QuestMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *QuestMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *QuestMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *QuestMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *QuestMutation) ClearCreator() {
	m.clearedcreator = true
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *QuestMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *QuestMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *QuestMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *QuestMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// Where appends a list predicates to the QuestMutation builder.
func (m *QuestMutation) Where(ps ...predicate.Quest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Quest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Quest).
func (m *QuestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, quest.FieldCreatedAt)
	}
	if m.last_modified_at != nil {
		fields = append(fields, quest.FieldLastModifiedAt)
	}
	if m.name != nil {
		fields = append(fields, quest.FieldName)
	}
	if m.parameters != nil {
		fields = append(fields, quest.FieldParameters)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case quest.FieldCreatedAt:
		return m.CreatedAt()
	case quest.FieldLastModifiedAt:
		return m.LastModifiedAt()
	case quest.FieldName:
		return m.Name()
	case quest.FieldParameters:
		return m.Parameters()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case quest.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case quest.FieldLastModifiedAt:
		return m.OldLastModifiedAt(ctx)
	case quest.FieldName:
		return m.OldName(ctx)
	case quest.FieldParameters:
		return m.OldParameters(ctx)
	}
	return nil, fmt.Errorf("unknown Quest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case quest.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case quest.FieldLastModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifiedAt(v)
		return nil
	case quest.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case quest.FieldParameters:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParameters(v)
		return nil
	}
	return fmt.Errorf("unknown Quest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Quest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(quest.FieldParameters) {
		fields = append(fields, quest.FieldParameters)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestMutation) ClearField(name string) error {
	switch name {
	case quest.FieldParameters:
		m.ClearParameters()
		return nil
	}
	return fmt.Errorf("unknown Quest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestMutation) ResetField(name string) error {
	switch name {
	case quest.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case quest.FieldLastModifiedAt:
		m.ResetLastModifiedAt()
		return nil
	case quest.FieldName:
		m.ResetName()
		return nil
	case quest.FieldParameters:
		m.ResetParameters()
		return nil
	}
	return fmt.Errorf("unknown Quest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.tome != nil {
		edges = append(edges, quest.EdgeTome)
	}
	if m.bundle != nil {
		edges = append(edges, quest.EdgeBundle)
	}
	if m.tasks != nil {
		edges = append(edges, quest.EdgeTasks)
	}
	if m.creator != nil {
		edges = append(edges, quest.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case quest.EdgeTome:
		if id := m.tome; id != nil {
			return []ent.Value{*id}
		}
	case quest.EdgeBundle:
		if id := m.bundle; id != nil {
			return []ent.Value{*id}
		}
	case quest.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	case quest.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtasks != nil {
		edges = append(edges, quest.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case quest.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtome {
		edges = append(edges, quest.EdgeTome)
	}
	if m.clearedbundle {
		edges = append(edges, quest.EdgeBundle)
	}
	if m.clearedtasks {
		edges = append(edges, quest.EdgeTasks)
	}
	if m.clearedcreator {
		edges = append(edges, quest.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestMutation) EdgeCleared(name string) bool {
	switch name {
	case quest.EdgeTome:
		return m.clearedtome
	case quest.EdgeBundle:
		return m.clearedbundle
	case quest.EdgeTasks:
		return m.clearedtasks
	case quest.EdgeCreator:
		return m.clearedcreator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestMutation) ClearEdge(name string) error {
	switch name {
	case quest.EdgeTome:
		m.ClearTome()
		return nil
	case quest.EdgeBundle:
		m.ClearBundle()
		return nil
	case quest.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown Quest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestMutation) ResetEdge(name string) error {
	switch name {
	case quest.EdgeTome:
		m.ResetTome()
		return nil
	case quest.EdgeBundle:
		m.ResetBundle()
		return nil
	case quest.EdgeTasks:
		m.ResetTasks()
		return nil
	case quest.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown Quest edge %s", name)
}

// TagMutation represents an operation that mutates the Tag nodes in the graph.
type TagMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	kind          *tag.Kind
	clearedFields map[string]struct{}
	hosts         map[int]struct{}
	removedhosts  map[int]struct{}
	clearedhosts  bool
	done          bool
	oldValue      func(context.Context) (*Tag, error)
	predicates    []predicate.Tag
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows management of the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for the Tag entity.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the ID field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TagMutation) ResetName() {
	m.name = nil
}

// SetKind sets the "kind" field.
func (m *TagMutation) SetKind(t tag.Kind) {
	m.kind = &t
}

// Kind returns the value of the "kind" field in the mutation.
func (m *TagMutation) Kind() (r tag.Kind, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldKind(ctx context.Context) (v tag.Kind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ResetKind resets all changes to the "kind" field.
func (m *TagMutation) ResetKind() {
	m.kind = nil
}

// AddHostIDs adds the "hosts" edge to the Host entity by ids.
func (m *TagMutation) AddHostIDs(ids ...int) {
	if m.hosts == nil {
		m.hosts = make(map[int]struct{})
	}
	for i := range ids {
		m.hosts[ids[i]] = struct{}{}
	}
}

// ClearHosts clears the "hosts" edge to the Host entity.
func (m *TagMutation) ClearHosts() {
	m.clearedhosts = true
}

// HostsCleared reports if the "hosts" edge to the Host entity was cleared.
func (m *TagMutation) HostsCleared() bool {
	return m.clearedhosts
}

// RemoveHostIDs removes the "hosts" edge to the Host entity by IDs.
func (m *TagMutation) RemoveHostIDs(ids ...int) {
	if m.removedhosts == nil {
		m.removedhosts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.hosts, ids[i])
		m.removedhosts[ids[i]] = struct{}{}
	}
}

// RemovedHosts returns the removed IDs of the "hosts" edge to the Host entity.
func (m *TagMutation) RemovedHostsIDs() (ids []int) {
	for id := range m.removedhosts {
		ids = append(ids, id)
	}
	return
}

// HostsIDs returns the "hosts" edge IDs in the mutation.
func (m *TagMutation) HostsIDs() (ids []int) {
	for id := range m.hosts {
		ids = append(ids, id)
	}
	return
}

// ResetHosts resets all changes to the "hosts" edge.
func (m *TagMutation) ResetHosts() {
	m.hosts = nil
	m.clearedhosts = false
	m.removedhosts = nil
}

// Where appends a list predicates to the TagMutation builder.
func (m *TagMutation) Where(ps ...predicate.Tag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, tag.FieldName)
	}
	if m.kind != nil {
		fields = append(fields, tag.FieldKind)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldName:
		return m.Name()
	case tag.FieldKind:
		return m.Kind()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldName:
		return m.OldName(ctx)
	case tag.FieldKind:
		return m.OldKind(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tag.FieldKind:
		v, ok := value.(tag.Kind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldName:
		m.ResetName()
		return nil
	case tag.FieldKind:
		m.ResetKind()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.hosts != nil {
		edges = append(edges, tag.EdgeHosts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeHosts:
		ids := make([]ent.Value, 0, len(m.hosts))
		for id := range m.hosts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedhosts != nil {
		edges = append(edges, tag.EdgeHosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeHosts:
		ids := make([]ent.Value, 0, len(m.removedhosts))
		for id := range m.removedhosts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhosts {
		edges = append(edges, tag.EdgeHosts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeHosts:
		return m.clearedhosts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeHosts:
		m.ResetHosts()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	last_modified_at *time.Time
	claimed_at       *time.Time
	exec_started_at  *time.Time
	exec_finished_at *time.Time
	output           *string
	error            *string
	clearedFields    map[string]struct{}
	quest            *int
	clearedquest     bool
	beacon           *int
	clearedbeacon    bool
	done             bool
	oldValue         func(context.Context) (*Task, error)
	predicates       []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (m *TaskMutation) SetLastModifiedAt(t time.Time) {
	m.last_modified_at = &t
}

// LastModifiedAt returns the value of the "last_modified_at" field in the mutation.
func (m *TaskMutation) LastModifiedAt() (r time.Time, exists bool) {
	v := m.last_modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifiedAt returns the old "last_modified_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldLastModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifiedAt: %w", err)
	}
	return oldValue.LastModifiedAt, nil
}

// ResetLastModifiedAt resets all changes to the "last_modified_at" field.
func (m *TaskMutation) ResetLastModifiedAt() {
	m.last_modified_at = nil
}

// SetClaimedAt sets the "claimed_at" field.
func (m *TaskMutation) SetClaimedAt(t time.Time) {
	m.claimed_at = &t
}

// ClaimedAt returns the value of the "claimed_at" field in the mutation.
func (m *TaskMutation) ClaimedAt() (r time.Time, exists bool) {
	v := m.claimed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimedAt returns the old "claimed_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldClaimedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClaimedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClaimedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClaimedAt: %w", err)
	}
	return oldValue.ClaimedAt, nil
}

// ClearClaimedAt clears the value of the "claimed_at" field.
func (m *TaskMutation) ClearClaimedAt() {
	m.claimed_at = nil
	m.clearedFields[task.FieldClaimedAt] = struct{}{}
}

// ClaimedAtCleared returns if the "claimed_at" field was cleared in this mutation.
func (m *TaskMutation) ClaimedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldClaimedAt]
	return ok
}

// ResetClaimedAt resets all changes to the "claimed_at" field.
func (m *TaskMutation) ResetClaimedAt() {
	m.claimed_at = nil
	delete(m.clearedFields, task.FieldClaimedAt)
}

// SetExecStartedAt sets the "exec_started_at" field.
func (m *TaskMutation) SetExecStartedAt(t time.Time) {
	m.exec_started_at = &t
}

// ExecStartedAt returns the value of the "exec_started_at" field in the mutation.
func (m *TaskMutation) ExecStartedAt() (r time.Time, exists bool) {
	v := m.exec_started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExecStartedAt returns the old "exec_started_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldExecStartedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecStartedAt: %w", err)
	}
	return oldValue.ExecStartedAt, nil
}

// ClearExecStartedAt clears the value of the "exec_started_at" field.
func (m *TaskMutation) ClearExecStartedAt() {
	m.exec_started_at = nil
	m.clearedFields[task.FieldExecStartedAt] = struct{}{}
}

// ExecStartedAtCleared returns if the "exec_started_at" field was cleared in this mutation.
func (m *TaskMutation) ExecStartedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldExecStartedAt]
	return ok
}

// ResetExecStartedAt resets all changes to the "exec_started_at" field.
func (m *TaskMutation) ResetExecStartedAt() {
	m.exec_started_at = nil
	delete(m.clearedFields, task.FieldExecStartedAt)
}

// SetExecFinishedAt sets the "exec_finished_at" field.
func (m *TaskMutation) SetExecFinishedAt(t time.Time) {
	m.exec_finished_at = &t
}

// ExecFinishedAt returns the value of the "exec_finished_at" field in the mutation.
func (m *TaskMutation) ExecFinishedAt() (r time.Time, exists bool) {
	v := m.exec_finished_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExecFinishedAt returns the old "exec_finished_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldExecFinishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecFinishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecFinishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecFinishedAt: %w", err)
	}
	return oldValue.ExecFinishedAt, nil
}

// ClearExecFinishedAt clears the value of the "exec_finished_at" field.
func (m *TaskMutation) ClearExecFinishedAt() {
	m.exec_finished_at = nil
	m.clearedFields[task.FieldExecFinishedAt] = struct{}{}
}

// ExecFinishedAtCleared returns if the "exec_finished_at" field was cleared in this mutation.
func (m *TaskMutation) ExecFinishedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldExecFinishedAt]
	return ok
}

// ResetExecFinishedAt resets all changes to the "exec_finished_at" field.
func (m *TaskMutation) ResetExecFinishedAt() {
	m.exec_finished_at = nil
	delete(m.clearedFields, task.FieldExecFinishedAt)
}

// SetOutput sets the "output" field.
func (m *TaskMutation) SetOutput(s string) {
	m.output = &s
}

// Output returns the value of the "output" field in the mutation.
func (m *TaskMutation) Output() (r string, exists bool) {
	v := m.output
	if v == nil {
		return
	}
	return *v, true
}

// OldOutput returns the old "output" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldOutput(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutput is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutput requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutput: %w", err)
	}
	return oldValue.Output, nil
}

// ClearOutput clears the value of the "output" field.
func (m *TaskMutation) ClearOutput() {
	m.output = nil
	m.clearedFields[task.FieldOutput] = struct{}{}
}

// OutputCleared returns if the "output" field was cleared in this mutation.
func (m *TaskMutation) OutputCleared() bool {
	_, ok := m.clearedFields[task.FieldOutput]
	return ok
}

// ResetOutput resets all changes to the "output" field.
func (m *TaskMutation) ResetOutput() {
	m.output = nil
	delete(m.clearedFields, task.FieldOutput)
}

// SetError sets the "error" field.
func (m *TaskMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *TaskMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ClearError clears the value of the "error" field.
func (m *TaskMutation) ClearError() {
	m.error = nil
	m.clearedFields[task.FieldError] = struct{}{}
}

// ErrorCleared returns if the "error" field was cleared in this mutation.
func (m *TaskMutation) ErrorCleared() bool {
	_, ok := m.clearedFields[task.FieldError]
	return ok
}

// ResetError resets all changes to the "error" field.
func (m *TaskMutation) ResetError() {
	m.error = nil
	delete(m.clearedFields, task.FieldError)
}

// SetQuestID sets the "quest" edge to the Quest entity by id.
func (m *TaskMutation) SetQuestID(id int) {
	m.quest = &id
}

// ClearQuest clears the "quest" edge to the Quest entity.
func (m *TaskMutation) ClearQuest() {
	m.clearedquest = true
}

// QuestCleared reports if the "quest" edge to the Quest entity was cleared.
func (m *TaskMutation) QuestCleared() bool {
	return m.clearedquest
}

// QuestID returns the "quest" edge ID in the mutation.
func (m *TaskMutation) QuestID() (id int, exists bool) {
	if m.quest != nil {
		return *m.quest, true
	}
	return
}

// QuestIDs returns the "quest" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) QuestIDs() (ids []int) {
	if id := m.quest; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuest resets all changes to the "quest" edge.
func (m *TaskMutation) ResetQuest() {
	m.quest = nil
	m.clearedquest = false
}

// SetBeaconID sets the "beacon" edge to the Beacon entity by id.
func (m *TaskMutation) SetBeaconID(id int) {
	m.beacon = &id
}

// ClearBeacon clears the "beacon" edge to the Beacon entity.
func (m *TaskMutation) ClearBeacon() {
	m.clearedbeacon = true
}

// BeaconCleared reports if the "beacon" edge to the Beacon entity was cleared.
func (m *TaskMutation) BeaconCleared() bool {
	return m.clearedbeacon
}

// BeaconID returns the "beacon" edge ID in the mutation.
func (m *TaskMutation) BeaconID() (id int, exists bool) {
	if m.beacon != nil {
		return *m.beacon, true
	}
	return
}

// BeaconIDs returns the "beacon" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BeaconID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) BeaconIDs() (ids []int) {
	if id := m.beacon; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBeacon resets all changes to the "beacon" edge.
func (m *TaskMutation) ResetBeacon() {
	m.beacon = nil
	m.clearedbeacon = false
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.last_modified_at != nil {
		fields = append(fields, task.FieldLastModifiedAt)
	}
	if m.claimed_at != nil {
		fields = append(fields, task.FieldClaimedAt)
	}
	if m.exec_started_at != nil {
		fields = append(fields, task.FieldExecStartedAt)
	}
	if m.exec_finished_at != nil {
		fields = append(fields, task.FieldExecFinishedAt)
	}
	if m.output != nil {
		fields = append(fields, task.FieldOutput)
	}
	if m.error != nil {
		fields = append(fields, task.FieldError)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldLastModifiedAt:
		return m.LastModifiedAt()
	case task.FieldClaimedAt:
		return m.ClaimedAt()
	case task.FieldExecStartedAt:
		return m.ExecStartedAt()
	case task.FieldExecFinishedAt:
		return m.ExecFinishedAt()
	case task.FieldOutput:
		return m.Output()
	case task.FieldError:
		return m.Error()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldLastModifiedAt:
		return m.OldLastModifiedAt(ctx)
	case task.FieldClaimedAt:
		return m.OldClaimedAt(ctx)
	case task.FieldExecStartedAt:
		return m.OldExecStartedAt(ctx)
	case task.FieldExecFinishedAt:
		return m.OldExecFinishedAt(ctx)
	case task.FieldOutput:
		return m.OldOutput(ctx)
	case task.FieldError:
		return m.OldError(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldLastModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifiedAt(v)
		return nil
	case task.FieldClaimedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClaimedAt(v)
		return nil
	case task.FieldExecStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecStartedAt(v)
		return nil
	case task.FieldExecFinishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecFinishedAt(v)
		return nil
	case task.FieldOutput:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutput(v)
		return nil
	case task.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldClaimedAt) {
		fields = append(fields, task.FieldClaimedAt)
	}
	if m.FieldCleared(task.FieldExecStartedAt) {
		fields = append(fields, task.FieldExecStartedAt)
	}
	if m.FieldCleared(task.FieldExecFinishedAt) {
		fields = append(fields, task.FieldExecFinishedAt)
	}
	if m.FieldCleared(task.FieldOutput) {
		fields = append(fields, task.FieldOutput)
	}
	if m.FieldCleared(task.FieldError) {
		fields = append(fields, task.FieldError)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldClaimedAt:
		m.ClearClaimedAt()
		return nil
	case task.FieldExecStartedAt:
		m.ClearExecStartedAt()
		return nil
	case task.FieldExecFinishedAt:
		m.ClearExecFinishedAt()
		return nil
	case task.FieldOutput:
		m.ClearOutput()
		return nil
	case task.FieldError:
		m.ClearError()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldLastModifiedAt:
		m.ResetLastModifiedAt()
		return nil
	case task.FieldClaimedAt:
		m.ResetClaimedAt()
		return nil
	case task.FieldExecStartedAt:
		m.ResetExecStartedAt()
		return nil
	case task.FieldExecFinishedAt:
		m.ResetExecFinishedAt()
		return nil
	case task.FieldOutput:
		m.ResetOutput()
		return nil
	case task.FieldError:
		m.ResetError()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.quest != nil {
		edges = append(edges, task.EdgeQuest)
	}
	if m.beacon != nil {
		edges = append(edges, task.EdgeBeacon)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeQuest:
		if id := m.quest; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeBeacon:
		if id := m.beacon; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedquest {
		edges = append(edges, task.EdgeQuest)
	}
	if m.clearedbeacon {
		edges = append(edges, task.EdgeBeacon)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeQuest:
		return m.clearedquest
	case task.EdgeBeacon:
		return m.clearedbeacon
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeQuest:
		m.ClearQuest()
		return nil
	case task.EdgeBeacon:
		m.ClearBeacon()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeQuest:
		m.ResetQuest()
		return nil
	case task.EdgeBeacon:
		m.ResetBeacon()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// TomeMutation represents an operation that mutates the Tome nodes in the graph.
type TomeMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	last_modified_at *time.Time
	name             *string
	description      *string
	param_defs       *string
	hash             *string
	eldritch         *string
	clearedFields    map[string]struct{}
	files            map[int]struct{}
	removedfiles     map[int]struct{}
	clearedfiles     bool
	done             bool
	oldValue         func(context.Context) (*Tome, error)
	predicates       []predicate.Tome
}

var _ ent.Mutation = (*TomeMutation)(nil)

// tomeOption allows management of the mutation configuration using functional options.
type tomeOption func(*TomeMutation)

// newTomeMutation creates new mutation for the Tome entity.
func newTomeMutation(c config, op Op, opts ...tomeOption) *TomeMutation {
	m := &TomeMutation{
		config:        c,
		op:            op,
		typ:           TypeTome,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTomeID sets the ID field of the mutation.
func withTomeID(id int) tomeOption {
	return func(m *TomeMutation) {
		var (
			err   error
			once  sync.Once
			value *Tome
		)
		m.oldValue = func(ctx context.Context) (*Tome, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tome.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTome sets the old Tome of the mutation.
func withTome(node *Tome) tomeOption {
	return func(m *TomeMutation) {
		m.oldValue = func(context.Context) (*Tome, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TomeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TomeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TomeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TomeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tome.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TomeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TomeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tome entity.
// If the Tome object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TomeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TomeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (m *TomeMutation) SetLastModifiedAt(t time.Time) {
	m.last_modified_at = &t
}

// LastModifiedAt returns the value of the "last_modified_at" field in the mutation.
func (m *TomeMutation) LastModifiedAt() (r time.Time, exists bool) {
	v := m.last_modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifiedAt returns the old "last_modified_at" field's value of the Tome entity.
// If the Tome object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TomeMutation) OldLastModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifiedAt: %w", err)
	}
	return oldValue.LastModifiedAt, nil
}

// ResetLastModifiedAt resets all changes to the "last_modified_at" field.
func (m *TomeMutation) ResetLastModifiedAt() {
	m.last_modified_at = nil
}

// SetName sets the "name" field.
func (m *TomeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TomeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tome entity.
// If the Tome object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TomeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TomeMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *TomeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TomeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Tome entity.
// If the Tome object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TomeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TomeMutation) ResetDescription() {
	m.description = nil
}

// SetParamDefs sets the "param_defs" field.
func (m *TomeMutation) SetParamDefs(s string) {
	m.param_defs = &s
}

// ParamDefs returns the value of the "param_defs" field in the mutation.
func (m *TomeMutation) ParamDefs() (r string, exists bool) {
	v := m.param_defs
	if v == nil {
		return
	}
	return *v, true
}

// OldParamDefs returns the old "param_defs" field's value of the Tome entity.
// If the Tome object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TomeMutation) OldParamDefs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParamDefs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParamDefs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParamDefs: %w", err)
	}
	return oldValue.ParamDefs, nil
}

// ClearParamDefs clears the value of the "param_defs" field.
func (m *TomeMutation) ClearParamDefs() {
	m.param_defs = nil
	m.clearedFields[tome.FieldParamDefs] = struct{}{}
}

// ParamDefsCleared returns if the "param_defs" field was cleared in this mutation.
func (m *TomeMutation) ParamDefsCleared() bool {
	_, ok := m.clearedFields[tome.FieldParamDefs]
	return ok
}

// ResetParamDefs resets all changes to the "param_defs" field.
func (m *TomeMutation) ResetParamDefs() {
	m.param_defs = nil
	delete(m.clearedFields, tome.FieldParamDefs)
}

// SetHash sets the "hash" field.
func (m *TomeMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *TomeMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Tome entity.
// If the Tome object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TomeMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *TomeMutation) ResetHash() {
	m.hash = nil
}

// SetEldritch sets the "eldritch" field.
func (m *TomeMutation) SetEldritch(s string) {
	m.eldritch = &s
}

// Eldritch returns the value of the "eldritch" field in the mutation.
func (m *TomeMutation) Eldritch() (r string, exists bool) {
	v := m.eldritch
	if v == nil {
		return
	}
	return *v, true
}

// OldEldritch returns the old "eldritch" field's value of the Tome entity.
// If the Tome object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TomeMutation) OldEldritch(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEldritch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEldritch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEldritch: %w", err)
	}
	return oldValue.Eldritch, nil
}

// ResetEldritch resets all changes to the "eldritch" field.
func (m *TomeMutation) ResetEldritch() {
	m.eldritch = nil
}

// AddFileIDs adds the "files" edge to the File entity by ids.
func (m *TomeMutation) AddFileIDs(ids ...int) {
	if m.files == nil {
		m.files = make(map[int]struct{})
	}
	for i := range ids {
		m.files[ids[i]] = struct{}{}
	}
}

// ClearFiles clears the "files" edge to the File entity.
func (m *TomeMutation) ClearFiles() {
	m.clearedfiles = true
}

// FilesCleared reports if the "files" edge to the File entity was cleared.
func (m *TomeMutation) FilesCleared() bool {
	return m.clearedfiles
}

// RemoveFileIDs removes the "files" edge to the File entity by IDs.
func (m *TomeMutation) RemoveFileIDs(ids ...int) {
	if m.removedfiles == nil {
		m.removedfiles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.files, ids[i])
		m.removedfiles[ids[i]] = struct{}{}
	}
}

// RemovedFiles returns the removed IDs of the "files" edge to the File entity.
func (m *TomeMutation) RemovedFilesIDs() (ids []int) {
	for id := range m.removedfiles {
		ids = append(ids, id)
	}
	return
}

// FilesIDs returns the "files" edge IDs in the mutation.
func (m *TomeMutation) FilesIDs() (ids []int) {
	for id := range m.files {
		ids = append(ids, id)
	}
	return
}

// ResetFiles resets all changes to the "files" edge.
func (m *TomeMutation) ResetFiles() {
	m.files = nil
	m.clearedfiles = false
	m.removedfiles = nil
}

// Where appends a list predicates to the TomeMutation builder.
func (m *TomeMutation) Where(ps ...predicate.Tome) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TomeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TomeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tome, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TomeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TomeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tome).
func (m *TomeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TomeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, tome.FieldCreatedAt)
	}
	if m.last_modified_at != nil {
		fields = append(fields, tome.FieldLastModifiedAt)
	}
	if m.name != nil {
		fields = append(fields, tome.FieldName)
	}
	if m.description != nil {
		fields = append(fields, tome.FieldDescription)
	}
	if m.param_defs != nil {
		fields = append(fields, tome.FieldParamDefs)
	}
	if m.hash != nil {
		fields = append(fields, tome.FieldHash)
	}
	if m.eldritch != nil {
		fields = append(fields, tome.FieldEldritch)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TomeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tome.FieldCreatedAt:
		return m.CreatedAt()
	case tome.FieldLastModifiedAt:
		return m.LastModifiedAt()
	case tome.FieldName:
		return m.Name()
	case tome.FieldDescription:
		return m.Description()
	case tome.FieldParamDefs:
		return m.ParamDefs()
	case tome.FieldHash:
		return m.Hash()
	case tome.FieldEldritch:
		return m.Eldritch()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TomeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tome.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tome.FieldLastModifiedAt:
		return m.OldLastModifiedAt(ctx)
	case tome.FieldName:
		return m.OldName(ctx)
	case tome.FieldDescription:
		return m.OldDescription(ctx)
	case tome.FieldParamDefs:
		return m.OldParamDefs(ctx)
	case tome.FieldHash:
		return m.OldHash(ctx)
	case tome.FieldEldritch:
		return m.OldEldritch(ctx)
	}
	return nil, fmt.Errorf("unknown Tome field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TomeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tome.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tome.FieldLastModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifiedAt(v)
		return nil
	case tome.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tome.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case tome.FieldParamDefs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParamDefs(v)
		return nil
	case tome.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case tome.FieldEldritch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEldritch(v)
		return nil
	}
	return fmt.Errorf("unknown Tome field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TomeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TomeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TomeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tome numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TomeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tome.FieldParamDefs) {
		fields = append(fields, tome.FieldParamDefs)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TomeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TomeMutation) ClearField(name string) error {
	switch name {
	case tome.FieldParamDefs:
		m.ClearParamDefs()
		return nil
	}
	return fmt.Errorf("unknown Tome nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TomeMutation) ResetField(name string) error {
	switch name {
	case tome.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tome.FieldLastModifiedAt:
		m.ResetLastModifiedAt()
		return nil
	case tome.FieldName:
		m.ResetName()
		return nil
	case tome.FieldDescription:
		m.ResetDescription()
		return nil
	case tome.FieldParamDefs:
		m.ResetParamDefs()
		return nil
	case tome.FieldHash:
		m.ResetHash()
		return nil
	case tome.FieldEldritch:
		m.ResetEldritch()
		return nil
	}
	return fmt.Errorf("unknown Tome field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TomeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.files != nil {
		edges = append(edges, tome.EdgeFiles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TomeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tome.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.files))
		for id := range m.files {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TomeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfiles != nil {
		edges = append(edges, tome.EdgeFiles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TomeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tome.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.removedfiles))
		for id := range m.removedfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TomeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfiles {
		edges = append(edges, tome.EdgeFiles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TomeMutation) EdgeCleared(name string) bool {
	switch name {
	case tome.EdgeFiles:
		return m.clearedfiles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TomeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tome unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TomeMutation) ResetEdge(name string) error {
	switch name {
	case tome.EdgeFiles:
		m.ResetFiles()
		return nil
	}
	return fmt.Errorf("unknown Tome edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	oauth_id      *string
	photo_url     *string
	session_token *string
	is_activated  *bool
	is_admin      *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetOauthID sets the "oauth_id" field.
func (m *UserMutation) SetOauthID(s string) {
	m.oauth_id = &s
}

// OauthID returns the value of the "oauth_id" field in the mutation.
func (m *UserMutation) OauthID() (r string, exists bool) {
	v := m.oauth_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOauthID returns the old "oauth_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOauthID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOauthID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOauthID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOauthID: %w", err)
	}
	return oldValue.OauthID, nil
}

// ResetOauthID resets all changes to the "oauth_id" field.
func (m *UserMutation) ResetOauthID() {
	m.oauth_id = nil
}

// SetPhotoURL sets the "photo_url" field.
func (m *UserMutation) SetPhotoURL(s string) {
	m.photo_url = &s
}

// PhotoURL returns the value of the "photo_url" field in the mutation.
func (m *UserMutation) PhotoURL() (r string, exists bool) {
	v := m.photo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL returns the old "photo_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhotoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL: %w", err)
	}
	return oldValue.PhotoURL, nil
}

// ResetPhotoURL resets all changes to the "photo_url" field.
func (m *UserMutation) ResetPhotoURL() {
	m.photo_url = nil
}

// SetSessionToken sets the "session_token" field.
func (m *UserMutation) SetSessionToken(s string) {
	m.session_token = &s
}

// SessionToken returns the value of the "session_token" field in the mutation.
func (m *UserMutation) SessionToken() (r string, exists bool) {
	v := m.session_token
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionToken returns the old "session_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSessionToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionToken: %w", err)
	}
	return oldValue.SessionToken, nil
}

// ResetSessionToken resets all changes to the "session_token" field.
func (m *UserMutation) ResetSessionToken() {
	m.session_token = nil
}

// SetIsActivated sets the "is_activated" field.
func (m *UserMutation) SetIsActivated(b bool) {
	m.is_activated = &b
}

// IsActivated returns the value of the "is_activated" field in the mutation.
func (m *UserMutation) IsActivated() (r bool, exists bool) {
	v := m.is_activated
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActivated returns the old "is_activated" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsActivated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActivated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActivated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActivated: %w", err)
	}
	return oldValue.IsActivated, nil
}

// ResetIsActivated resets all changes to the "is_activated" field.
func (m *UserMutation) ResetIsActivated() {
	m.is_activated = nil
}

// SetIsAdmin sets the "is_admin" field.
func (m *UserMutation) SetIsAdmin(b bool) {
	m.is_admin = &b
}

// IsAdmin returns the value of the "is_admin" field in the mutation.
func (m *UserMutation) IsAdmin() (r bool, exists bool) {
	v := m.is_admin
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAdmin returns the old "is_admin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAdmin: %w", err)
	}
	return oldValue.IsAdmin, nil
}

// ResetIsAdmin resets all changes to the "is_admin" field.
func (m *UserMutation) ResetIsAdmin() {
	m.is_admin = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.oauth_id != nil {
		fields = append(fields, user.FieldOauthID)
	}
	if m.photo_url != nil {
		fields = append(fields, user.FieldPhotoURL)
	}
	if m.session_token != nil {
		fields = append(fields, user.FieldSessionToken)
	}
	if m.is_activated != nil {
		fields = append(fields, user.FieldIsActivated)
	}
	if m.is_admin != nil {
		fields = append(fields, user.FieldIsAdmin)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldOauthID:
		return m.OauthID()
	case user.FieldPhotoURL:
		return m.PhotoURL()
	case user.FieldSessionToken:
		return m.SessionToken()
	case user.FieldIsActivated:
		return m.IsActivated()
	case user.FieldIsAdmin:
		return m.IsAdmin()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldOauthID:
		return m.OldOauthID(ctx)
	case user.FieldPhotoURL:
		return m.OldPhotoURL(ctx)
	case user.FieldSessionToken:
		return m.OldSessionToken(ctx)
	case user.FieldIsActivated:
		return m.OldIsActivated(ctx)
	case user.FieldIsAdmin:
		return m.OldIsAdmin(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldOauthID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOauthID(v)
		return nil
	case user.FieldPhotoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL(v)
		return nil
	case user.FieldSessionToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionToken(v)
		return nil
	case user.FieldIsActivated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActivated(v)
		return nil
	case user.FieldIsAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAdmin(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldOauthID:
		m.ResetOauthID()
		return nil
	case user.FieldPhotoURL:
		m.ResetPhotoURL()
		return nil
	case user.FieldSessionToken:
		m.ResetSessionToken()
		return nil
	case user.FieldIsActivated:
		m.ResetIsActivated()
		return nil
	case user.FieldIsAdmin:
		m.ResetIsAdmin()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
