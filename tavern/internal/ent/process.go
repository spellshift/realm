// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"realm.pub/tavern/internal/ent/process"
)

// Process is the model entity for the Process schema.
type Process struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ID of the process.
	Pid uint64 `json:"pid,omitempty"`
	// The name of the process.
	Name string `json:"name,omitempty"`
	// The user the process is running as.
	Principal               string `json:"principal,omitempty"`
	task_reported_processes *int
	selectValues            sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Process) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case process.FieldID, process.FieldPid:
			values[i] = new(sql.NullInt64)
		case process.FieldName, process.FieldPrincipal:
			values[i] = new(sql.NullString)
		case process.ForeignKeys[0]: // task_reported_processes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Process fields.
func (pr *Process) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case process.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case process.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				pr.Pid = uint64(value.Int64)
			}
		case process.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case process.FieldPrincipal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field principal", values[i])
			} else if value.Valid {
				pr.Principal = value.String
			}
		case process.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_reported_processes", value)
			} else if value.Valid {
				pr.task_reported_processes = new(int)
				*pr.task_reported_processes = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Process.
// This includes values selected through modifiers, order, etc.
func (pr *Process) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this Process.
// Note that you need to call Process.Unwrap() before calling this method if this Process
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Process) Update() *ProcessUpdateOne {
	return NewProcessClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Process entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Process) Unwrap() *Process {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Process is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Process) String() string {
	var builder strings.Builder
	builder.WriteString("Process(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("pid=")
	builder.WriteString(fmt.Sprintf("%v", pr.Pid))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("principal=")
	builder.WriteString(pr.Principal)
	builder.WriteByte(')')
	return builder.String()
}

// Processes is a parsable slice of Process.
type Processes []*Process
