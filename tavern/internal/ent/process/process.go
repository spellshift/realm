// Code generated by ent, DO NOT EDIT.

package process

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the process type in the database.
	Label = "process"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPid holds the string denoting the pid field in the database.
	FieldPid = "pid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrincipal holds the string denoting the principal field in the database.
	FieldPrincipal = "principal"
	// Table holds the table name of the process in the database.
	Table = "processes"
)

// Columns holds all SQL columns for process fields.
var Columns = []string{
	FieldID,
	FieldPid,
	FieldName,
	FieldPrincipal,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "processes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_reported_processes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PrincipalValidator is a validator for the "principal" field. It is called by the builders before save.
	PrincipalValidator func(string) error
)

// OrderOption defines the ordering options for the Process queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPid orders the results by the pid field.
func ByPid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPid, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrincipal orders the results by the principal field.
func ByPrincipal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrincipal, opts...).ToFunc()
}
