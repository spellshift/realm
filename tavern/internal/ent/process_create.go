// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/process"
	"realm.pub/tavern/internal/ent/task"
)

// ProcessCreate is the builder for creating a Process entity.
type ProcessCreate struct {
	config
	mutation *ProcessMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProcessCreate) SetCreatedAt(t time.Time) *ProcessCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableCreatedAt(t *time.Time) *ProcessCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (pc *ProcessCreate) SetLastModifiedAt(t time.Time) *ProcessCreate {
	pc.mutation.SetLastModifiedAt(t)
	return pc
}

// SetNillableLastModifiedAt sets the "last_modified_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableLastModifiedAt(t *time.Time) *ProcessCreate {
	if t != nil {
		pc.SetLastModifiedAt(*t)
	}
	return pc
}

// SetPid sets the "pid" field.
func (pc *ProcessCreate) SetPid(u uint64) *ProcessCreate {
	pc.mutation.SetPid(u)
	return pc
}

// SetName sets the "name" field.
func (pc *ProcessCreate) SetName(s string) *ProcessCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetPrincipal sets the "principal" field.
func (pc *ProcessCreate) SetPrincipal(s string) *ProcessCreate {
	pc.mutation.SetPrincipal(s)
	return pc
}

// SetHostID sets the "host" edge to the Host entity by ID.
func (pc *ProcessCreate) SetHostID(id int) *ProcessCreate {
	pc.mutation.SetHostID(id)
	return pc
}

// SetHost sets the "host" edge to the Host entity.
func (pc *ProcessCreate) SetHost(h *Host) *ProcessCreate {
	return pc.SetHostID(h.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (pc *ProcessCreate) SetTaskID(id int) *ProcessCreate {
	pc.mutation.SetTaskID(id)
	return pc
}

// SetTask sets the "task" edge to the Task entity.
func (pc *ProcessCreate) SetTask(t *Task) *ProcessCreate {
	return pc.SetTaskID(t.ID)
}

// Mutation returns the ProcessMutation object of the builder.
func (pc *ProcessCreate) Mutation() *ProcessMutation {
	return pc.mutation
}

// Save creates the Process in the database.
func (pc *ProcessCreate) Save(ctx context.Context) (*Process, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcessCreate) SaveX(ctx context.Context) *Process {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcessCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcessCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcessCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := process.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.LastModifiedAt(); !ok {
		v := process.DefaultLastModifiedAt()
		pc.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcessCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Process.created_at"`)}
	}
	if _, ok := pc.mutation.LastModifiedAt(); !ok {
		return &ValidationError{Name: "last_modified_at", err: errors.New(`ent: missing required field "Process.last_modified_at"`)}
	}
	if _, ok := pc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New(`ent: missing required field "Process.pid"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Process.name"`)}
	}
	if _, ok := pc.mutation.Principal(); !ok {
		return &ValidationError{Name: "principal", err: errors.New(`ent: missing required field "Process.principal"`)}
	}
	if v, ok := pc.mutation.Principal(); ok {
		if err := process.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "Process.principal": %w`, err)}
		}
	}
	if _, ok := pc.mutation.HostID(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required edge "Process.host"`)}
	}
	if _, ok := pc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "Process.task"`)}
	}
	return nil
}

func (pc *ProcessCreate) sqlSave(ctx context.Context) (*Process, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProcessCreate) createSpec() (*Process, *sqlgraph.CreateSpec) {
	var (
		_node = &Process{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(process.Table, sqlgraph.NewFieldSpec(process.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(process.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.LastModifiedAt(); ok {
		_spec.SetField(process.FieldLastModifiedAt, field.TypeTime, value)
		_node.LastModifiedAt = value
	}
	if value, ok := pc.mutation.Pid(); ok {
		_spec.SetField(process.FieldPid, field.TypeUint64, value)
		_node.Pid = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(process.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Principal(); ok {
		_spec.SetField(process.FieldPrincipal, field.TypeString, value)
		_node.Principal = value
	}
	if nodes := pc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   process.HostTable,
			Columns: []string{process.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.process_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   process.TaskTable,
			Columns: []string{process.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_reported_processes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Process.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProcessUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProcessCreate) OnConflict(opts ...sql.ConflictOption) *ProcessUpsertOne {
	pc.conflict = opts
	return &ProcessUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Process.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProcessCreate) OnConflictColumns(columns ...string) *ProcessUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProcessUpsertOne{
		create: pc,
	}
}

type (
	// ProcessUpsertOne is the builder for "upsert"-ing
	//  one Process node.
	ProcessUpsertOne struct {
		create *ProcessCreate
	}

	// ProcessUpsert is the "OnConflict" setter.
	ProcessUpsert struct {
		*sql.UpdateSet
	}
)

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *ProcessUpsert) SetLastModifiedAt(v time.Time) *ProcessUpsert {
	u.Set(process.FieldLastModifiedAt, v)
	return u
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *ProcessUpsert) UpdateLastModifiedAt() *ProcessUpsert {
	u.SetExcluded(process.FieldLastModifiedAt)
	return u
}

// SetPid sets the "pid" field.
func (u *ProcessUpsert) SetPid(v uint64) *ProcessUpsert {
	u.Set(process.FieldPid, v)
	return u
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *ProcessUpsert) UpdatePid() *ProcessUpsert {
	u.SetExcluded(process.FieldPid)
	return u
}

// AddPid adds v to the "pid" field.
func (u *ProcessUpsert) AddPid(v uint64) *ProcessUpsert {
	u.Add(process.FieldPid, v)
	return u
}

// SetName sets the "name" field.
func (u *ProcessUpsert) SetName(v string) *ProcessUpsert {
	u.Set(process.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProcessUpsert) UpdateName() *ProcessUpsert {
	u.SetExcluded(process.FieldName)
	return u
}

// SetPrincipal sets the "principal" field.
func (u *ProcessUpsert) SetPrincipal(v string) *ProcessUpsert {
	u.Set(process.FieldPrincipal, v)
	return u
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *ProcessUpsert) UpdatePrincipal() *ProcessUpsert {
	u.SetExcluded(process.FieldPrincipal)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Process.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProcessUpsertOne) UpdateNewValues() *ProcessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(process.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Process.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProcessUpsertOne) Ignore() *ProcessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProcessUpsertOne) DoNothing() *ProcessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProcessCreate.OnConflict
// documentation for more info.
func (u *ProcessUpsertOne) Update(set func(*ProcessUpsert)) *ProcessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProcessUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *ProcessUpsertOne) SetLastModifiedAt(v time.Time) *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *ProcessUpsertOne) UpdateLastModifiedAt() *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetPid sets the "pid" field.
func (u *ProcessUpsertOne) SetPid(v uint64) *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.SetPid(v)
	})
}

// AddPid adds v to the "pid" field.
func (u *ProcessUpsertOne) AddPid(v uint64) *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.AddPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *ProcessUpsertOne) UpdatePid() *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.UpdatePid()
	})
}

// SetName sets the "name" field.
func (u *ProcessUpsertOne) SetName(v string) *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProcessUpsertOne) UpdateName() *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.UpdateName()
	})
}

// SetPrincipal sets the "principal" field.
func (u *ProcessUpsertOne) SetPrincipal(v string) *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.SetPrincipal(v)
	})
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *ProcessUpsertOne) UpdatePrincipal() *ProcessUpsertOne {
	return u.Update(func(s *ProcessUpsert) {
		s.UpdatePrincipal()
	})
}

// Exec executes the query.
func (u *ProcessUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProcessCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProcessUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProcessUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProcessUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProcessCreateBulk is the builder for creating many Process entities in bulk.
type ProcessCreateBulk struct {
	config
	err      error
	builders []*ProcessCreate
	conflict []sql.ConflictOption
}

// Save creates the Process entities in the database.
func (pcb *ProcessCreateBulk) Save(ctx context.Context) ([]*Process, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Process, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcessCreateBulk) SaveX(ctx context.Context) []*Process {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcessCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcessCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Process.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProcessUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProcessCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProcessUpsertBulk {
	pcb.conflict = opts
	return &ProcessUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Process.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProcessCreateBulk) OnConflictColumns(columns ...string) *ProcessUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProcessUpsertBulk{
		create: pcb,
	}
}

// ProcessUpsertBulk is the builder for "upsert"-ing
// a bulk of Process nodes.
type ProcessUpsertBulk struct {
	create *ProcessCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Process.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProcessUpsertBulk) UpdateNewValues() *ProcessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(process.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Process.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProcessUpsertBulk) Ignore() *ProcessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProcessUpsertBulk) DoNothing() *ProcessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProcessCreateBulk.OnConflict
// documentation for more info.
func (u *ProcessUpsertBulk) Update(set func(*ProcessUpsert)) *ProcessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProcessUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *ProcessUpsertBulk) SetLastModifiedAt(v time.Time) *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *ProcessUpsertBulk) UpdateLastModifiedAt() *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetPid sets the "pid" field.
func (u *ProcessUpsertBulk) SetPid(v uint64) *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.SetPid(v)
	})
}

// AddPid adds v to the "pid" field.
func (u *ProcessUpsertBulk) AddPid(v uint64) *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.AddPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *ProcessUpsertBulk) UpdatePid() *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.UpdatePid()
	})
}

// SetName sets the "name" field.
func (u *ProcessUpsertBulk) SetName(v string) *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProcessUpsertBulk) UpdateName() *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.UpdateName()
	})
}

// SetPrincipal sets the "principal" field.
func (u *ProcessUpsertBulk) SetPrincipal(v string) *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.SetPrincipal(v)
	})
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *ProcessUpsertBulk) UpdatePrincipal() *ProcessUpsertBulk {
	return u.Update(func(s *ProcessUpsert) {
		s.UpdatePrincipal()
	})
}

// Exec executes the query.
func (u *ProcessUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProcessCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProcessCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProcessUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
