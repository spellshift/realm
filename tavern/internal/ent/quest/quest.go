// Code generated by ent, DO NOT EDIT.

package quest

import (
	"time"
)

const (
	// Label holds the string label denoting the quest type in the database.
	Label = "quest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastModifiedAt holds the string denoting the last_modified_at field in the database.
	FieldLastModifiedAt = "last_modified_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldParameters holds the string denoting the parameters field in the database.
	FieldParameters = "parameters"
	// EdgeTome holds the string denoting the tome edge name in mutations.
	EdgeTome = "tome"
	// EdgeBundle holds the string denoting the bundle edge name in mutations.
	EdgeBundle = "bundle"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// Table holds the table name of the quest in the database.
	Table = "quests"
	// TomeTable is the table that holds the tome relation/edge.
	TomeTable = "quests"
	// TomeInverseTable is the table name for the Tome entity.
	// It exists in this package in order to avoid circular dependency with the "tome" package.
	TomeInverseTable = "tomes"
	// TomeColumn is the table column denoting the tome relation/edge.
	TomeColumn = "quest_tome"
	// BundleTable is the table that holds the bundle relation/edge.
	BundleTable = "quests"
	// BundleInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	BundleInverseTable = "files"
	// BundleColumn is the table column denoting the bundle relation/edge.
	BundleColumn = "quest_bundle"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "quest_tasks"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "quests"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "quest_creator"
)

// Columns holds all SQL columns for quest fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldLastModifiedAt,
	FieldName,
	FieldParameters,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "quests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"quest_tome",
	"quest_bundle",
	"quest_creator",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastModifiedAt holds the default value on creation for the "last_modified_at" field.
	DefaultLastModifiedAt func() time.Time
	// UpdateDefaultLastModifiedAt holds the default value on update for the "last_modified_at" field.
	UpdateDefaultLastModifiedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
