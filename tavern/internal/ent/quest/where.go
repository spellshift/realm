// Code generated by ent, DO NOT EDIT.

package quest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kcarretto/realm/tavern/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Quest {
	return predicate.Quest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Quest {
	return predicate.Quest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Quest {
	return predicate.Quest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Quest {
	return predicate.Quest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Quest {
	return predicate.Quest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Quest {
	return predicate.Quest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Quest {
	return predicate.Quest(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldCreatedAt, v))
}

// LastModifiedAt applies equality check predicate on the "last_modified_at" field. It's identical to LastModifiedAtEQ.
func LastModifiedAt(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldLastModifiedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldName, v))
}

// Parameters applies equality check predicate on the "parameters" field. It's identical to ParametersEQ.
func Parameters(v string) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldParameters, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldLTE(FieldCreatedAt, v))
}

// LastModifiedAtEQ applies the EQ predicate on the "last_modified_at" field.
func LastModifiedAtEQ(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldLastModifiedAt, v))
}

// LastModifiedAtNEQ applies the NEQ predicate on the "last_modified_at" field.
func LastModifiedAtNEQ(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldNEQ(FieldLastModifiedAt, v))
}

// LastModifiedAtIn applies the In predicate on the "last_modified_at" field.
func LastModifiedAtIn(vs ...time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldIn(FieldLastModifiedAt, vs...))
}

// LastModifiedAtNotIn applies the NotIn predicate on the "last_modified_at" field.
func LastModifiedAtNotIn(vs ...time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldNotIn(FieldLastModifiedAt, vs...))
}

// LastModifiedAtGT applies the GT predicate on the "last_modified_at" field.
func LastModifiedAtGT(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldGT(FieldLastModifiedAt, v))
}

// LastModifiedAtGTE applies the GTE predicate on the "last_modified_at" field.
func LastModifiedAtGTE(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldGTE(FieldLastModifiedAt, v))
}

// LastModifiedAtLT applies the LT predicate on the "last_modified_at" field.
func LastModifiedAtLT(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldLT(FieldLastModifiedAt, v))
}

// LastModifiedAtLTE applies the LTE predicate on the "last_modified_at" field.
func LastModifiedAtLTE(v time.Time) predicate.Quest {
	return predicate.Quest(sql.FieldLTE(FieldLastModifiedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Quest {
	return predicate.Quest(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Quest {
	return predicate.Quest(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Quest {
	return predicate.Quest(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Quest {
	return predicate.Quest(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Quest {
	return predicate.Quest(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Quest {
	return predicate.Quest(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Quest {
	return predicate.Quest(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Quest {
	return predicate.Quest(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Quest {
	return predicate.Quest(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Quest {
	return predicate.Quest(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Quest {
	return predicate.Quest(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Quest {
	return predicate.Quest(sql.FieldContainsFold(FieldName, v))
}

// ParametersEQ applies the EQ predicate on the "parameters" field.
func ParametersEQ(v string) predicate.Quest {
	return predicate.Quest(sql.FieldEQ(FieldParameters, v))
}

// ParametersNEQ applies the NEQ predicate on the "parameters" field.
func ParametersNEQ(v string) predicate.Quest {
	return predicate.Quest(sql.FieldNEQ(FieldParameters, v))
}

// ParametersIn applies the In predicate on the "parameters" field.
func ParametersIn(vs ...string) predicate.Quest {
	return predicate.Quest(sql.FieldIn(FieldParameters, vs...))
}

// ParametersNotIn applies the NotIn predicate on the "parameters" field.
func ParametersNotIn(vs ...string) predicate.Quest {
	return predicate.Quest(sql.FieldNotIn(FieldParameters, vs...))
}

// ParametersGT applies the GT predicate on the "parameters" field.
func ParametersGT(v string) predicate.Quest {
	return predicate.Quest(sql.FieldGT(FieldParameters, v))
}

// ParametersGTE applies the GTE predicate on the "parameters" field.
func ParametersGTE(v string) predicate.Quest {
	return predicate.Quest(sql.FieldGTE(FieldParameters, v))
}

// ParametersLT applies the LT predicate on the "parameters" field.
func ParametersLT(v string) predicate.Quest {
	return predicate.Quest(sql.FieldLT(FieldParameters, v))
}

// ParametersLTE applies the LTE predicate on the "parameters" field.
func ParametersLTE(v string) predicate.Quest {
	return predicate.Quest(sql.FieldLTE(FieldParameters, v))
}

// ParametersContains applies the Contains predicate on the "parameters" field.
func ParametersContains(v string) predicate.Quest {
	return predicate.Quest(sql.FieldContains(FieldParameters, v))
}

// ParametersHasPrefix applies the HasPrefix predicate on the "parameters" field.
func ParametersHasPrefix(v string) predicate.Quest {
	return predicate.Quest(sql.FieldHasPrefix(FieldParameters, v))
}

// ParametersHasSuffix applies the HasSuffix predicate on the "parameters" field.
func ParametersHasSuffix(v string) predicate.Quest {
	return predicate.Quest(sql.FieldHasSuffix(FieldParameters, v))
}

// ParametersIsNil applies the IsNil predicate on the "parameters" field.
func ParametersIsNil() predicate.Quest {
	return predicate.Quest(sql.FieldIsNull(FieldParameters))
}

// ParametersNotNil applies the NotNil predicate on the "parameters" field.
func ParametersNotNil() predicate.Quest {
	return predicate.Quest(sql.FieldNotNull(FieldParameters))
}

// ParametersEqualFold applies the EqualFold predicate on the "parameters" field.
func ParametersEqualFold(v string) predicate.Quest {
	return predicate.Quest(sql.FieldEqualFold(FieldParameters, v))
}

// ParametersContainsFold applies the ContainsFold predicate on the "parameters" field.
func ParametersContainsFold(v string) predicate.Quest {
	return predicate.Quest(sql.FieldContainsFold(FieldParameters, v))
}

// HasTome applies the HasEdge predicate on the "tome" edge.
func HasTome() predicate.Quest {
	return predicate.Quest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TomeTable, TomeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTomeWith applies the HasEdge predicate on the "tome" edge with a given conditions (other predicates).
func HasTomeWith(preds ...predicate.Tome) predicate.Quest {
	return predicate.Quest(func(s *sql.Selector) {
		step := newTomeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBundle applies the HasEdge predicate on the "bundle" edge.
func HasBundle() predicate.Quest {
	return predicate.Quest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BundleTable, BundleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBundleWith applies the HasEdge predicate on the "bundle" edge with a given conditions (other predicates).
func HasBundleWith(preds ...predicate.File) predicate.Quest {
	return predicate.Quest(func(s *sql.Selector) {
		step := newBundleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Quest {
	return predicate.Quest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Quest {
	return predicate.Quest(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Quest {
	return predicate.Quest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.Quest {
	return predicate.Quest(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Quest) predicate.Quest {
	return predicate.Quest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Quest) predicate.Quest {
	return predicate.Quest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Quest) predicate.Quest {
	return predicate.Quest(sql.NotPredicates(p))
}
