// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/file"
	"realm.pub/tavern/internal/ent/quest"
	"realm.pub/tavern/internal/ent/task"
	"realm.pub/tavern/internal/ent/tome"
	"realm.pub/tavern/internal/ent/user"
)

// QuestCreate is the builder for creating a Quest entity.
type QuestCreate struct {
	config
	mutation *QuestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuestCreate) SetCreatedAt(t time.Time) *QuestCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuestCreate) SetNillableCreatedAt(t *time.Time) *QuestCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (qc *QuestCreate) SetLastModifiedAt(t time.Time) *QuestCreate {
	qc.mutation.SetLastModifiedAt(t)
	return qc
}

// SetNillableLastModifiedAt sets the "last_modified_at" field if the given value is not nil.
func (qc *QuestCreate) SetNillableLastModifiedAt(t *time.Time) *QuestCreate {
	if t != nil {
		qc.SetLastModifiedAt(*t)
	}
	return qc
}

// SetName sets the "name" field.
func (qc *QuestCreate) SetName(s string) *QuestCreate {
	qc.mutation.SetName(s)
	return qc
}

// SetParameters sets the "parameters" field.
func (qc *QuestCreate) SetParameters(s string) *QuestCreate {
	qc.mutation.SetParameters(s)
	return qc
}

// SetNillableParameters sets the "parameters" field if the given value is not nil.
func (qc *QuestCreate) SetNillableParameters(s *string) *QuestCreate {
	if s != nil {
		qc.SetParameters(*s)
	}
	return qc
}

// SetTomeID sets the "tome" edge to the Tome entity by ID.
func (qc *QuestCreate) SetTomeID(id int) *QuestCreate {
	qc.mutation.SetTomeID(id)
	return qc
}

// SetTome sets the "tome" edge to the Tome entity.
func (qc *QuestCreate) SetTome(t *Tome) *QuestCreate {
	return qc.SetTomeID(t.ID)
}

// SetBundleID sets the "bundle" edge to the File entity by ID.
func (qc *QuestCreate) SetBundleID(id int) *QuestCreate {
	qc.mutation.SetBundleID(id)
	return qc
}

// SetNillableBundleID sets the "bundle" edge to the File entity by ID if the given value is not nil.
func (qc *QuestCreate) SetNillableBundleID(id *int) *QuestCreate {
	if id != nil {
		qc = qc.SetBundleID(*id)
	}
	return qc
}

// SetBundle sets the "bundle" edge to the File entity.
func (qc *QuestCreate) SetBundle(f *File) *QuestCreate {
	return qc.SetBundleID(f.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (qc *QuestCreate) AddTaskIDs(ids ...int) *QuestCreate {
	qc.mutation.AddTaskIDs(ids...)
	return qc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (qc *QuestCreate) AddTasks(t ...*Task) *QuestCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qc.AddTaskIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (qc *QuestCreate) SetCreatorID(id int) *QuestCreate {
	qc.mutation.SetCreatorID(id)
	return qc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (qc *QuestCreate) SetNillableCreatorID(id *int) *QuestCreate {
	if id != nil {
		qc = qc.SetCreatorID(*id)
	}
	return qc
}

// SetCreator sets the "creator" edge to the User entity.
func (qc *QuestCreate) SetCreator(u *User) *QuestCreate {
	return qc.SetCreatorID(u.ID)
}

// Mutation returns the QuestMutation object of the builder.
func (qc *QuestCreate) Mutation() *QuestMutation {
	return qc.mutation
}

// Save creates the Quest in the database.
func (qc *QuestCreate) Save(ctx context.Context) (*Quest, error) {
	qc.defaults()
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestCreate) SaveX(ctx context.Context) *Quest {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuestCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuestCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuestCreate) defaults() {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		v := quest.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.LastModifiedAt(); !ok {
		v := quest.DefaultLastModifiedAt()
		qc.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuestCreate) check() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Quest.created_at"`)}
	}
	if _, ok := qc.mutation.LastModifiedAt(); !ok {
		return &ValidationError{Name: "last_modified_at", err: errors.New(`ent: missing required field "Quest.last_modified_at"`)}
	}
	if _, ok := qc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Quest.name"`)}
	}
	if v, ok := qc.mutation.Name(); ok {
		if err := quest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Quest.name": %w`, err)}
		}
	}
	if v, ok := qc.mutation.Parameters(); ok {
		if err := quest.ParametersValidator(v); err != nil {
			return &ValidationError{Name: "parameters", err: fmt.Errorf(`ent: validator failed for field "Quest.parameters": %w`, err)}
		}
	}
	if _, ok := qc.mutation.TomeID(); !ok {
		return &ValidationError{Name: "tome", err: errors.New(`ent: missing required edge "Quest.tome"`)}
	}
	return nil
}

func (qc *QuestCreate) sqlSave(ctx context.Context) (*Quest, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuestCreate) createSpec() (*Quest, *sqlgraph.CreateSpec) {
	var (
		_node = &Quest{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(quest.Table, sqlgraph.NewFieldSpec(quest.FieldID, field.TypeInt))
	)
	_spec.OnConflict = qc.conflict
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(quest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.LastModifiedAt(); ok {
		_spec.SetField(quest.FieldLastModifiedAt, field.TypeTime, value)
		_node.LastModifiedAt = value
	}
	if value, ok := qc.mutation.Name(); ok {
		_spec.SetField(quest.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := qc.mutation.Parameters(); ok {
		_spec.SetField(quest.FieldParameters, field.TypeString, value)
		_node.Parameters = value
	}
	if nodes := qc.mutation.TomeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.TomeTable,
			Columns: []string{quest.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.quest_tome = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.BundleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.BundleTable,
			Columns: []string{quest.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.quest_bundle = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quest.TasksTable,
			Columns: []string{quest.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.CreatorTable,
			Columns: []string{quest.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.quest_creator = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Quest.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuestUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (qc *QuestCreate) OnConflict(opts ...sql.ConflictOption) *QuestUpsertOne {
	qc.conflict = opts
	return &QuestUpsertOne{
		create: qc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Quest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qc *QuestCreate) OnConflictColumns(columns ...string) *QuestUpsertOne {
	qc.conflict = append(qc.conflict, sql.ConflictColumns(columns...))
	return &QuestUpsertOne{
		create: qc,
	}
}

type (
	// QuestUpsertOne is the builder for "upsert"-ing
	//  one Quest node.
	QuestUpsertOne struct {
		create *QuestCreate
	}

	// QuestUpsert is the "OnConflict" setter.
	QuestUpsert struct {
		*sql.UpdateSet
	}
)

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *QuestUpsert) SetLastModifiedAt(v time.Time) *QuestUpsert {
	u.Set(quest.FieldLastModifiedAt, v)
	return u
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *QuestUpsert) UpdateLastModifiedAt() *QuestUpsert {
	u.SetExcluded(quest.FieldLastModifiedAt)
	return u
}

// SetName sets the "name" field.
func (u *QuestUpsert) SetName(v string) *QuestUpsert {
	u.Set(quest.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *QuestUpsert) UpdateName() *QuestUpsert {
	u.SetExcluded(quest.FieldName)
	return u
}

// SetParameters sets the "parameters" field.
func (u *QuestUpsert) SetParameters(v string) *QuestUpsert {
	u.Set(quest.FieldParameters, v)
	return u
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *QuestUpsert) UpdateParameters() *QuestUpsert {
	u.SetExcluded(quest.FieldParameters)
	return u
}

// ClearParameters clears the value of the "parameters" field.
func (u *QuestUpsert) ClearParameters() *QuestUpsert {
	u.SetNull(quest.FieldParameters)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Quest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *QuestUpsertOne) UpdateNewValues() *QuestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(quest.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Quest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *QuestUpsertOne) Ignore() *QuestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuestUpsertOne) DoNothing() *QuestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuestCreate.OnConflict
// documentation for more info.
func (u *QuestUpsertOne) Update(set func(*QuestUpsert)) *QuestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuestUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *QuestUpsertOne) SetLastModifiedAt(v time.Time) *QuestUpsertOne {
	return u.Update(func(s *QuestUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *QuestUpsertOne) UpdateLastModifiedAt() *QuestUpsertOne {
	return u.Update(func(s *QuestUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetName sets the "name" field.
func (u *QuestUpsertOne) SetName(v string) *QuestUpsertOne {
	return u.Update(func(s *QuestUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *QuestUpsertOne) UpdateName() *QuestUpsertOne {
	return u.Update(func(s *QuestUpsert) {
		s.UpdateName()
	})
}

// SetParameters sets the "parameters" field.
func (u *QuestUpsertOne) SetParameters(v string) *QuestUpsertOne {
	return u.Update(func(s *QuestUpsert) {
		s.SetParameters(v)
	})
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *QuestUpsertOne) UpdateParameters() *QuestUpsertOne {
	return u.Update(func(s *QuestUpsert) {
		s.UpdateParameters()
	})
}

// ClearParameters clears the value of the "parameters" field.
func (u *QuestUpsertOne) ClearParameters() *QuestUpsertOne {
	return u.Update(func(s *QuestUpsert) {
		s.ClearParameters()
	})
}

// Exec executes the query.
func (u *QuestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QuestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *QuestUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *QuestUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// QuestCreateBulk is the builder for creating many Quest entities in bulk.
type QuestCreateBulk struct {
	config
	err      error
	builders []*QuestCreate
	conflict []sql.ConflictOption
}

// Save creates the Quest entities in the database.
func (qcb *QuestCreateBulk) Save(ctx context.Context) ([]*Quest, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Quest, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = qcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuestCreateBulk) SaveX(ctx context.Context) []*Quest {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuestCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuestCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Quest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuestUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (qcb *QuestCreateBulk) OnConflict(opts ...sql.ConflictOption) *QuestUpsertBulk {
	qcb.conflict = opts
	return &QuestUpsertBulk{
		create: qcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Quest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qcb *QuestCreateBulk) OnConflictColumns(columns ...string) *QuestUpsertBulk {
	qcb.conflict = append(qcb.conflict, sql.ConflictColumns(columns...))
	return &QuestUpsertBulk{
		create: qcb,
	}
}

// QuestUpsertBulk is the builder for "upsert"-ing
// a bulk of Quest nodes.
type QuestUpsertBulk struct {
	create *QuestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Quest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *QuestUpsertBulk) UpdateNewValues() *QuestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(quest.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Quest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *QuestUpsertBulk) Ignore() *QuestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuestUpsertBulk) DoNothing() *QuestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuestCreateBulk.OnConflict
// documentation for more info.
func (u *QuestUpsertBulk) Update(set func(*QuestUpsert)) *QuestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuestUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *QuestUpsertBulk) SetLastModifiedAt(v time.Time) *QuestUpsertBulk {
	return u.Update(func(s *QuestUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *QuestUpsertBulk) UpdateLastModifiedAt() *QuestUpsertBulk {
	return u.Update(func(s *QuestUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetName sets the "name" field.
func (u *QuestUpsertBulk) SetName(v string) *QuestUpsertBulk {
	return u.Update(func(s *QuestUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *QuestUpsertBulk) UpdateName() *QuestUpsertBulk {
	return u.Update(func(s *QuestUpsert) {
		s.UpdateName()
	})
}

// SetParameters sets the "parameters" field.
func (u *QuestUpsertBulk) SetParameters(v string) *QuestUpsertBulk {
	return u.Update(func(s *QuestUpsert) {
		s.SetParameters(v)
	})
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *QuestUpsertBulk) UpdateParameters() *QuestUpsertBulk {
	return u.Update(func(s *QuestUpsert) {
		s.UpdateParameters()
	})
}

// ClearParameters clears the value of the "parameters" field.
func (u *QuestUpsertBulk) ClearParameters() *QuestUpsertBulk {
	return u.Update(func(s *QuestUpsert) {
		s.ClearParameters()
	})
}

// Exec executes the query.
func (u *QuestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the QuestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QuestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
