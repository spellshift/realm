// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/internal/ent/file"
	"github.com/kcarretto/realm/tavern/internal/ent/predicate"
	"github.com/kcarretto/realm/tavern/internal/ent/quest"
	"github.com/kcarretto/realm/tavern/internal/ent/task"
	"github.com/kcarretto/realm/tavern/internal/ent/tome"
	"github.com/kcarretto/realm/tavern/internal/ent/user"
)

// QuestQuery is the builder for querying Quest entities.
type QuestQuery struct {
	config
	ctx            *QueryContext
	order          []OrderFunc
	inters         []Interceptor
	predicates     []predicate.Quest
	withTome       *TomeQuery
	withBundle     *FileQuery
	withTasks      *TaskQuery
	withCreator    *UserQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*Quest) error
	withNamedTasks map[string]*TaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuestQuery builder.
func (qq *QuestQuery) Where(ps ...predicate.Quest) *QuestQuery {
	qq.predicates = append(qq.predicates, ps...)
	return qq
}

// Limit the number of records to be returned by this query.
func (qq *QuestQuery) Limit(limit int) *QuestQuery {
	qq.ctx.Limit = &limit
	return qq
}

// Offset to start from.
func (qq *QuestQuery) Offset(offset int) *QuestQuery {
	qq.ctx.Offset = &offset
	return qq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qq *QuestQuery) Unique(unique bool) *QuestQuery {
	qq.ctx.Unique = &unique
	return qq
}

// Order specifies how the records should be ordered.
func (qq *QuestQuery) Order(o ...OrderFunc) *QuestQuery {
	qq.order = append(qq.order, o...)
	return qq
}

// QueryTome chains the current query on the "tome" edge.
func (qq *QuestQuery) QueryTome() *TomeQuery {
	query := (&TomeClient{config: qq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quest.Table, quest.FieldID, selector),
			sqlgraph.To(tome.Table, tome.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, quest.TomeTable, quest.TomeColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBundle chains the current query on the "bundle" edge.
func (qq *QuestQuery) QueryBundle() *FileQuery {
	query := (&FileClient{config: qq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quest.Table, quest.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, quest.BundleTable, quest.BundleColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (qq *QuestQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: qq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quest.Table, quest.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, quest.TasksTable, quest.TasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (qq *QuestQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: qq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quest.Table, quest.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, quest.CreatorTable, quest.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Quest entity from the query.
// Returns a *NotFoundError when no Quest was found.
func (qq *QuestQuery) First(ctx context.Context) (*Quest, error) {
	nodes, err := qq.Limit(1).All(setContextOp(ctx, qq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{quest.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qq *QuestQuery) FirstX(ctx context.Context) *Quest {
	node, err := qq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Quest ID from the query.
// Returns a *NotFoundError when no Quest ID was found.
func (qq *QuestQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qq.Limit(1).IDs(setContextOp(ctx, qq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{quest.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qq *QuestQuery) FirstIDX(ctx context.Context) int {
	id, err := qq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Quest entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Quest entity is found.
// Returns a *NotFoundError when no Quest entities are found.
func (qq *QuestQuery) Only(ctx context.Context) (*Quest, error) {
	nodes, err := qq.Limit(2).All(setContextOp(ctx, qq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{quest.Label}
	default:
		return nil, &NotSingularError{quest.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qq *QuestQuery) OnlyX(ctx context.Context) *Quest {
	node, err := qq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Quest ID in the query.
// Returns a *NotSingularError when more than one Quest ID is found.
// Returns a *NotFoundError when no entities are found.
func (qq *QuestQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qq.Limit(2).IDs(setContextOp(ctx, qq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{quest.Label}
	default:
		err = &NotSingularError{quest.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qq *QuestQuery) OnlyIDX(ctx context.Context) int {
	id, err := qq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Quests.
func (qq *QuestQuery) All(ctx context.Context) ([]*Quest, error) {
	ctx = setContextOp(ctx, qq.ctx, "All")
	if err := qq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Quest, *QuestQuery]()
	return withInterceptors[[]*Quest](ctx, qq, qr, qq.inters)
}

// AllX is like All, but panics if an error occurs.
func (qq *QuestQuery) AllX(ctx context.Context) []*Quest {
	nodes, err := qq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Quest IDs.
func (qq *QuestQuery) IDs(ctx context.Context) (ids []int, err error) {
	if qq.ctx.Unique == nil && qq.path != nil {
		qq.Unique(true)
	}
	ctx = setContextOp(ctx, qq.ctx, "IDs")
	if err = qq.Select(quest.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qq *QuestQuery) IDsX(ctx context.Context) []int {
	ids, err := qq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qq *QuestQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, qq.ctx, "Count")
	if err := qq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, qq, querierCount[*QuestQuery](), qq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (qq *QuestQuery) CountX(ctx context.Context) int {
	count, err := qq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qq *QuestQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, qq.ctx, "Exist")
	switch _, err := qq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (qq *QuestQuery) ExistX(ctx context.Context) bool {
	exist, err := qq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuestQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qq *QuestQuery) Clone() *QuestQuery {
	if qq == nil {
		return nil
	}
	return &QuestQuery{
		config:      qq.config,
		ctx:         qq.ctx.Clone(),
		order:       append([]OrderFunc{}, qq.order...),
		inters:      append([]Interceptor{}, qq.inters...),
		predicates:  append([]predicate.Quest{}, qq.predicates...),
		withTome:    qq.withTome.Clone(),
		withBundle:  qq.withBundle.Clone(),
		withTasks:   qq.withTasks.Clone(),
		withCreator: qq.withCreator.Clone(),
		// clone intermediate query.
		sql:  qq.sql.Clone(),
		path: qq.path,
	}
}

// WithTome tells the query-builder to eager-load the nodes that are connected to
// the "tome" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuestQuery) WithTome(opts ...func(*TomeQuery)) *QuestQuery {
	query := (&TomeClient{config: qq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qq.withTome = query
	return qq
}

// WithBundle tells the query-builder to eager-load the nodes that are connected to
// the "bundle" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuestQuery) WithBundle(opts ...func(*FileQuery)) *QuestQuery {
	query := (&FileClient{config: qq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qq.withBundle = query
	return qq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuestQuery) WithTasks(opts ...func(*TaskQuery)) *QuestQuery {
	query := (&TaskClient{config: qq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qq.withTasks = query
	return qq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuestQuery) WithCreator(opts ...func(*UserQuery)) *QuestQuery {
	query := (&UserClient{config: qq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qq.withCreator = query
	return qq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Quest.Query().
//		GroupBy(quest.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (qq *QuestQuery) GroupBy(field string, fields ...string) *QuestGroupBy {
	qq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &QuestGroupBy{build: qq}
	grbuild.flds = &qq.ctx.Fields
	grbuild.label = quest.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Quest.Query().
//		Select(quest.FieldCreatedAt).
//		Scan(ctx, &v)
func (qq *QuestQuery) Select(fields ...string) *QuestSelect {
	qq.ctx.Fields = append(qq.ctx.Fields, fields...)
	sbuild := &QuestSelect{QuestQuery: qq}
	sbuild.label = quest.Label
	sbuild.flds, sbuild.scan = &qq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a QuestSelect configured with the given aggregations.
func (qq *QuestQuery) Aggregate(fns ...AggregateFunc) *QuestSelect {
	return qq.Select().Aggregate(fns...)
}

func (qq *QuestQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range qq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, qq); err != nil {
				return err
			}
		}
	}
	for _, f := range qq.ctx.Fields {
		if !quest.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qq.path != nil {
		prev, err := qq.path(ctx)
		if err != nil {
			return err
		}
		qq.sql = prev
	}
	return nil
}

func (qq *QuestQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Quest, error) {
	var (
		nodes       = []*Quest{}
		withFKs     = qq.withFKs
		_spec       = qq.querySpec()
		loadedTypes = [4]bool{
			qq.withTome != nil,
			qq.withBundle != nil,
			qq.withTasks != nil,
			qq.withCreator != nil,
		}
	)
	if qq.withTome != nil || qq.withBundle != nil || qq.withCreator != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, quest.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Quest).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Quest{config: qq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(qq.modifiers) > 0 {
		_spec.Modifiers = qq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := qq.withTome; query != nil {
		if err := qq.loadTome(ctx, query, nodes, nil,
			func(n *Quest, e *Tome) { n.Edges.Tome = e }); err != nil {
			return nil, err
		}
	}
	if query := qq.withBundle; query != nil {
		if err := qq.loadBundle(ctx, query, nodes, nil,
			func(n *Quest, e *File) { n.Edges.Bundle = e }); err != nil {
			return nil, err
		}
	}
	if query := qq.withTasks; query != nil {
		if err := qq.loadTasks(ctx, query, nodes,
			func(n *Quest) { n.Edges.Tasks = []*Task{} },
			func(n *Quest, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := qq.withCreator; query != nil {
		if err := qq.loadCreator(ctx, query, nodes, nil,
			func(n *Quest, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range qq.withNamedTasks {
		if err := qq.loadTasks(ctx, query, nodes,
			func(n *Quest) { n.appendNamedTasks(name) },
			func(n *Quest, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range qq.loadTotal {
		if err := qq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (qq *QuestQuery) loadTome(ctx context.Context, query *TomeQuery, nodes []*Quest, init func(*Quest), assign func(*Quest, *Tome)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Quest)
	for i := range nodes {
		if nodes[i].quest_tome == nil {
			continue
		}
		fk := *nodes[i].quest_tome
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tome.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "quest_tome" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (qq *QuestQuery) loadBundle(ctx context.Context, query *FileQuery, nodes []*Quest, init func(*Quest), assign func(*Quest, *File)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Quest)
	for i := range nodes {
		if nodes[i].quest_bundle == nil {
			continue
		}
		fk := *nodes[i].quest_bundle
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(file.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "quest_bundle" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (qq *QuestQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Quest, init func(*Quest), assign func(*Quest, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Quest)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(quest.TasksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.quest_tasks
		if fk == nil {
			return fmt.Errorf(`foreign-key "quest_tasks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "quest_tasks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (qq *QuestQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*Quest, init func(*Quest), assign func(*Quest, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Quest)
	for i := range nodes {
		if nodes[i].quest_creator == nil {
			continue
		}
		fk := *nodes[i].quest_creator
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "quest_creator" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (qq *QuestQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qq.querySpec()
	if len(qq.modifiers) > 0 {
		_spec.Modifiers = qq.modifiers
	}
	_spec.Node.Columns = qq.ctx.Fields
	if len(qq.ctx.Fields) > 0 {
		_spec.Unique = qq.ctx.Unique != nil && *qq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, qq.driver, _spec)
}

func (qq *QuestQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(quest.Table, quest.Columns, sqlgraph.NewFieldSpec(quest.FieldID, field.TypeInt))
	_spec.From = qq.sql
	if unique := qq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if qq.path != nil {
		_spec.Unique = true
	}
	if fields := qq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quest.FieldID)
		for i := range fields {
			if fields[i] != quest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := qq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qq *QuestQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qq.driver.Dialect())
	t1 := builder.Table(quest.Table)
	columns := qq.ctx.Fields
	if len(columns) == 0 {
		columns = quest.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qq.sql != nil {
		selector = qq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qq.ctx.Unique != nil && *qq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range qq.predicates {
		p(selector)
	}
	for _, p := range qq.order {
		p(selector)
	}
	if offset := qq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (qq *QuestQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *QuestQuery {
	query := (&TaskClient{config: qq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if qq.withNamedTasks == nil {
		qq.withNamedTasks = make(map[string]*TaskQuery)
	}
	qq.withNamedTasks[name] = query
	return qq
}

// QuestGroupBy is the group-by builder for Quest entities.
type QuestGroupBy struct {
	selector
	build *QuestQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qgb *QuestGroupBy) Aggregate(fns ...AggregateFunc) *QuestGroupBy {
	qgb.fns = append(qgb.fns, fns...)
	return qgb
}

// Scan applies the selector query and scans the result into the given value.
func (qgb *QuestGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qgb.build.ctx, "GroupBy")
	if err := qgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestQuery, *QuestGroupBy](ctx, qgb.build, qgb, qgb.build.inters, v)
}

func (qgb *QuestGroupBy) sqlScan(ctx context.Context, root *QuestQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(qgb.fns))
	for _, fn := range qgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*qgb.flds)+len(qgb.fns))
		for _, f := range *qgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*qgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// QuestSelect is the builder for selecting fields of Quest entities.
type QuestSelect struct {
	*QuestQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (qs *QuestSelect) Aggregate(fns ...AggregateFunc) *QuestSelect {
	qs.fns = append(qs.fns, fns...)
	return qs
}

// Scan applies the selector query and scans the result into the given value.
func (qs *QuestSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qs.ctx, "Select")
	if err := qs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestQuery, *QuestSelect](ctx, qs.QuestQuery, qs, qs.inters, v)
}

func (qs *QuestSelect) sqlScan(ctx context.Context, root *QuestQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(qs.fns))
	for _, fn := range qs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*qs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
