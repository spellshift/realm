// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/file"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/quest"
	"realm.pub/tavern/internal/ent/task"
	"realm.pub/tavern/internal/ent/tome"
	"realm.pub/tavern/internal/ent/user"
)

// QuestUpdate is the builder for updating Quest entities.
type QuestUpdate struct {
	config
	hooks    []Hook
	mutation *QuestMutation
}

// Where appends a list predicates to the QuestUpdate builder.
func (qu *QuestUpdate) Where(ps ...predicate.Quest) *QuestUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (qu *QuestUpdate) SetLastModifiedAt(t time.Time) *QuestUpdate {
	qu.mutation.SetLastModifiedAt(t)
	return qu
}

// SetName sets the "name" field.
func (qu *QuestUpdate) SetName(s string) *QuestUpdate {
	qu.mutation.SetName(s)
	return qu
}

// SetParameters sets the "parameters" field.
func (qu *QuestUpdate) SetParameters(s string) *QuestUpdate {
	qu.mutation.SetParameters(s)
	return qu
}

// SetNillableParameters sets the "parameters" field if the given value is not nil.
func (qu *QuestUpdate) SetNillableParameters(s *string) *QuestUpdate {
	if s != nil {
		qu.SetParameters(*s)
	}
	return qu
}

// ClearParameters clears the value of the "parameters" field.
func (qu *QuestUpdate) ClearParameters() *QuestUpdate {
	qu.mutation.ClearParameters()
	return qu
}

// SetTomeID sets the "tome" edge to the Tome entity by ID.
func (qu *QuestUpdate) SetTomeID(id int) *QuestUpdate {
	qu.mutation.SetTomeID(id)
	return qu
}

// SetTome sets the "tome" edge to the Tome entity.
func (qu *QuestUpdate) SetTome(t *Tome) *QuestUpdate {
	return qu.SetTomeID(t.ID)
}

// SetBundleID sets the "bundle" edge to the File entity by ID.
func (qu *QuestUpdate) SetBundleID(id int) *QuestUpdate {
	qu.mutation.SetBundleID(id)
	return qu
}

// SetNillableBundleID sets the "bundle" edge to the File entity by ID if the given value is not nil.
func (qu *QuestUpdate) SetNillableBundleID(id *int) *QuestUpdate {
	if id != nil {
		qu = qu.SetBundleID(*id)
	}
	return qu
}

// SetBundle sets the "bundle" edge to the File entity.
func (qu *QuestUpdate) SetBundle(f *File) *QuestUpdate {
	return qu.SetBundleID(f.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (qu *QuestUpdate) AddTaskIDs(ids ...int) *QuestUpdate {
	qu.mutation.AddTaskIDs(ids...)
	return qu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (qu *QuestUpdate) AddTasks(t ...*Task) *QuestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qu.AddTaskIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (qu *QuestUpdate) SetCreatorID(id int) *QuestUpdate {
	qu.mutation.SetCreatorID(id)
	return qu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (qu *QuestUpdate) SetNillableCreatorID(id *int) *QuestUpdate {
	if id != nil {
		qu = qu.SetCreatorID(*id)
	}
	return qu
}

// SetCreator sets the "creator" edge to the User entity.
func (qu *QuestUpdate) SetCreator(u *User) *QuestUpdate {
	return qu.SetCreatorID(u.ID)
}

// Mutation returns the QuestMutation object of the builder.
func (qu *QuestUpdate) Mutation() *QuestMutation {
	return qu.mutation
}

// ClearTome clears the "tome" edge to the Tome entity.
func (qu *QuestUpdate) ClearTome() *QuestUpdate {
	qu.mutation.ClearTome()
	return qu
}

// ClearBundle clears the "bundle" edge to the File entity.
func (qu *QuestUpdate) ClearBundle() *QuestUpdate {
	qu.mutation.ClearBundle()
	return qu
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (qu *QuestUpdate) ClearTasks() *QuestUpdate {
	qu.mutation.ClearTasks()
	return qu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (qu *QuestUpdate) RemoveTaskIDs(ids ...int) *QuestUpdate {
	qu.mutation.RemoveTaskIDs(ids...)
	return qu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (qu *QuestUpdate) RemoveTasks(t ...*Task) *QuestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qu.RemoveTaskIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (qu *QuestUpdate) ClearCreator() *QuestUpdate {
	qu.mutation.ClearCreator()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestUpdate) defaults() {
	if _, ok := qu.mutation.LastModifiedAt(); !ok {
		v := quest.UpdateDefaultLastModifiedAt()
		qu.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestUpdate) check() error {
	if v, ok := qu.mutation.Name(); ok {
		if err := quest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Quest.name": %w`, err)}
		}
	}
	if v, ok := qu.mutation.Parameters(); ok {
		if err := quest.ParametersValidator(v); err != nil {
			return &ValidationError{Name: "parameters", err: fmt.Errorf(`ent: validator failed for field "Quest.parameters": %w`, err)}
		}
	}
	if _, ok := qu.mutation.TomeID(); qu.mutation.TomeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Quest.tome"`)
	}
	return nil
}

func (qu *QuestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(quest.Table, quest.Columns, sqlgraph.NewFieldSpec(quest.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.LastModifiedAt(); ok {
		_spec.SetField(quest.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.Name(); ok {
		_spec.SetField(quest.FieldName, field.TypeString, value)
	}
	if value, ok := qu.mutation.Parameters(); ok {
		_spec.SetField(quest.FieldParameters, field.TypeString, value)
	}
	if qu.mutation.ParametersCleared() {
		_spec.ClearField(quest.FieldParameters, field.TypeString)
	}
	if qu.mutation.TomeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.TomeTable,
			Columns: []string{quest.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.TomeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.TomeTable,
			Columns: []string{quest.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.BundleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.BundleTable,
			Columns: []string{quest.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.BundleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.BundleTable,
			Columns: []string{quest.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quest.TasksTable,
			Columns: []string{quest.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !qu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quest.TasksTable,
			Columns: []string{quest.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quest.TasksTable,
			Columns: []string{quest.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.CreatorTable,
			Columns: []string{quest.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.CreatorTable,
			Columns: []string{quest.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestUpdateOne is the builder for updating a single Quest entity.
type QuestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestMutation
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (quo *QuestUpdateOne) SetLastModifiedAt(t time.Time) *QuestUpdateOne {
	quo.mutation.SetLastModifiedAt(t)
	return quo
}

// SetName sets the "name" field.
func (quo *QuestUpdateOne) SetName(s string) *QuestUpdateOne {
	quo.mutation.SetName(s)
	return quo
}

// SetParameters sets the "parameters" field.
func (quo *QuestUpdateOne) SetParameters(s string) *QuestUpdateOne {
	quo.mutation.SetParameters(s)
	return quo
}

// SetNillableParameters sets the "parameters" field if the given value is not nil.
func (quo *QuestUpdateOne) SetNillableParameters(s *string) *QuestUpdateOne {
	if s != nil {
		quo.SetParameters(*s)
	}
	return quo
}

// ClearParameters clears the value of the "parameters" field.
func (quo *QuestUpdateOne) ClearParameters() *QuestUpdateOne {
	quo.mutation.ClearParameters()
	return quo
}

// SetTomeID sets the "tome" edge to the Tome entity by ID.
func (quo *QuestUpdateOne) SetTomeID(id int) *QuestUpdateOne {
	quo.mutation.SetTomeID(id)
	return quo
}

// SetTome sets the "tome" edge to the Tome entity.
func (quo *QuestUpdateOne) SetTome(t *Tome) *QuestUpdateOne {
	return quo.SetTomeID(t.ID)
}

// SetBundleID sets the "bundle" edge to the File entity by ID.
func (quo *QuestUpdateOne) SetBundleID(id int) *QuestUpdateOne {
	quo.mutation.SetBundleID(id)
	return quo
}

// SetNillableBundleID sets the "bundle" edge to the File entity by ID if the given value is not nil.
func (quo *QuestUpdateOne) SetNillableBundleID(id *int) *QuestUpdateOne {
	if id != nil {
		quo = quo.SetBundleID(*id)
	}
	return quo
}

// SetBundle sets the "bundle" edge to the File entity.
func (quo *QuestUpdateOne) SetBundle(f *File) *QuestUpdateOne {
	return quo.SetBundleID(f.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (quo *QuestUpdateOne) AddTaskIDs(ids ...int) *QuestUpdateOne {
	quo.mutation.AddTaskIDs(ids...)
	return quo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (quo *QuestUpdateOne) AddTasks(t ...*Task) *QuestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return quo.AddTaskIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (quo *QuestUpdateOne) SetCreatorID(id int) *QuestUpdateOne {
	quo.mutation.SetCreatorID(id)
	return quo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (quo *QuestUpdateOne) SetNillableCreatorID(id *int) *QuestUpdateOne {
	if id != nil {
		quo = quo.SetCreatorID(*id)
	}
	return quo
}

// SetCreator sets the "creator" edge to the User entity.
func (quo *QuestUpdateOne) SetCreator(u *User) *QuestUpdateOne {
	return quo.SetCreatorID(u.ID)
}

// Mutation returns the QuestMutation object of the builder.
func (quo *QuestUpdateOne) Mutation() *QuestMutation {
	return quo.mutation
}

// ClearTome clears the "tome" edge to the Tome entity.
func (quo *QuestUpdateOne) ClearTome() *QuestUpdateOne {
	quo.mutation.ClearTome()
	return quo
}

// ClearBundle clears the "bundle" edge to the File entity.
func (quo *QuestUpdateOne) ClearBundle() *QuestUpdateOne {
	quo.mutation.ClearBundle()
	return quo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (quo *QuestUpdateOne) ClearTasks() *QuestUpdateOne {
	quo.mutation.ClearTasks()
	return quo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (quo *QuestUpdateOne) RemoveTaskIDs(ids ...int) *QuestUpdateOne {
	quo.mutation.RemoveTaskIDs(ids...)
	return quo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (quo *QuestUpdateOne) RemoveTasks(t ...*Task) *QuestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return quo.RemoveTaskIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (quo *QuestUpdateOne) ClearCreator() *QuestUpdateOne {
	quo.mutation.ClearCreator()
	return quo
}

// Where appends a list predicates to the QuestUpdate builder.
func (quo *QuestUpdateOne) Where(ps ...predicate.Quest) *QuestUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestUpdateOne) Select(field string, fields ...string) *QuestUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Quest entity.
func (quo *QuestUpdateOne) Save(ctx context.Context) (*Quest, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestUpdateOne) SaveX(ctx context.Context) *Quest {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestUpdateOne) defaults() {
	if _, ok := quo.mutation.LastModifiedAt(); !ok {
		v := quest.UpdateDefaultLastModifiedAt()
		quo.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestUpdateOne) check() error {
	if v, ok := quo.mutation.Name(); ok {
		if err := quest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Quest.name": %w`, err)}
		}
	}
	if v, ok := quo.mutation.Parameters(); ok {
		if err := quest.ParametersValidator(v); err != nil {
			return &ValidationError{Name: "parameters", err: fmt.Errorf(`ent: validator failed for field "Quest.parameters": %w`, err)}
		}
	}
	if _, ok := quo.mutation.TomeID(); quo.mutation.TomeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Quest.tome"`)
	}
	return nil
}

func (quo *QuestUpdateOne) sqlSave(ctx context.Context) (_node *Quest, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(quest.Table, quest.Columns, sqlgraph.NewFieldSpec(quest.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Quest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quest.FieldID)
		for _, f := range fields {
			if !quest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != quest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.LastModifiedAt(); ok {
		_spec.SetField(quest.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.Name(); ok {
		_spec.SetField(quest.FieldName, field.TypeString, value)
	}
	if value, ok := quo.mutation.Parameters(); ok {
		_spec.SetField(quest.FieldParameters, field.TypeString, value)
	}
	if quo.mutation.ParametersCleared() {
		_spec.ClearField(quest.FieldParameters, field.TypeString)
	}
	if quo.mutation.TomeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.TomeTable,
			Columns: []string{quest.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.TomeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.TomeTable,
			Columns: []string{quest.TomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.BundleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.BundleTable,
			Columns: []string{quest.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.BundleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.BundleTable,
			Columns: []string{quest.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quest.TasksTable,
			Columns: []string{quest.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !quo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quest.TasksTable,
			Columns: []string{quest.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quest.TasksTable,
			Columns: []string{quest.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.CreatorTable,
			Columns: []string{quest.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   quest.CreatorTable,
			Columns: []string{quest.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Quest{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
