// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"realm.pub/tavern/internal/ent/repository"
	"realm.pub/tavern/internal/ent/user"
)

// Repository is the model entity for the Repository schema.
type Repository struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp of when this ent was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Timestamp of when this ent was last updated
	LastModifiedAt time.Time `json:"last_modified_at,omitempty"`
	// URL of the repository
	URL string `json:"url,omitempty"`
	// Public key associated with this repositories private key
	PublicKey string `json:"public_key,omitempty"`
	// Private key used for authentication.
	PrivateKey string `json:"-"`
	// Timestamp of when this repo was last imported
	LastImportedAt time.Time `json:"last_imported_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepositoryQuery when eager-loading is set.
	Edges            RepositoryEdges `json:"edges"`
	repository_owner *int
	selectValues     sql.SelectValues
}

// RepositoryEdges holds the relations/edges for other nodes in the graph.
type RepositoryEdges struct {
	// Tomes imported using this repository.
	Tomes []*Tome `json:"tomes,omitempty"`
	// User that created this repository.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTomes map[string][]*Tome
}

// TomesOrErr returns the Tomes value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) TomesOrErr() ([]*Tome, error) {
	if e.loadedTypes[0] {
		return e.Tomes, nil
	}
	return nil, &NotLoadedError{edge: "tomes"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepositoryEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repository) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case repository.FieldID:
			values[i] = new(sql.NullInt64)
		case repository.FieldURL, repository.FieldPublicKey, repository.FieldPrivateKey:
			values[i] = new(sql.NullString)
		case repository.FieldCreatedAt, repository.FieldLastModifiedAt, repository.FieldLastImportedAt:
			values[i] = new(sql.NullTime)
		case repository.ForeignKeys[0]: // repository_owner
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repository fields.
func (r *Repository) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repository.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case repository.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case repository.FieldLastModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_at", values[i])
			} else if value.Valid {
				r.LastModifiedAt = value.Time
			}
		case repository.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				r.URL = value.String
			}
		case repository.FieldPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value.Valid {
				r.PublicKey = value.String
			}
		case repository.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value.Valid {
				r.PrivateKey = value.String
			}
		case repository.FieldLastImportedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_imported_at", values[i])
			} else if value.Valid {
				r.LastImportedAt = value.Time
			}
		case repository.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_owner", value)
			} else if value.Valid {
				r.repository_owner = new(int)
				*r.repository_owner = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Repository.
// This includes values selected through modifiers, order, etc.
func (r *Repository) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryTomes queries the "tomes" edge of the Repository entity.
func (r *Repository) QueryTomes() *TomeQuery {
	return NewRepositoryClient(r.config).QueryTomes(r)
}

// QueryOwner queries the "owner" edge of the Repository entity.
func (r *Repository) QueryOwner() *UserQuery {
	return NewRepositoryClient(r.config).QueryOwner(r)
}

// Update returns a builder for updating this Repository.
// Note that you need to call Repository.Unwrap() before calling this method if this Repository
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repository) Update() *RepositoryUpdateOne {
	return NewRepositoryClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Repository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Repository) Unwrap() *Repository {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repository is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repository) String() string {
	var builder strings.Builder
	builder.WriteString("Repository(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_modified_at=")
	builder.WriteString(r.LastModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(r.URL)
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(r.PublicKey)
	builder.WriteString(", ")
	builder.WriteString("private_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("last_imported_at=")
	builder.WriteString(r.LastImportedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTomes returns the Tomes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Repository) NamedTomes(name string) ([]*Tome, error) {
	if r.Edges.namedTomes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedTomes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Repository) appendNamedTomes(name string, edges ...*Tome) {
	if r.Edges.namedTomes == nil {
		r.Edges.namedTomes = make(map[string][]*Tome)
	}
	if len(edges) == 0 {
		r.Edges.namedTomes[name] = []*Tome{}
	} else {
		r.Edges.namedTomes[name] = append(r.Edges.namedTomes[name], edges...)
	}
}

// Repositories is a parsable slice of Repository.
type Repositories []*Repository
