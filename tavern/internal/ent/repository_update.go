// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/repository"
	"realm.pub/tavern/internal/ent/tome"
	"realm.pub/tavern/internal/ent/user"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ru *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (ru *RepositoryUpdate) SetLastModifiedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetLastModifiedAt(t)
	return ru
}

// SetURL sets the "url" field.
func (ru *RepositoryUpdate) SetURL(s string) *RepositoryUpdate {
	ru.mutation.SetURL(s)
	return ru
}

// SetPublicKey sets the "public_key" field.
func (ru *RepositoryUpdate) SetPublicKey(s string) *RepositoryUpdate {
	ru.mutation.SetPublicKey(s)
	return ru
}

// SetPrivateKey sets the "private_key" field.
func (ru *RepositoryUpdate) SetPrivateKey(s string) *RepositoryUpdate {
	ru.mutation.SetPrivateKey(s)
	return ru
}

// AddTomeIDs adds the "tomes" edge to the Tome entity by IDs.
func (ru *RepositoryUpdate) AddTomeIDs(ids ...int) *RepositoryUpdate {
	ru.mutation.AddTomeIDs(ids...)
	return ru
}

// AddTomes adds the "tomes" edges to the Tome entity.
func (ru *RepositoryUpdate) AddTomes(t ...*Tome) *RepositoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTomeIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ru *RepositoryUpdate) SetOwnerID(id int) *RepositoryUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableOwnerID(id *int) *RepositoryUpdate {
	if id != nil {
		ru = ru.SetOwnerID(*id)
	}
	return ru
}

// SetOwner sets the "owner" edge to the User entity.
func (ru *RepositoryUpdate) SetOwner(u *User) *RepositoryUpdate {
	return ru.SetOwnerID(u.ID)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ru *RepositoryUpdate) Mutation() *RepositoryMutation {
	return ru.mutation
}

// ClearTomes clears all "tomes" edges to the Tome entity.
func (ru *RepositoryUpdate) ClearTomes() *RepositoryUpdate {
	ru.mutation.ClearTomes()
	return ru
}

// RemoveTomeIDs removes the "tomes" edge to Tome entities by IDs.
func (ru *RepositoryUpdate) RemoveTomeIDs(ids ...int) *RepositoryUpdate {
	ru.mutation.RemoveTomeIDs(ids...)
	return ru
}

// RemoveTomes removes "tomes" edges to Tome entities.
func (ru *RepositoryUpdate) RemoveTomes(t ...*Tome) *RepositoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTomeIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (ru *RepositoryUpdate) ClearOwner() *RepositoryUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RepositoryUpdate) defaults() error {
	if _, ok := ru.mutation.LastModifiedAt(); !ok {
		if repository.UpdateDefaultLastModifiedAt == nil {
			return fmt.Errorf("ent: uninitialized repository.UpdateDefaultLastModifiedAt (forgotten import ent/runtime?)")
		}
		v := repository.UpdateDefaultLastModifiedAt()
		ru.mutation.SetLastModifiedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RepositoryUpdate) check() error {
	if v, ok := ru.mutation.URL(); ok {
		if err := repository.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Repository.url": %w`, err)}
		}
	}
	if v, ok := ru.mutation.PublicKey(); ok {
		if err := repository.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "Repository.public_key": %w`, err)}
		}
	}
	if v, ok := ru.mutation.PrivateKey(); ok {
		if err := repository.PrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "private_key", err: fmt.Errorf(`ent: validator failed for field "Repository.private_key": %w`, err)}
		}
	}
	return nil
}

func (ru *RepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.LastModifiedAt(); ok {
		_spec.SetField(repository.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.PublicKey(); ok {
		_spec.SetField(repository.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := ru.mutation.PrivateKey(); ok {
		_spec.SetField(repository.FieldPrivateKey, field.TypeString, value)
	}
	if ru.mutation.TomesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.TomesTable,
			Columns: []string{repository.TomesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTomesIDs(); len(nodes) > 0 && !ru.mutation.TomesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.TomesTable,
			Columns: []string{repository.TomesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TomesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.TomesTable,
			Columns: []string{repository.TomesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (ruo *RepositoryUpdateOne) SetLastModifiedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetLastModifiedAt(t)
	return ruo
}

// SetURL sets the "url" field.
func (ruo *RepositoryUpdateOne) SetURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetURL(s)
	return ruo
}

// SetPublicKey sets the "public_key" field.
func (ruo *RepositoryUpdateOne) SetPublicKey(s string) *RepositoryUpdateOne {
	ruo.mutation.SetPublicKey(s)
	return ruo
}

// SetPrivateKey sets the "private_key" field.
func (ruo *RepositoryUpdateOne) SetPrivateKey(s string) *RepositoryUpdateOne {
	ruo.mutation.SetPrivateKey(s)
	return ruo
}

// AddTomeIDs adds the "tomes" edge to the Tome entity by IDs.
func (ruo *RepositoryUpdateOne) AddTomeIDs(ids ...int) *RepositoryUpdateOne {
	ruo.mutation.AddTomeIDs(ids...)
	return ruo
}

// AddTomes adds the "tomes" edges to the Tome entity.
func (ruo *RepositoryUpdateOne) AddTomes(t ...*Tome) *RepositoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTomeIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ruo *RepositoryUpdateOne) SetOwnerID(id int) *RepositoryUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableOwnerID(id *int) *RepositoryUpdateOne {
	if id != nil {
		ruo = ruo.SetOwnerID(*id)
	}
	return ruo
}

// SetOwner sets the "owner" edge to the User entity.
func (ruo *RepositoryUpdateOne) SetOwner(u *User) *RepositoryUpdateOne {
	return ruo.SetOwnerID(u.ID)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ruo *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return ruo.mutation
}

// ClearTomes clears all "tomes" edges to the Tome entity.
func (ruo *RepositoryUpdateOne) ClearTomes() *RepositoryUpdateOne {
	ruo.mutation.ClearTomes()
	return ruo
}

// RemoveTomeIDs removes the "tomes" edge to Tome entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveTomeIDs(ids ...int) *RepositoryUpdateOne {
	ruo.mutation.RemoveTomeIDs(ids...)
	return ruo
}

// RemoveTomes removes "tomes" edges to Tome entities.
func (ruo *RepositoryUpdateOne) RemoveTomes(t ...*Tome) *RepositoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTomeIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (ruo *RepositoryUpdateOne) ClearOwner() *RepositoryUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ruo *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repository entity.
func (ruo *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RepositoryUpdateOne) defaults() error {
	if _, ok := ruo.mutation.LastModifiedAt(); !ok {
		if repository.UpdateDefaultLastModifiedAt == nil {
			return fmt.Errorf("ent: uninitialized repository.UpdateDefaultLastModifiedAt (forgotten import ent/runtime?)")
		}
		v := repository.UpdateDefaultLastModifiedAt()
		ruo.mutation.SetLastModifiedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RepositoryUpdateOne) check() error {
	if v, ok := ruo.mutation.URL(); ok {
		if err := repository.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Repository.url": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.PublicKey(); ok {
		if err := repository.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "Repository.public_key": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.PrivateKey(); ok {
		if err := repository.PrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "private_key", err: fmt.Errorf(`ent: validator failed for field "Repository.private_key": %w`, err)}
		}
	}
	return nil
}

func (ruo *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.LastModifiedAt(); ok {
		_spec.SetField(repository.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PublicKey(); ok {
		_spec.SetField(repository.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PrivateKey(); ok {
		_spec.SetField(repository.FieldPrivateKey, field.TypeString, value)
	}
	if ruo.mutation.TomesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.TomesTable,
			Columns: []string{repository.TomesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTomesIDs(); len(nodes) > 0 && !ruo.mutation.TomesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.TomesTable,
			Columns: []string{repository.TomesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TomesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.TomesTable,
			Columns: []string{repository.TomesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
