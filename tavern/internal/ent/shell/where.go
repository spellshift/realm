// Code generated by ent, DO NOT EDIT.

package shell

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"realm.pub/tavern/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Shell {
	return predicate.Shell(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Shell {
	return predicate.Shell(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Shell {
	return predicate.Shell(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Shell {
	return predicate.Shell(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Shell {
	return predicate.Shell(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Shell {
	return predicate.Shell(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Shell {
	return predicate.Shell(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldCreatedAt, v))
}

// LastModifiedAt applies equality check predicate on the "last_modified_at" field. It's identical to LastModifiedAtEQ.
func LastModifiedAt(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldLastModifiedAt, v))
}

// Input applies equality check predicate on the "input" field. It's identical to InputEQ.
func Input(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldInput, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldOutput, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldLTE(FieldCreatedAt, v))
}

// LastModifiedAtEQ applies the EQ predicate on the "last_modified_at" field.
func LastModifiedAtEQ(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldLastModifiedAt, v))
}

// LastModifiedAtNEQ applies the NEQ predicate on the "last_modified_at" field.
func LastModifiedAtNEQ(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldNEQ(FieldLastModifiedAt, v))
}

// LastModifiedAtIn applies the In predicate on the "last_modified_at" field.
func LastModifiedAtIn(vs ...time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldIn(FieldLastModifiedAt, vs...))
}

// LastModifiedAtNotIn applies the NotIn predicate on the "last_modified_at" field.
func LastModifiedAtNotIn(vs ...time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldNotIn(FieldLastModifiedAt, vs...))
}

// LastModifiedAtGT applies the GT predicate on the "last_modified_at" field.
func LastModifiedAtGT(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldGT(FieldLastModifiedAt, v))
}

// LastModifiedAtGTE applies the GTE predicate on the "last_modified_at" field.
func LastModifiedAtGTE(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldGTE(FieldLastModifiedAt, v))
}

// LastModifiedAtLT applies the LT predicate on the "last_modified_at" field.
func LastModifiedAtLT(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldLT(FieldLastModifiedAt, v))
}

// LastModifiedAtLTE applies the LTE predicate on the "last_modified_at" field.
func LastModifiedAtLTE(v time.Time) predicate.Shell {
	return predicate.Shell(sql.FieldLTE(FieldLastModifiedAt, v))
}

// InputEQ applies the EQ predicate on the "input" field.
func InputEQ(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldInput, v))
}

// InputNEQ applies the NEQ predicate on the "input" field.
func InputNEQ(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldNEQ(FieldInput, v))
}

// InputIn applies the In predicate on the "input" field.
func InputIn(vs ...[]byte) predicate.Shell {
	return predicate.Shell(sql.FieldIn(FieldInput, vs...))
}

// InputNotIn applies the NotIn predicate on the "input" field.
func InputNotIn(vs ...[]byte) predicate.Shell {
	return predicate.Shell(sql.FieldNotIn(FieldInput, vs...))
}

// InputGT applies the GT predicate on the "input" field.
func InputGT(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldGT(FieldInput, v))
}

// InputGTE applies the GTE predicate on the "input" field.
func InputGTE(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldGTE(FieldInput, v))
}

// InputLT applies the LT predicate on the "input" field.
func InputLT(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldLT(FieldInput, v))
}

// InputLTE applies the LTE predicate on the "input" field.
func InputLTE(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldLTE(FieldInput, v))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...[]byte) predicate.Shell {
	return predicate.Shell(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...[]byte) predicate.Shell {
	return predicate.Shell(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v []byte) predicate.Shell {
	return predicate.Shell(sql.FieldLTE(FieldOutput, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shell) predicate.Shell {
	return predicate.Shell(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shell) predicate.Shell {
	return predicate.Shell(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shell) predicate.Shell {
	return predicate.Shell(sql.NotPredicates(p))
}
