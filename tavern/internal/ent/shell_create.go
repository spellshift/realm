// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/beacon"
	"realm.pub/tavern/internal/ent/shell"
	"realm.pub/tavern/internal/ent/task"
	"realm.pub/tavern/internal/ent/user"
)

// ShellCreate is the builder for creating a Shell entity.
type ShellCreate struct {
	config
	mutation *ShellMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShellCreate) SetCreatedAt(t time.Time) *ShellCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShellCreate) SetNillableCreatedAt(t *time.Time) *ShellCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (sc *ShellCreate) SetLastModifiedAt(t time.Time) *ShellCreate {
	sc.mutation.SetLastModifiedAt(t)
	return sc
}

// SetNillableLastModifiedAt sets the "last_modified_at" field if the given value is not nil.
func (sc *ShellCreate) SetNillableLastModifiedAt(t *time.Time) *ShellCreate {
	if t != nil {
		sc.SetLastModifiedAt(*t)
	}
	return sc
}

// SetClosedAt sets the "closed_at" field.
func (sc *ShellCreate) SetClosedAt(t time.Time) *ShellCreate {
	sc.mutation.SetClosedAt(t)
	return sc
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (sc *ShellCreate) SetNillableClosedAt(t *time.Time) *ShellCreate {
	if t != nil {
		sc.SetClosedAt(*t)
	}
	return sc
}

// SetData sets the "data" field.
func (sc *ShellCreate) SetData(b []byte) *ShellCreate {
	sc.mutation.SetData(b)
	return sc
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (sc *ShellCreate) SetTaskID(id int) *ShellCreate {
	sc.mutation.SetTaskID(id)
	return sc
}

// SetTask sets the "task" edge to the Task entity.
func (sc *ShellCreate) SetTask(t *Task) *ShellCreate {
	return sc.SetTaskID(t.ID)
}

// SetBeaconID sets the "beacon" edge to the Beacon entity by ID.
func (sc *ShellCreate) SetBeaconID(id int) *ShellCreate {
	sc.mutation.SetBeaconID(id)
	return sc
}

// SetBeacon sets the "beacon" edge to the Beacon entity.
func (sc *ShellCreate) SetBeacon(b *Beacon) *ShellCreate {
	return sc.SetBeaconID(b.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sc *ShellCreate) SetOwnerID(id int) *ShellCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetOwner sets the "owner" edge to the User entity.
func (sc *ShellCreate) SetOwner(u *User) *ShellCreate {
	return sc.SetOwnerID(u.ID)
}

// AddActiveUserIDs adds the "active_users" edge to the User entity by IDs.
func (sc *ShellCreate) AddActiveUserIDs(ids ...int) *ShellCreate {
	sc.mutation.AddActiveUserIDs(ids...)
	return sc
}

// AddActiveUsers adds the "active_users" edges to the User entity.
func (sc *ShellCreate) AddActiveUsers(u ...*User) *ShellCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddActiveUserIDs(ids...)
}

// Mutation returns the ShellMutation object of the builder.
func (sc *ShellCreate) Mutation() *ShellMutation {
	return sc.mutation
}

// Save creates the Shell in the database.
func (sc *ShellCreate) Save(ctx context.Context) (*Shell, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShellCreate) SaveX(ctx context.Context) *Shell {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShellCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShellCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShellCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := shell.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.LastModifiedAt(); !ok {
		v := shell.DefaultLastModifiedAt()
		sc.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShellCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Shell.created_at"`)}
	}
	if _, ok := sc.mutation.LastModifiedAt(); !ok {
		return &ValidationError{Name: "last_modified_at", err: errors.New(`ent: missing required field "Shell.last_modified_at"`)}
	}
	if _, ok := sc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "Shell.data"`)}
	}
	if _, ok := sc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "Shell.task"`)}
	}
	if _, ok := sc.mutation.BeaconID(); !ok {
		return &ValidationError{Name: "beacon", err: errors.New(`ent: missing required edge "Shell.beacon"`)}
	}
	if _, ok := sc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Shell.owner"`)}
	}
	return nil
}

func (sc *ShellCreate) sqlSave(ctx context.Context) (*Shell, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShellCreate) createSpec() (*Shell, *sqlgraph.CreateSpec) {
	var (
		_node = &Shell{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(shell.Table, sqlgraph.NewFieldSpec(shell.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(shell.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.LastModifiedAt(); ok {
		_spec.SetField(shell.FieldLastModifiedAt, field.TypeTime, value)
		_node.LastModifiedAt = value
	}
	if value, ok := sc.mutation.ClosedAt(); ok {
		_spec.SetField(shell.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if value, ok := sc.mutation.Data(); ok {
		_spec.SetField(shell.FieldData, field.TypeBytes, value)
		_node.Data = value
	}
	if nodes := sc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.TaskTable,
			Columns: []string{shell.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shell_task = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.BeaconTable,
			Columns: []string{shell.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shell_beacon = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.OwnerTable,
			Columns: []string{shell.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shell_owner = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ActiveUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shell.ActiveUsersTable,
			Columns: shell.ActiveUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Shell.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShellUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *ShellCreate) OnConflict(opts ...sql.ConflictOption) *ShellUpsertOne {
	sc.conflict = opts
	return &ShellUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Shell.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ShellCreate) OnConflictColumns(columns ...string) *ShellUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ShellUpsertOne{
		create: sc,
	}
}

type (
	// ShellUpsertOne is the builder for "upsert"-ing
	//  one Shell node.
	ShellUpsertOne struct {
		create *ShellCreate
	}

	// ShellUpsert is the "OnConflict" setter.
	ShellUpsert struct {
		*sql.UpdateSet
	}
)

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *ShellUpsert) SetLastModifiedAt(v time.Time) *ShellUpsert {
	u.Set(shell.FieldLastModifiedAt, v)
	return u
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *ShellUpsert) UpdateLastModifiedAt() *ShellUpsert {
	u.SetExcluded(shell.FieldLastModifiedAt)
	return u
}

// SetClosedAt sets the "closed_at" field.
func (u *ShellUpsert) SetClosedAt(v time.Time) *ShellUpsert {
	u.Set(shell.FieldClosedAt, v)
	return u
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *ShellUpsert) UpdateClosedAt() *ShellUpsert {
	u.SetExcluded(shell.FieldClosedAt)
	return u
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *ShellUpsert) ClearClosedAt() *ShellUpsert {
	u.SetNull(shell.FieldClosedAt)
	return u
}

// SetData sets the "data" field.
func (u *ShellUpsert) SetData(v []byte) *ShellUpsert {
	u.Set(shell.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ShellUpsert) UpdateData() *ShellUpsert {
	u.SetExcluded(shell.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Shell.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ShellUpsertOne) UpdateNewValues() *ShellUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(shell.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Shell.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShellUpsertOne) Ignore() *ShellUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShellUpsertOne) DoNothing() *ShellUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShellCreate.OnConflict
// documentation for more info.
func (u *ShellUpsertOne) Update(set func(*ShellUpsert)) *ShellUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShellUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *ShellUpsertOne) SetLastModifiedAt(v time.Time) *ShellUpsertOne {
	return u.Update(func(s *ShellUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *ShellUpsertOne) UpdateLastModifiedAt() *ShellUpsertOne {
	return u.Update(func(s *ShellUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *ShellUpsertOne) SetClosedAt(v time.Time) *ShellUpsertOne {
	return u.Update(func(s *ShellUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *ShellUpsertOne) UpdateClosedAt() *ShellUpsertOne {
	return u.Update(func(s *ShellUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *ShellUpsertOne) ClearClosedAt() *ShellUpsertOne {
	return u.Update(func(s *ShellUpsert) {
		s.ClearClosedAt()
	})
}

// SetData sets the "data" field.
func (u *ShellUpsertOne) SetData(v []byte) *ShellUpsertOne {
	return u.Update(func(s *ShellUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ShellUpsertOne) UpdateData() *ShellUpsertOne {
	return u.Update(func(s *ShellUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *ShellUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShellCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShellUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShellUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShellUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShellCreateBulk is the builder for creating many Shell entities in bulk.
type ShellCreateBulk struct {
	config
	err      error
	builders []*ShellCreate
	conflict []sql.ConflictOption
}

// Save creates the Shell entities in the database.
func (scb *ShellCreateBulk) Save(ctx context.Context) ([]*Shell, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shell, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShellMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShellCreateBulk) SaveX(ctx context.Context) []*Shell {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShellCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShellCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Shell.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShellUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *ShellCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShellUpsertBulk {
	scb.conflict = opts
	return &ShellUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Shell.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ShellCreateBulk) OnConflictColumns(columns ...string) *ShellUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ShellUpsertBulk{
		create: scb,
	}
}

// ShellUpsertBulk is the builder for "upsert"-ing
// a bulk of Shell nodes.
type ShellUpsertBulk struct {
	create *ShellCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Shell.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ShellUpsertBulk) UpdateNewValues() *ShellUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(shell.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Shell.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShellUpsertBulk) Ignore() *ShellUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShellUpsertBulk) DoNothing() *ShellUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShellCreateBulk.OnConflict
// documentation for more info.
func (u *ShellUpsertBulk) Update(set func(*ShellUpsert)) *ShellUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShellUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *ShellUpsertBulk) SetLastModifiedAt(v time.Time) *ShellUpsertBulk {
	return u.Update(func(s *ShellUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *ShellUpsertBulk) UpdateLastModifiedAt() *ShellUpsertBulk {
	return u.Update(func(s *ShellUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *ShellUpsertBulk) SetClosedAt(v time.Time) *ShellUpsertBulk {
	return u.Update(func(s *ShellUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *ShellUpsertBulk) UpdateClosedAt() *ShellUpsertBulk {
	return u.Update(func(s *ShellUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *ShellUpsertBulk) ClearClosedAt() *ShellUpsertBulk {
	return u.Update(func(s *ShellUpsert) {
		s.ClearClosedAt()
	})
}

// SetData sets the "data" field.
func (u *ShellUpsertBulk) SetData(v []byte) *ShellUpsertBulk {
	return u.Update(func(s *ShellUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ShellUpsertBulk) UpdateData() *ShellUpsertBulk {
	return u.Update(func(s *ShellUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *ShellUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShellCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShellCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShellUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
