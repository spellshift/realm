// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/shell"
)

// ShellUpdate is the builder for updating Shell entities.
type ShellUpdate struct {
	config
	hooks    []Hook
	mutation *ShellMutation
}

// Where appends a list predicates to the ShellUpdate builder.
func (su *ShellUpdate) Where(ps ...predicate.Shell) *ShellUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (su *ShellUpdate) SetLastModifiedAt(t time.Time) *ShellUpdate {
	su.mutation.SetLastModifiedAt(t)
	return su
}

// SetInput sets the "input" field.
func (su *ShellUpdate) SetInput(b []byte) *ShellUpdate {
	su.mutation.SetInput(b)
	return su
}

// SetOutput sets the "output" field.
func (su *ShellUpdate) SetOutput(b []byte) *ShellUpdate {
	su.mutation.SetOutput(b)
	return su
}

// Mutation returns the ShellMutation object of the builder.
func (su *ShellUpdate) Mutation() *ShellMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShellUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShellUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShellUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShellUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ShellUpdate) defaults() {
	if _, ok := su.mutation.LastModifiedAt(); !ok {
		v := shell.UpdateDefaultLastModifiedAt()
		su.mutation.SetLastModifiedAt(v)
	}
}

func (su *ShellUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shell.Table, shell.Columns, sqlgraph.NewFieldSpec(shell.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.LastModifiedAt(); ok {
		_spec.SetField(shell.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Input(); ok {
		_spec.SetField(shell.FieldInput, field.TypeBytes, value)
	}
	if value, ok := su.mutation.Output(); ok {
		_spec.SetField(shell.FieldOutput, field.TypeBytes, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shell.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShellUpdateOne is the builder for updating a single Shell entity.
type ShellUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShellMutation
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (suo *ShellUpdateOne) SetLastModifiedAt(t time.Time) *ShellUpdateOne {
	suo.mutation.SetLastModifiedAt(t)
	return suo
}

// SetInput sets the "input" field.
func (suo *ShellUpdateOne) SetInput(b []byte) *ShellUpdateOne {
	suo.mutation.SetInput(b)
	return suo
}

// SetOutput sets the "output" field.
func (suo *ShellUpdateOne) SetOutput(b []byte) *ShellUpdateOne {
	suo.mutation.SetOutput(b)
	return suo
}

// Mutation returns the ShellMutation object of the builder.
func (suo *ShellUpdateOne) Mutation() *ShellMutation {
	return suo.mutation
}

// Where appends a list predicates to the ShellUpdate builder.
func (suo *ShellUpdateOne) Where(ps ...predicate.Shell) *ShellUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShellUpdateOne) Select(field string, fields ...string) *ShellUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shell entity.
func (suo *ShellUpdateOne) Save(ctx context.Context) (*Shell, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShellUpdateOne) SaveX(ctx context.Context) *Shell {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShellUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShellUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ShellUpdateOne) defaults() {
	if _, ok := suo.mutation.LastModifiedAt(); !ok {
		v := shell.UpdateDefaultLastModifiedAt()
		suo.mutation.SetLastModifiedAt(v)
	}
}

func (suo *ShellUpdateOne) sqlSave(ctx context.Context) (_node *Shell, err error) {
	_spec := sqlgraph.NewUpdateSpec(shell.Table, shell.Columns, sqlgraph.NewFieldSpec(shell.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shell.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shell.FieldID)
		for _, f := range fields {
			if !shell.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shell.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.LastModifiedAt(); ok {
		_spec.SetField(shell.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Input(); ok {
		_spec.SetField(shell.FieldInput, field.TypeBytes, value)
	}
	if value, ok := suo.mutation.Output(); ok {
		_spec.SetField(shell.FieldOutput, field.TypeBytes, value)
	}
	_node = &Shell{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shell.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
