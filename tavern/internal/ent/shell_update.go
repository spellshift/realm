// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/beacon"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/shell"
	"realm.pub/tavern/internal/ent/task"
	"realm.pub/tavern/internal/ent/user"
)

// ShellUpdate is the builder for updating Shell entities.
type ShellUpdate struct {
	config
	hooks    []Hook
	mutation *ShellMutation
}

// Where appends a list predicates to the ShellUpdate builder.
func (su *ShellUpdate) Where(ps ...predicate.Shell) *ShellUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (su *ShellUpdate) SetLastModifiedAt(t time.Time) *ShellUpdate {
	su.mutation.SetLastModifiedAt(t)
	return su
}

// SetClosedAt sets the "closed_at" field.
func (su *ShellUpdate) SetClosedAt(t time.Time) *ShellUpdate {
	su.mutation.SetClosedAt(t)
	return su
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (su *ShellUpdate) SetNillableClosedAt(t *time.Time) *ShellUpdate {
	if t != nil {
		su.SetClosedAt(*t)
	}
	return su
}

// ClearClosedAt clears the value of the "closed_at" field.
func (su *ShellUpdate) ClearClosedAt() *ShellUpdate {
	su.mutation.ClearClosedAt()
	return su
}

// SetData sets the "data" field.
func (su *ShellUpdate) SetData(b []byte) *ShellUpdate {
	su.mutation.SetData(b)
	return su
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (su *ShellUpdate) SetTaskID(id int) *ShellUpdate {
	su.mutation.SetTaskID(id)
	return su
}

// SetTask sets the "task" edge to the Task entity.
func (su *ShellUpdate) SetTask(t *Task) *ShellUpdate {
	return su.SetTaskID(t.ID)
}

// SetBeaconID sets the "beacon" edge to the Beacon entity by ID.
func (su *ShellUpdate) SetBeaconID(id int) *ShellUpdate {
	su.mutation.SetBeaconID(id)
	return su
}

// SetBeacon sets the "beacon" edge to the Beacon entity.
func (su *ShellUpdate) SetBeacon(b *Beacon) *ShellUpdate {
	return su.SetBeaconID(b.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (su *ShellUpdate) SetOwnerID(id int) *ShellUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetOwner sets the "owner" edge to the User entity.
func (su *ShellUpdate) SetOwner(u *User) *ShellUpdate {
	return su.SetOwnerID(u.ID)
}

// AddActiveUserIDs adds the "active_users" edge to the User entity by IDs.
func (su *ShellUpdate) AddActiveUserIDs(ids ...int) *ShellUpdate {
	su.mutation.AddActiveUserIDs(ids...)
	return su
}

// AddActiveUsers adds the "active_users" edges to the User entity.
func (su *ShellUpdate) AddActiveUsers(u ...*User) *ShellUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddActiveUserIDs(ids...)
}

// Mutation returns the ShellMutation object of the builder.
func (su *ShellUpdate) Mutation() *ShellMutation {
	return su.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (su *ShellUpdate) ClearTask() *ShellUpdate {
	su.mutation.ClearTask()
	return su
}

// ClearBeacon clears the "beacon" edge to the Beacon entity.
func (su *ShellUpdate) ClearBeacon() *ShellUpdate {
	su.mutation.ClearBeacon()
	return su
}

// ClearOwner clears the "owner" edge to the User entity.
func (su *ShellUpdate) ClearOwner() *ShellUpdate {
	su.mutation.ClearOwner()
	return su
}

// ClearActiveUsers clears all "active_users" edges to the User entity.
func (su *ShellUpdate) ClearActiveUsers() *ShellUpdate {
	su.mutation.ClearActiveUsers()
	return su
}

// RemoveActiveUserIDs removes the "active_users" edge to User entities by IDs.
func (su *ShellUpdate) RemoveActiveUserIDs(ids ...int) *ShellUpdate {
	su.mutation.RemoveActiveUserIDs(ids...)
	return su
}

// RemoveActiveUsers removes "active_users" edges to User entities.
func (su *ShellUpdate) RemoveActiveUsers(u ...*User) *ShellUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveActiveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShellUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShellUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShellUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShellUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ShellUpdate) defaults() {
	if _, ok := su.mutation.LastModifiedAt(); !ok {
		v := shell.UpdateDefaultLastModifiedAt()
		su.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShellUpdate) check() error {
	if _, ok := su.mutation.TaskID(); su.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shell.task"`)
	}
	if _, ok := su.mutation.BeaconID(); su.mutation.BeaconCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shell.beacon"`)
	}
	if _, ok := su.mutation.OwnerID(); su.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shell.owner"`)
	}
	return nil
}

func (su *ShellUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shell.Table, shell.Columns, sqlgraph.NewFieldSpec(shell.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.LastModifiedAt(); ok {
		_spec.SetField(shell.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.ClosedAt(); ok {
		_spec.SetField(shell.FieldClosedAt, field.TypeTime, value)
	}
	if su.mutation.ClosedAtCleared() {
		_spec.ClearField(shell.FieldClosedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Data(); ok {
		_spec.SetField(shell.FieldData, field.TypeBytes, value)
	}
	if su.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.TaskTable,
			Columns: []string{shell.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.TaskTable,
			Columns: []string{shell.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BeaconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.BeaconTable,
			Columns: []string{shell.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.BeaconTable,
			Columns: []string{shell.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.OwnerTable,
			Columns: []string{shell.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.OwnerTable,
			Columns: []string{shell.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ActiveUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shell.ActiveUsersTable,
			Columns: shell.ActiveUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedActiveUsersIDs(); len(nodes) > 0 && !su.mutation.ActiveUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shell.ActiveUsersTable,
			Columns: shell.ActiveUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ActiveUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shell.ActiveUsersTable,
			Columns: shell.ActiveUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shell.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShellUpdateOne is the builder for updating a single Shell entity.
type ShellUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShellMutation
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (suo *ShellUpdateOne) SetLastModifiedAt(t time.Time) *ShellUpdateOne {
	suo.mutation.SetLastModifiedAt(t)
	return suo
}

// SetClosedAt sets the "closed_at" field.
func (suo *ShellUpdateOne) SetClosedAt(t time.Time) *ShellUpdateOne {
	suo.mutation.SetClosedAt(t)
	return suo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (suo *ShellUpdateOne) SetNillableClosedAt(t *time.Time) *ShellUpdateOne {
	if t != nil {
		suo.SetClosedAt(*t)
	}
	return suo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (suo *ShellUpdateOne) ClearClosedAt() *ShellUpdateOne {
	suo.mutation.ClearClosedAt()
	return suo
}

// SetData sets the "data" field.
func (suo *ShellUpdateOne) SetData(b []byte) *ShellUpdateOne {
	suo.mutation.SetData(b)
	return suo
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (suo *ShellUpdateOne) SetTaskID(id int) *ShellUpdateOne {
	suo.mutation.SetTaskID(id)
	return suo
}

// SetTask sets the "task" edge to the Task entity.
func (suo *ShellUpdateOne) SetTask(t *Task) *ShellUpdateOne {
	return suo.SetTaskID(t.ID)
}

// SetBeaconID sets the "beacon" edge to the Beacon entity by ID.
func (suo *ShellUpdateOne) SetBeaconID(id int) *ShellUpdateOne {
	suo.mutation.SetBeaconID(id)
	return suo
}

// SetBeacon sets the "beacon" edge to the Beacon entity.
func (suo *ShellUpdateOne) SetBeacon(b *Beacon) *ShellUpdateOne {
	return suo.SetBeaconID(b.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (suo *ShellUpdateOne) SetOwnerID(id int) *ShellUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetOwner sets the "owner" edge to the User entity.
func (suo *ShellUpdateOne) SetOwner(u *User) *ShellUpdateOne {
	return suo.SetOwnerID(u.ID)
}

// AddActiveUserIDs adds the "active_users" edge to the User entity by IDs.
func (suo *ShellUpdateOne) AddActiveUserIDs(ids ...int) *ShellUpdateOne {
	suo.mutation.AddActiveUserIDs(ids...)
	return suo
}

// AddActiveUsers adds the "active_users" edges to the User entity.
func (suo *ShellUpdateOne) AddActiveUsers(u ...*User) *ShellUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddActiveUserIDs(ids...)
}

// Mutation returns the ShellMutation object of the builder.
func (suo *ShellUpdateOne) Mutation() *ShellMutation {
	return suo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (suo *ShellUpdateOne) ClearTask() *ShellUpdateOne {
	suo.mutation.ClearTask()
	return suo
}

// ClearBeacon clears the "beacon" edge to the Beacon entity.
func (suo *ShellUpdateOne) ClearBeacon() *ShellUpdateOne {
	suo.mutation.ClearBeacon()
	return suo
}

// ClearOwner clears the "owner" edge to the User entity.
func (suo *ShellUpdateOne) ClearOwner() *ShellUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// ClearActiveUsers clears all "active_users" edges to the User entity.
func (suo *ShellUpdateOne) ClearActiveUsers() *ShellUpdateOne {
	suo.mutation.ClearActiveUsers()
	return suo
}

// RemoveActiveUserIDs removes the "active_users" edge to User entities by IDs.
func (suo *ShellUpdateOne) RemoveActiveUserIDs(ids ...int) *ShellUpdateOne {
	suo.mutation.RemoveActiveUserIDs(ids...)
	return suo
}

// RemoveActiveUsers removes "active_users" edges to User entities.
func (suo *ShellUpdateOne) RemoveActiveUsers(u ...*User) *ShellUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveActiveUserIDs(ids...)
}

// Where appends a list predicates to the ShellUpdate builder.
func (suo *ShellUpdateOne) Where(ps ...predicate.Shell) *ShellUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShellUpdateOne) Select(field string, fields ...string) *ShellUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shell entity.
func (suo *ShellUpdateOne) Save(ctx context.Context) (*Shell, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShellUpdateOne) SaveX(ctx context.Context) *Shell {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShellUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShellUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ShellUpdateOne) defaults() {
	if _, ok := suo.mutation.LastModifiedAt(); !ok {
		v := shell.UpdateDefaultLastModifiedAt()
		suo.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShellUpdateOne) check() error {
	if _, ok := suo.mutation.TaskID(); suo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shell.task"`)
	}
	if _, ok := suo.mutation.BeaconID(); suo.mutation.BeaconCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shell.beacon"`)
	}
	if _, ok := suo.mutation.OwnerID(); suo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shell.owner"`)
	}
	return nil
}

func (suo *ShellUpdateOne) sqlSave(ctx context.Context) (_node *Shell, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shell.Table, shell.Columns, sqlgraph.NewFieldSpec(shell.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shell.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shell.FieldID)
		for _, f := range fields {
			if !shell.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shell.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.LastModifiedAt(); ok {
		_spec.SetField(shell.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ClosedAt(); ok {
		_spec.SetField(shell.FieldClosedAt, field.TypeTime, value)
	}
	if suo.mutation.ClosedAtCleared() {
		_spec.ClearField(shell.FieldClosedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Data(); ok {
		_spec.SetField(shell.FieldData, field.TypeBytes, value)
	}
	if suo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.TaskTable,
			Columns: []string{shell.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.TaskTable,
			Columns: []string{shell.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BeaconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.BeaconTable,
			Columns: []string{shell.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.BeaconTable,
			Columns: []string{shell.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.OwnerTable,
			Columns: []string{shell.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shell.OwnerTable,
			Columns: []string{shell.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ActiveUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shell.ActiveUsersTable,
			Columns: shell.ActiveUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedActiveUsersIDs(); len(nodes) > 0 && !suo.mutation.ActiveUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shell.ActiveUsersTable,
			Columns: shell.ActiveUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ActiveUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shell.ActiveUsersTable,
			Columns: shell.ActiveUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shell{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shell.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
