// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"realm.pub/tavern/internal/ent/beacon"
	"realm.pub/tavern/internal/ent/quest"
	"realm.pub/tavern/internal/ent/task"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp of when this ent was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Timestamp of when this ent was last updated
	LastModifiedAt time.Time `json:"last_modified_at,omitempty"`
	// Timestamp of when the task was claimed, null if not yet claimed
	ClaimedAt time.Time `json:"claimed_at,omitempty"`
	// Timestamp of when execution of the task started, null if not yet started
	ExecStartedAt time.Time `json:"exec_started_at,omitempty"`
	// Timestamp of when execution of the task finished, null if not yet finished
	ExecFinishedAt time.Time `json:"exec_finished_at,omitempty"`
	// Output from executing the task
	Output string `json:"output,omitempty"`
	// The size of the output in bytes
	OutputSize int `json:"output_size,omitempty"`
	// Error, if any, produced while executing the Task
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	quest_tasks  *int
	task_beacon  *int
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Quest holds the value of the quest edge.
	Quest *Quest `json:"quest,omitempty"`
	// Beacon holds the value of the beacon edge.
	Beacon *Beacon `json:"beacon,omitempty"`
	// Files that have been reported by this task.
	ReportedFiles []*HostFile `json:"reported_files,omitempty"`
	// Processes that have been reported by this task.
	ReportedProcesses []*HostProcess `json:"reported_processes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedReportedFiles     map[string][]*HostFile
	namedReportedProcesses map[string][]*HostProcess
}

// QuestOrErr returns the Quest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) QuestOrErr() (*Quest, error) {
	if e.loadedTypes[0] {
		if e.Quest == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: quest.Label}
		}
		return e.Quest, nil
	}
	return nil, &NotLoadedError{edge: "quest"}
}

// BeaconOrErr returns the Beacon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) BeaconOrErr() (*Beacon, error) {
	if e.loadedTypes[1] {
		if e.Beacon == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: beacon.Label}
		}
		return e.Beacon, nil
	}
	return nil, &NotLoadedError{edge: "beacon"}
}

// ReportedFilesOrErr returns the ReportedFiles value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ReportedFilesOrErr() ([]*HostFile, error) {
	if e.loadedTypes[2] {
		return e.ReportedFiles, nil
	}
	return nil, &NotLoadedError{edge: "reported_files"}
}

// ReportedProcessesOrErr returns the ReportedProcesses value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ReportedProcessesOrErr() ([]*HostProcess, error) {
	if e.loadedTypes[3] {
		return e.ReportedProcesses, nil
	}
	return nil, &NotLoadedError{edge: "reported_processes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldID, task.FieldOutputSize:
			values[i] = new(sql.NullInt64)
		case task.FieldOutput, task.FieldError:
			values[i] = new(sql.NullString)
		case task.FieldCreatedAt, task.FieldLastModifiedAt, task.FieldClaimedAt, task.FieldExecStartedAt, task.FieldExecFinishedAt:
			values[i] = new(sql.NullTime)
		case task.ForeignKeys[0]: // quest_tasks
			values[i] = new(sql.NullInt64)
		case task.ForeignKeys[1]: // task_beacon
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldLastModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_at", values[i])
			} else if value.Valid {
				t.LastModifiedAt = value.Time
			}
		case task.FieldClaimedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field claimed_at", values[i])
			} else if value.Valid {
				t.ClaimedAt = value.Time
			}
		case task.FieldExecStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field exec_started_at", values[i])
			} else if value.Valid {
				t.ExecStartedAt = value.Time
			}
		case task.FieldExecFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field exec_finished_at", values[i])
			} else if value.Valid {
				t.ExecFinishedAt = value.Time
			}
		case task.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				t.Output = value.String
			}
		case task.FieldOutputSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_size", values[i])
			} else if value.Valid {
				t.OutputSize = int(value.Int64)
			}
		case task.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				t.Error = value.String
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field quest_tasks", value)
			} else if value.Valid {
				t.quest_tasks = new(int)
				*t.quest_tasks = int(value.Int64)
			}
		case task.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_beacon", value)
			} else if value.Valid {
				t.task_beacon = new(int)
				*t.task_beacon = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryQuest queries the "quest" edge of the Task entity.
func (t *Task) QueryQuest() *QuestQuery {
	return NewTaskClient(t.config).QueryQuest(t)
}

// QueryBeacon queries the "beacon" edge of the Task entity.
func (t *Task) QueryBeacon() *BeaconQuery {
	return NewTaskClient(t.config).QueryBeacon(t)
}

// QueryReportedFiles queries the "reported_files" edge of the Task entity.
func (t *Task) QueryReportedFiles() *HostFileQuery {
	return NewTaskClient(t.config).QueryReportedFiles(t)
}

// QueryReportedProcesses queries the "reported_processes" edge of the Task entity.
func (t *Task) QueryReportedProcesses() *HostProcessQuery {
	return NewTaskClient(t.config).QueryReportedProcesses(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_modified_at=")
	builder.WriteString(t.LastModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("claimed_at=")
	builder.WriteString(t.ClaimedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("exec_started_at=")
	builder.WriteString(t.ExecStartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("exec_finished_at=")
	builder.WriteString(t.ExecFinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(t.Output)
	builder.WriteString(", ")
	builder.WriteString("output_size=")
	builder.WriteString(fmt.Sprintf("%v", t.OutputSize))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(t.Error)
	builder.WriteByte(')')
	return builder.String()
}

// NamedReportedFiles returns the ReportedFiles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedReportedFiles(name string) ([]*HostFile, error) {
	if t.Edges.namedReportedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedReportedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedReportedFiles(name string, edges ...*HostFile) {
	if t.Edges.namedReportedFiles == nil {
		t.Edges.namedReportedFiles = make(map[string][]*HostFile)
	}
	if len(edges) == 0 {
		t.Edges.namedReportedFiles[name] = []*HostFile{}
	} else {
		t.Edges.namedReportedFiles[name] = append(t.Edges.namedReportedFiles[name], edges...)
	}
}

// NamedReportedProcesses returns the ReportedProcesses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedReportedProcesses(name string) ([]*HostProcess, error) {
	if t.Edges.namedReportedProcesses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedReportedProcesses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedReportedProcesses(name string, edges ...*HostProcess) {
	if t.Edges.namedReportedProcesses == nil {
		t.Edges.namedReportedProcesses = make(map[string][]*HostProcess)
	}
	if len(edges) == 0 {
		t.Edges.namedReportedProcesses[name] = []*HostProcess{}
	} else {
		t.Edges.namedReportedProcesses[name] = append(t.Edges.namedReportedProcesses[name], edges...)
	}
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
