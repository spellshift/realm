// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"realm.pub/tavern/internal/ent/file"
	"realm.pub/tavern/internal/ent/predicate"
	"realm.pub/tavern/internal/ent/repository"
	"realm.pub/tavern/internal/ent/tome"
	"realm.pub/tavern/internal/ent/user"
)

// TomeUpdate is the builder for updating Tome entities.
type TomeUpdate struct {
	config
	hooks    []Hook
	mutation *TomeMutation
}

// Where appends a list predicates to the TomeUpdate builder.
func (tu *TomeUpdate) Where(ps ...predicate.Tome) *TomeUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (tu *TomeUpdate) SetLastModifiedAt(t time.Time) *TomeUpdate {
	tu.mutation.SetLastModifiedAt(t)
	return tu
}

// SetName sets the "name" field.
func (tu *TomeUpdate) SetName(s string) *TomeUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TomeUpdate) SetDescription(s string) *TomeUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetAuthor sets the "author" field.
func (tu *TomeUpdate) SetAuthor(s string) *TomeUpdate {
	tu.mutation.SetAuthor(s)
	return tu
}

// SetSupportModel sets the "support_model" field.
func (tu *TomeUpdate) SetSupportModel(tm tome.SupportModel) *TomeUpdate {
	tu.mutation.SetSupportModel(tm)
	return tu
}

// SetNillableSupportModel sets the "support_model" field if the given value is not nil.
func (tu *TomeUpdate) SetNillableSupportModel(tm *tome.SupportModel) *TomeUpdate {
	if tm != nil {
		tu.SetSupportModel(*tm)
	}
	return tu
}

// SetTactic sets the "tactic" field.
func (tu *TomeUpdate) SetTactic(t tome.Tactic) *TomeUpdate {
	tu.mutation.SetTactic(t)
	return tu
}

// SetNillableTactic sets the "tactic" field if the given value is not nil.
func (tu *TomeUpdate) SetNillableTactic(t *tome.Tactic) *TomeUpdate {
	if t != nil {
		tu.SetTactic(*t)
	}
	return tu
}

// SetParamDefs sets the "param_defs" field.
func (tu *TomeUpdate) SetParamDefs(s string) *TomeUpdate {
	tu.mutation.SetParamDefs(s)
	return tu
}

// SetNillableParamDefs sets the "param_defs" field if the given value is not nil.
func (tu *TomeUpdate) SetNillableParamDefs(s *string) *TomeUpdate {
	if s != nil {
		tu.SetParamDefs(*s)
	}
	return tu
}

// ClearParamDefs clears the value of the "param_defs" field.
func (tu *TomeUpdate) ClearParamDefs() *TomeUpdate {
	tu.mutation.ClearParamDefs()
	return tu
}

// SetHash sets the "hash" field.
func (tu *TomeUpdate) SetHash(s string) *TomeUpdate {
	tu.mutation.SetHash(s)
	return tu
}

// SetEldritch sets the "eldritch" field.
func (tu *TomeUpdate) SetEldritch(s string) *TomeUpdate {
	tu.mutation.SetEldritch(s)
	return tu
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (tu *TomeUpdate) AddFileIDs(ids ...int) *TomeUpdate {
	tu.mutation.AddFileIDs(ids...)
	return tu
}

// AddFiles adds the "files" edges to the File entity.
func (tu *TomeUpdate) AddFiles(f ...*File) *TomeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.AddFileIDs(ids...)
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (tu *TomeUpdate) SetUploaderID(id int) *TomeUpdate {
	tu.mutation.SetUploaderID(id)
	return tu
}

// SetNillableUploaderID sets the "uploader" edge to the User entity by ID if the given value is not nil.
func (tu *TomeUpdate) SetNillableUploaderID(id *int) *TomeUpdate {
	if id != nil {
		tu = tu.SetUploaderID(*id)
	}
	return tu
}

// SetUploader sets the "uploader" edge to the User entity.
func (tu *TomeUpdate) SetUploader(u *User) *TomeUpdate {
	return tu.SetUploaderID(u.ID)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (tu *TomeUpdate) SetRepositoryID(id int) *TomeUpdate {
	tu.mutation.SetRepositoryID(id)
	return tu
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (tu *TomeUpdate) SetNillableRepositoryID(id *int) *TomeUpdate {
	if id != nil {
		tu = tu.SetRepositoryID(*id)
	}
	return tu
}

// SetRepository sets the "repository" edge to the Repository entity.
func (tu *TomeUpdate) SetRepository(r *Repository) *TomeUpdate {
	return tu.SetRepositoryID(r.ID)
}

// Mutation returns the TomeMutation object of the builder.
func (tu *TomeUpdate) Mutation() *TomeMutation {
	return tu.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (tu *TomeUpdate) ClearFiles() *TomeUpdate {
	tu.mutation.ClearFiles()
	return tu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (tu *TomeUpdate) RemoveFileIDs(ids ...int) *TomeUpdate {
	tu.mutation.RemoveFileIDs(ids...)
	return tu
}

// RemoveFiles removes "files" edges to File entities.
func (tu *TomeUpdate) RemoveFiles(f ...*File) *TomeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.RemoveFileIDs(ids...)
}

// ClearUploader clears the "uploader" edge to the User entity.
func (tu *TomeUpdate) ClearUploader() *TomeUpdate {
	tu.mutation.ClearUploader()
	return tu
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (tu *TomeUpdate) ClearRepository() *TomeUpdate {
	tu.mutation.ClearRepository()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TomeUpdate) Save(ctx context.Context) (int, error) {
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TomeUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TomeUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TomeUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TomeUpdate) defaults() error {
	if _, ok := tu.mutation.LastModifiedAt(); !ok {
		if tome.UpdateDefaultLastModifiedAt == nil {
			return fmt.Errorf("ent: uninitialized tome.UpdateDefaultLastModifiedAt (forgotten import ent/runtime?)")
		}
		v := tome.UpdateDefaultLastModifiedAt()
		tu.mutation.SetLastModifiedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TomeUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tome.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tome.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SupportModel(); ok {
		if err := tome.SupportModelValidator(v); err != nil {
			return &ValidationError{Name: "support_model", err: fmt.Errorf(`ent: validator failed for field "Tome.support_model": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Tactic(); ok {
		if err := tome.TacticValidator(v); err != nil {
			return &ValidationError{Name: "tactic", err: fmt.Errorf(`ent: validator failed for field "Tome.tactic": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ParamDefs(); ok {
		if err := tome.ParamDefsValidator(v); err != nil {
			return &ValidationError{Name: "param_defs", err: fmt.Errorf(`ent: validator failed for field "Tome.param_defs": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Hash(); ok {
		if err := tome.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Tome.hash": %w`, err)}
		}
	}
	return nil
}

func (tu *TomeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tome.Table, tome.Columns, sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.LastModifiedAt(); ok {
		_spec.SetField(tome.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tome.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(tome.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Author(); ok {
		_spec.SetField(tome.FieldAuthor, field.TypeString, value)
	}
	if value, ok := tu.mutation.SupportModel(); ok {
		_spec.SetField(tome.FieldSupportModel, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Tactic(); ok {
		_spec.SetField(tome.FieldTactic, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.ParamDefs(); ok {
		_spec.SetField(tome.FieldParamDefs, field.TypeString, value)
	}
	if tu.mutation.ParamDefsCleared() {
		_spec.ClearField(tome.FieldParamDefs, field.TypeString)
	}
	if value, ok := tu.mutation.Hash(); ok {
		_spec.SetField(tome.FieldHash, field.TypeString, value)
	}
	if value, ok := tu.mutation.Eldritch(); ok {
		_spec.SetField(tome.FieldEldritch, field.TypeString, value)
	}
	if tu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tome.FilesTable,
			Columns: tome.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !tu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tome.FilesTable,
			Columns: tome.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tome.FilesTable,
			Columns: tome.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tome.UploaderTable,
			Columns: []string{tome.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tome.UploaderTable,
			Columns: []string{tome.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tome.RepositoryTable,
			Columns: []string{tome.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tome.RepositoryTable,
			Columns: []string{tome.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tome.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TomeUpdateOne is the builder for updating a single Tome entity.
type TomeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TomeMutation
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (tuo *TomeUpdateOne) SetLastModifiedAt(t time.Time) *TomeUpdateOne {
	tuo.mutation.SetLastModifiedAt(t)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TomeUpdateOne) SetName(s string) *TomeUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TomeUpdateOne) SetDescription(s string) *TomeUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetAuthor sets the "author" field.
func (tuo *TomeUpdateOne) SetAuthor(s string) *TomeUpdateOne {
	tuo.mutation.SetAuthor(s)
	return tuo
}

// SetSupportModel sets the "support_model" field.
func (tuo *TomeUpdateOne) SetSupportModel(tm tome.SupportModel) *TomeUpdateOne {
	tuo.mutation.SetSupportModel(tm)
	return tuo
}

// SetNillableSupportModel sets the "support_model" field if the given value is not nil.
func (tuo *TomeUpdateOne) SetNillableSupportModel(tm *tome.SupportModel) *TomeUpdateOne {
	if tm != nil {
		tuo.SetSupportModel(*tm)
	}
	return tuo
}

// SetTactic sets the "tactic" field.
func (tuo *TomeUpdateOne) SetTactic(t tome.Tactic) *TomeUpdateOne {
	tuo.mutation.SetTactic(t)
	return tuo
}

// SetNillableTactic sets the "tactic" field if the given value is not nil.
func (tuo *TomeUpdateOne) SetNillableTactic(t *tome.Tactic) *TomeUpdateOne {
	if t != nil {
		tuo.SetTactic(*t)
	}
	return tuo
}

// SetParamDefs sets the "param_defs" field.
func (tuo *TomeUpdateOne) SetParamDefs(s string) *TomeUpdateOne {
	tuo.mutation.SetParamDefs(s)
	return tuo
}

// SetNillableParamDefs sets the "param_defs" field if the given value is not nil.
func (tuo *TomeUpdateOne) SetNillableParamDefs(s *string) *TomeUpdateOne {
	if s != nil {
		tuo.SetParamDefs(*s)
	}
	return tuo
}

// ClearParamDefs clears the value of the "param_defs" field.
func (tuo *TomeUpdateOne) ClearParamDefs() *TomeUpdateOne {
	tuo.mutation.ClearParamDefs()
	return tuo
}

// SetHash sets the "hash" field.
func (tuo *TomeUpdateOne) SetHash(s string) *TomeUpdateOne {
	tuo.mutation.SetHash(s)
	return tuo
}

// SetEldritch sets the "eldritch" field.
func (tuo *TomeUpdateOne) SetEldritch(s string) *TomeUpdateOne {
	tuo.mutation.SetEldritch(s)
	return tuo
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (tuo *TomeUpdateOne) AddFileIDs(ids ...int) *TomeUpdateOne {
	tuo.mutation.AddFileIDs(ids...)
	return tuo
}

// AddFiles adds the "files" edges to the File entity.
func (tuo *TomeUpdateOne) AddFiles(f ...*File) *TomeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.AddFileIDs(ids...)
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (tuo *TomeUpdateOne) SetUploaderID(id int) *TomeUpdateOne {
	tuo.mutation.SetUploaderID(id)
	return tuo
}

// SetNillableUploaderID sets the "uploader" edge to the User entity by ID if the given value is not nil.
func (tuo *TomeUpdateOne) SetNillableUploaderID(id *int) *TomeUpdateOne {
	if id != nil {
		tuo = tuo.SetUploaderID(*id)
	}
	return tuo
}

// SetUploader sets the "uploader" edge to the User entity.
func (tuo *TomeUpdateOne) SetUploader(u *User) *TomeUpdateOne {
	return tuo.SetUploaderID(u.ID)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (tuo *TomeUpdateOne) SetRepositoryID(id int) *TomeUpdateOne {
	tuo.mutation.SetRepositoryID(id)
	return tuo
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (tuo *TomeUpdateOne) SetNillableRepositoryID(id *int) *TomeUpdateOne {
	if id != nil {
		tuo = tuo.SetRepositoryID(*id)
	}
	return tuo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (tuo *TomeUpdateOne) SetRepository(r *Repository) *TomeUpdateOne {
	return tuo.SetRepositoryID(r.ID)
}

// Mutation returns the TomeMutation object of the builder.
func (tuo *TomeUpdateOne) Mutation() *TomeMutation {
	return tuo.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (tuo *TomeUpdateOne) ClearFiles() *TomeUpdateOne {
	tuo.mutation.ClearFiles()
	return tuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (tuo *TomeUpdateOne) RemoveFileIDs(ids ...int) *TomeUpdateOne {
	tuo.mutation.RemoveFileIDs(ids...)
	return tuo
}

// RemoveFiles removes "files" edges to File entities.
func (tuo *TomeUpdateOne) RemoveFiles(f ...*File) *TomeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.RemoveFileIDs(ids...)
}

// ClearUploader clears the "uploader" edge to the User entity.
func (tuo *TomeUpdateOne) ClearUploader() *TomeUpdateOne {
	tuo.mutation.ClearUploader()
	return tuo
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (tuo *TomeUpdateOne) ClearRepository() *TomeUpdateOne {
	tuo.mutation.ClearRepository()
	return tuo
}

// Where appends a list predicates to the TomeUpdate builder.
func (tuo *TomeUpdateOne) Where(ps ...predicate.Tome) *TomeUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TomeUpdateOne) Select(field string, fields ...string) *TomeUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tome entity.
func (tuo *TomeUpdateOne) Save(ctx context.Context) (*Tome, error) {
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TomeUpdateOne) SaveX(ctx context.Context) *Tome {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TomeUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TomeUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TomeUpdateOne) defaults() error {
	if _, ok := tuo.mutation.LastModifiedAt(); !ok {
		if tome.UpdateDefaultLastModifiedAt == nil {
			return fmt.Errorf("ent: uninitialized tome.UpdateDefaultLastModifiedAt (forgotten import ent/runtime?)")
		}
		v := tome.UpdateDefaultLastModifiedAt()
		tuo.mutation.SetLastModifiedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TomeUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tome.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tome.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SupportModel(); ok {
		if err := tome.SupportModelValidator(v); err != nil {
			return &ValidationError{Name: "support_model", err: fmt.Errorf(`ent: validator failed for field "Tome.support_model": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Tactic(); ok {
		if err := tome.TacticValidator(v); err != nil {
			return &ValidationError{Name: "tactic", err: fmt.Errorf(`ent: validator failed for field "Tome.tactic": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ParamDefs(); ok {
		if err := tome.ParamDefsValidator(v); err != nil {
			return &ValidationError{Name: "param_defs", err: fmt.Errorf(`ent: validator failed for field "Tome.param_defs": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Hash(); ok {
		if err := tome.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Tome.hash": %w`, err)}
		}
	}
	return nil
}

func (tuo *TomeUpdateOne) sqlSave(ctx context.Context) (_node *Tome, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tome.Table, tome.Columns, sqlgraph.NewFieldSpec(tome.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tome.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tome.FieldID)
		for _, f := range fields {
			if !tome.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tome.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.LastModifiedAt(); ok {
		_spec.SetField(tome.FieldLastModifiedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tome.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(tome.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Author(); ok {
		_spec.SetField(tome.FieldAuthor, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SupportModel(); ok {
		_spec.SetField(tome.FieldSupportModel, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Tactic(); ok {
		_spec.SetField(tome.FieldTactic, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.ParamDefs(); ok {
		_spec.SetField(tome.FieldParamDefs, field.TypeString, value)
	}
	if tuo.mutation.ParamDefsCleared() {
		_spec.ClearField(tome.FieldParamDefs, field.TypeString)
	}
	if value, ok := tuo.mutation.Hash(); ok {
		_spec.SetField(tome.FieldHash, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Eldritch(); ok {
		_spec.SetField(tome.FieldEldritch, field.TypeString, value)
	}
	if tuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tome.FilesTable,
			Columns: tome.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !tuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tome.FilesTable,
			Columns: tome.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tome.FilesTable,
			Columns: tome.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tome.UploaderTable,
			Columns: []string{tome.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tome.UploaderTable,
			Columns: []string{tome.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tome.RepositoryTable,
			Columns: []string{tome.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tome.RepositoryTable,
			Columns: []string{tome.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tome{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tome.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
