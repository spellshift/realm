// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOauthID holds the string denoting the oauth_id field in the database.
	FieldOauthID = "oauth_id"
	// FieldPhotoURL holds the string denoting the photo_url field in the database.
	FieldPhotoURL = "photo_url"
	// FieldSessionToken holds the string denoting the session_token field in the database.
	FieldSessionToken = "session_token"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldIsActivated holds the string denoting the is_activated field in the database.
	FieldIsActivated = "is_activated"
	// FieldIsAdmin holds the string denoting the is_admin field in the database.
	FieldIsAdmin = "is_admin"
	// EdgeTomes holds the string denoting the tomes edge name in mutations.
	EdgeTomes = "tomes"
	// EdgeActiveShells holds the string denoting the active_shells edge name in mutations.
	EdgeActiveShells = "active_shells"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TomesTable is the table that holds the tomes relation/edge.
	TomesTable = "tomes"
	// TomesInverseTable is the table name for the Tome entity.
	// It exists in this package in order to avoid circular dependency with the "tome" package.
	TomesInverseTable = "tomes"
	// TomesColumn is the table column denoting the tomes relation/edge.
	TomesColumn = "tome_uploader"
	// ActiveShellsTable is the table that holds the active_shells relation/edge. The primary key declared below.
	ActiveShellsTable = "shell_active_users"
	// ActiveShellsInverseTable is the table name for the Shell entity.
	// It exists in this package in order to avoid circular dependency with the "shell" package.
	ActiveShellsInverseTable = "shells"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOauthID,
	FieldPhotoURL,
	FieldSessionToken,
	FieldAccessToken,
	FieldIsActivated,
	FieldIsAdmin,
}

var (
	// ActiveShellsPrimaryKey and ActiveShellsColumn2 are the table columns denoting the
	// primary key for the active_shells relation (M2M).
	ActiveShellsPrimaryKey = []string{"shell_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultSessionToken holds the default value on creation for the "session_token" field.
	DefaultSessionToken func() string
	// SessionTokenValidator is a validator for the "session_token" field. It is called by the builders before save.
	SessionTokenValidator func(string) error
	// DefaultAccessToken holds the default value on creation for the "access_token" field.
	DefaultAccessToken func() string
	// AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	AccessTokenValidator func(string) error
	// DefaultIsActivated holds the default value on creation for the "is_activated" field.
	DefaultIsActivated bool
	// DefaultIsAdmin holds the default value on creation for the "is_admin" field.
	DefaultIsAdmin bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOauthID orders the results by the oauth_id field.
func ByOauthID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOauthID, opts...).ToFunc()
}

// ByPhotoURL orders the results by the photo_url field.
func ByPhotoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL, opts...).ToFunc()
}

// BySessionToken orders the results by the session_token field.
func BySessionToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionToken, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByIsActivated orders the results by the is_activated field.
func ByIsActivated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActivated, opts...).ToFunc()
}

// ByIsAdmin orders the results by the is_admin field.
func ByIsAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAdmin, opts...).ToFunc()
}

// ByTomesCount orders the results by tomes count.
func ByTomesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTomesStep(), opts...)
	}
}

// ByTomes orders the results by tomes terms.
func ByTomes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTomesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActiveShellsCount orders the results by active_shells count.
func ByActiveShellsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActiveShellsStep(), opts...)
	}
}

// ByActiveShells orders the results by active_shells terms.
func ByActiveShells(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActiveShellsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTomesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TomesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TomesTable, TomesColumn),
	)
}
func newActiveShellsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActiveShellsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ActiveShellsTable, ActiveShellsPrimaryKey...),
	)
}
