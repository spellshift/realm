// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"realm.pub/tavern/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// OauthID applies equality check predicate on the "oauth_id" field. It's identical to OauthIDEQ.
func OauthID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOauthID, v))
}

// PhotoURL applies equality check predicate on the "photo_url" field. It's identical to PhotoURLEQ.
func PhotoURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhotoURL, v))
}

// SessionToken applies equality check predicate on the "session_token" field. It's identical to SessionTokenEQ.
func SessionToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSessionToken, v))
}

// IsActivated applies equality check predicate on the "is_activated" field. It's identical to IsActivatedEQ.
func IsActivated(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActivated, v))
}

// IsAdmin applies equality check predicate on the "is_admin" field. It's identical to IsAdminEQ.
func IsAdmin(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsAdmin, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// OauthIDEQ applies the EQ predicate on the "oauth_id" field.
func OauthIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOauthID, v))
}

// OauthIDNEQ applies the NEQ predicate on the "oauth_id" field.
func OauthIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOauthID, v))
}

// OauthIDIn applies the In predicate on the "oauth_id" field.
func OauthIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOauthID, vs...))
}

// OauthIDNotIn applies the NotIn predicate on the "oauth_id" field.
func OauthIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOauthID, vs...))
}

// OauthIDGT applies the GT predicate on the "oauth_id" field.
func OauthIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOauthID, v))
}

// OauthIDGTE applies the GTE predicate on the "oauth_id" field.
func OauthIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOauthID, v))
}

// OauthIDLT applies the LT predicate on the "oauth_id" field.
func OauthIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOauthID, v))
}

// OauthIDLTE applies the LTE predicate on the "oauth_id" field.
func OauthIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOauthID, v))
}

// OauthIDContains applies the Contains predicate on the "oauth_id" field.
func OauthIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOauthID, v))
}

// OauthIDHasPrefix applies the HasPrefix predicate on the "oauth_id" field.
func OauthIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOauthID, v))
}

// OauthIDHasSuffix applies the HasSuffix predicate on the "oauth_id" field.
func OauthIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOauthID, v))
}

// OauthIDEqualFold applies the EqualFold predicate on the "oauth_id" field.
func OauthIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOauthID, v))
}

// OauthIDContainsFold applies the ContainsFold predicate on the "oauth_id" field.
func OauthIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOauthID, v))
}

// PhotoURLEQ applies the EQ predicate on the "photo_url" field.
func PhotoURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhotoURL, v))
}

// PhotoURLNEQ applies the NEQ predicate on the "photo_url" field.
func PhotoURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhotoURL, v))
}

// PhotoURLIn applies the In predicate on the "photo_url" field.
func PhotoURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhotoURL, vs...))
}

// PhotoURLNotIn applies the NotIn predicate on the "photo_url" field.
func PhotoURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhotoURL, vs...))
}

// PhotoURLGT applies the GT predicate on the "photo_url" field.
func PhotoURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhotoURL, v))
}

// PhotoURLGTE applies the GTE predicate on the "photo_url" field.
func PhotoURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhotoURL, v))
}

// PhotoURLLT applies the LT predicate on the "photo_url" field.
func PhotoURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhotoURL, v))
}

// PhotoURLLTE applies the LTE predicate on the "photo_url" field.
func PhotoURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhotoURL, v))
}

// PhotoURLContains applies the Contains predicate on the "photo_url" field.
func PhotoURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhotoURL, v))
}

// PhotoURLHasPrefix applies the HasPrefix predicate on the "photo_url" field.
func PhotoURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhotoURL, v))
}

// PhotoURLHasSuffix applies the HasSuffix predicate on the "photo_url" field.
func PhotoURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhotoURL, v))
}

// PhotoURLEqualFold applies the EqualFold predicate on the "photo_url" field.
func PhotoURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhotoURL, v))
}

// PhotoURLContainsFold applies the ContainsFold predicate on the "photo_url" field.
func PhotoURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhotoURL, v))
}

// SessionTokenEQ applies the EQ predicate on the "session_token" field.
func SessionTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSessionToken, v))
}

// SessionTokenNEQ applies the NEQ predicate on the "session_token" field.
func SessionTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSessionToken, v))
}

// SessionTokenIn applies the In predicate on the "session_token" field.
func SessionTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSessionToken, vs...))
}

// SessionTokenNotIn applies the NotIn predicate on the "session_token" field.
func SessionTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSessionToken, vs...))
}

// SessionTokenGT applies the GT predicate on the "session_token" field.
func SessionTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSessionToken, v))
}

// SessionTokenGTE applies the GTE predicate on the "session_token" field.
func SessionTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSessionToken, v))
}

// SessionTokenLT applies the LT predicate on the "session_token" field.
func SessionTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSessionToken, v))
}

// SessionTokenLTE applies the LTE predicate on the "session_token" field.
func SessionTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSessionToken, v))
}

// SessionTokenContains applies the Contains predicate on the "session_token" field.
func SessionTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSessionToken, v))
}

// SessionTokenHasPrefix applies the HasPrefix predicate on the "session_token" field.
func SessionTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSessionToken, v))
}

// SessionTokenHasSuffix applies the HasSuffix predicate on the "session_token" field.
func SessionTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSessionToken, v))
}

// SessionTokenEqualFold applies the EqualFold predicate on the "session_token" field.
func SessionTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSessionToken, v))
}

// SessionTokenContainsFold applies the ContainsFold predicate on the "session_token" field.
func SessionTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSessionToken, v))
}

// IsActivatedEQ applies the EQ predicate on the "is_activated" field.
func IsActivatedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActivated, v))
}

// IsActivatedNEQ applies the NEQ predicate on the "is_activated" field.
func IsActivatedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsActivated, v))
}

// IsAdminEQ applies the EQ predicate on the "is_admin" field.
func IsAdminEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsAdmin, v))
}

// IsAdminNEQ applies the NEQ predicate on the "is_admin" field.
func IsAdminNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsAdmin, v))
}

// HasTomes applies the HasEdge predicate on the "tomes" edge.
func HasTomes() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TomesTable, TomesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTomesWith applies the HasEdge predicate on the "tomes" edge with a given conditions (other predicates).
func HasTomesWith(preds ...predicate.Tome) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTomesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
