// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/internal/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetOauthID sets the "oauth_id" field.
func (uc *UserCreate) SetOauthID(s string) *UserCreate {
	uc.mutation.SetOauthID(s)
	return uc
}

// SetPhotoURL sets the "photo_url" field.
func (uc *UserCreate) SetPhotoURL(s string) *UserCreate {
	uc.mutation.SetPhotoURL(s)
	return uc
}

// SetSessionToken sets the "session_token" field.
func (uc *UserCreate) SetSessionToken(s string) *UserCreate {
	uc.mutation.SetSessionToken(s)
	return uc
}

// SetNillableSessionToken sets the "session_token" field if the given value is not nil.
func (uc *UserCreate) SetNillableSessionToken(s *string) *UserCreate {
	if s != nil {
		uc.SetSessionToken(*s)
	}
	return uc
}

// SetIsActivated sets the "is_activated" field.
func (uc *UserCreate) SetIsActivated(b bool) *UserCreate {
	uc.mutation.SetIsActivated(b)
	return uc
}

// SetNillableIsActivated sets the "is_activated" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsActivated(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsActivated(*b)
	}
	return uc
}

// SetIsAdmin sets the "is_admin" field.
func (uc *UserCreate) SetIsAdmin(b bool) *UserCreate {
	uc.mutation.SetIsAdmin(b)
	return uc
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsAdmin(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsAdmin(*b)
	}
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.SessionToken(); !ok {
		v := user.DefaultSessionToken()
		uc.mutation.SetSessionToken(v)
	}
	if _, ok := uc.mutation.IsActivated(); !ok {
		v := user.DefaultIsActivated
		uc.mutation.SetIsActivated(v)
	}
	if _, ok := uc.mutation.IsAdmin(); !ok {
		v := user.DefaultIsAdmin
		uc.mutation.SetIsAdmin(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if v, ok := uc.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.OauthID(); !ok {
		return &ValidationError{Name: "oauth_id", err: errors.New(`ent: missing required field "User.oauth_id"`)}
	}
	if _, ok := uc.mutation.PhotoURL(); !ok {
		return &ValidationError{Name: "photo_url", err: errors.New(`ent: missing required field "User.photo_url"`)}
	}
	if _, ok := uc.mutation.SessionToken(); !ok {
		return &ValidationError{Name: "session_token", err: errors.New(`ent: missing required field "User.session_token"`)}
	}
	if v, ok := uc.mutation.SessionToken(); ok {
		if err := user.SessionTokenValidator(v); err != nil {
			return &ValidationError{Name: "session_token", err: fmt.Errorf(`ent: validator failed for field "User.session_token": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IsActivated(); !ok {
		return &ValidationError{Name: "is_activated", err: errors.New(`ent: missing required field "User.is_activated"`)}
	}
	if _, ok := uc.mutation.IsAdmin(); !ok {
		return &ValidationError{Name: "is_admin", err: errors.New(`ent: missing required field "User.is_admin"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.OauthID(); ok {
		_spec.SetField(user.FieldOauthID, field.TypeString, value)
		_node.OauthID = value
	}
	if value, ok := uc.mutation.PhotoURL(); ok {
		_spec.SetField(user.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := uc.mutation.SessionToken(); ok {
		_spec.SetField(user.FieldSessionToken, field.TypeString, value)
		_node.SessionToken = value
	}
	if value, ok := uc.mutation.IsActivated(); ok {
		_spec.SetField(user.FieldIsActivated, field.TypeBool, value)
		_node.IsActivated = value
	}
	if value, ok := uc.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
		_node.IsAdmin = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetPhotoURL sets the "photo_url" field.
func (u *UserUpsert) SetPhotoURL(v string) *UserUpsert {
	u.Set(user.FieldPhotoURL, v)
	return u
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhotoURL() *UserUpsert {
	u.SetExcluded(user.FieldPhotoURL)
	return u
}

// SetSessionToken sets the "session_token" field.
func (u *UserUpsert) SetSessionToken(v string) *UserUpsert {
	u.Set(user.FieldSessionToken, v)
	return u
}

// UpdateSessionToken sets the "session_token" field to the value that was provided on create.
func (u *UserUpsert) UpdateSessionToken() *UserUpsert {
	u.SetExcluded(user.FieldSessionToken)
	return u
}

// SetIsActivated sets the "is_activated" field.
func (u *UserUpsert) SetIsActivated(v bool) *UserUpsert {
	u.Set(user.FieldIsActivated, v)
	return u
}

// UpdateIsActivated sets the "is_activated" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsActivated() *UserUpsert {
	u.SetExcluded(user.FieldIsActivated)
	return u
}

// SetIsAdmin sets the "is_admin" field.
func (u *UserUpsert) SetIsAdmin(v bool) *UserUpsert {
	u.Set(user.FieldIsAdmin, v)
	return u
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsAdmin() *UserUpsert {
	u.SetExcluded(user.FieldIsAdmin)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.OauthID(); exists {
			s.SetIgnore(user.FieldOauthID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *UserUpsertOne) SetPhotoURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhotoURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhotoURL()
	})
}

// SetSessionToken sets the "session_token" field.
func (u *UserUpsertOne) SetSessionToken(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSessionToken(v)
	})
}

// UpdateSessionToken sets the "session_token" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSessionToken() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSessionToken()
	})
}

// SetIsActivated sets the "is_activated" field.
func (u *UserUpsertOne) SetIsActivated(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsActivated(v)
	})
}

// UpdateIsActivated sets the "is_activated" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsActivated() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsActivated()
	})
}

// SetIsAdmin sets the "is_admin" field.
func (u *UserUpsertOne) SetIsAdmin(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsAdmin(v)
	})
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsAdmin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsAdmin()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.OauthID(); exists {
				s.SetIgnore(user.FieldOauthID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *UserUpsertBulk) SetPhotoURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhotoURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhotoURL()
	})
}

// SetSessionToken sets the "session_token" field.
func (u *UserUpsertBulk) SetSessionToken(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSessionToken(v)
	})
}

// UpdateSessionToken sets the "session_token" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSessionToken() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSessionToken()
	})
}

// SetIsActivated sets the "is_activated" field.
func (u *UserUpsertBulk) SetIsActivated(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsActivated(v)
	})
}

// UpdateIsActivated sets the "is_activated" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsActivated() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsActivated()
	})
}

// SetIsAdmin sets the "is_admin" field.
func (u *UserUpsertBulk) SetIsAdmin(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsAdmin(v)
	})
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsAdmin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsAdmin()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
