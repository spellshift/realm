// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"realm.pub/tavern/internal/graphql/models"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputClaimTasksInput(ctx context.Context, obj any) (models.ClaimTasksInput, error) {
	var it models.ClaimTasksInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"principal", "hostname", "hostPlatform", "hostPrimaryIP", "beaconIdentifier", "hostIdentifier", "agentIdentifier"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "principal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("principal"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Principal = data
		case "hostname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostname"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hostname = data
		case "hostPlatform":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostPlatform"))
			data, err := ec.unmarshalNHostPlatform2realmᚗpubᚋtavernᚋinternalᚋc2ᚋc2pbᚐHost_Platform(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostPlatform = data
		case "hostPrimaryIP":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostPrimaryIP"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostPrimaryIP = data
		case "beaconIdentifier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("beaconIdentifier"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BeaconIdentifier = data
		case "hostIdentifier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostIdentifier"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostIdentifier = data
		case "agentIdentifier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agentIdentifier"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgentIdentifier = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImportRepositoryInput(ctx context.Context, obj any) (models.ImportRepositoryInput, error) {
	var it models.ImportRepositoryInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"includeDirs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "includeDirs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDirs"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncludeDirs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubmitTaskResultInput(ctx context.Context, obj any) (models.SubmitTaskResultInput, error) {
	var it models.SubmitTaskResultInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"taskID", "execStartedAt", "execFinishedAt", "output", "error"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "taskID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskID"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaskID = data
		case "execStartedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execStartedAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecStartedAt = data
		case "execFinishedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execFinishedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecFinishedAt = data
		case "output":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("output"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Output = data
		case "error":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("error"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Error = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalOImportRepositoryInput2ᚖrealmᚗpubᚋtavernᚋinternalᚋgraphqlᚋmodelsᚐImportRepositoryInput(ctx context.Context, v any) (*models.ImportRepositoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputImportRepositoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
