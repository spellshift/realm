schema:
  - schema/directives.graphql
  - schema/ent.graphql
  - schema/scalars.graphql
  - schema/query.graphql
  - schema/mutation.graphql
  - schema/inputs.graphql

model:
  package: models
  filename: ./models/gqlgen_models.go

exec:
  layout: follow-schema
  dir: ./generated
  package: generated

resolver:
  # Tell gqlgen to generate resolvers next to the schema file.
  layout: follow-schema
  dir: .
  package: graphql

# gqlgen will search for any type names in the schema in the generated
# ent package. If they match it will use them, otherwise it will new ones.
autobind:
  - github.com/kcarretto/realm/tavern/internal/ent
  - github.com/kcarretto/realm/tavern/internal/ent/file
  - github.com/kcarretto/realm/tavern/internal/ent/user
  - github.com/kcarretto/realm/tavern/internal/ent/tag
  - github.com/kcarretto/realm/tavern/internal/ent/beacon
  - github.com/kcarretto/realm/tavern/internal/ent/host
  - github.com/kcarretto/realm/tavern/internal/ent/quest
  - github.com/kcarretto/realm/tavern/internal/ent/task
  - github.com/kcarretto/realm/tavern/internal/ent/tome

struct_tag: json

models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.IntID
  Node:
    model:
      # ent.Noder is the new interface generated by the Node template.
      - github.com/kcarretto/realm/tavern/internal/ent.Noder
      # - entgo.io/contrib/entgql/internal/todo/ent.Noder

  # Golang Types
  Uint64:
    model:
      - github.com/99designs/gqlgen/graphql.Uint64

  # Enums
  Kind:
    model:
      - github.com/kcarretto/realm/tavern/internal/ent/tag.Kind
  Platform:
    model:
      - github.com/kcarretto/realm/tavern/internal/ent/host.Platform
