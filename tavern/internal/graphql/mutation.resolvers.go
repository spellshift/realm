package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"time"

	"realm.pub/tavern/internal/auth"
	"realm.pub/tavern/internal/ent"
	"realm.pub/tavern/internal/ent/beacon"
	"realm.pub/tavern/internal/ent/file"
	"realm.pub/tavern/internal/ent/host"
	"realm.pub/tavern/internal/ent/task"
	"realm.pub/tavern/internal/graphql/generated"
	"realm.pub/tavern/internal/graphql/models"
)

// CreateQuest is the resolver for the createQuest field.
func (r *mutationResolver) CreateQuest(ctx context.Context, beaconIDs []int, input ent.CreateQuestInput) (*ent.Quest, error) {
	// 1. Begin Transaction
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize transaction: %w", err)
	}
	client := tx.Client()

	// 2. Rollback transaction if we panic
	defer func() {
		if v := recover(); v != nil {
			tx.Rollback()
			panic(v)
		}
	}()

	// 3. Load Tome
	questTome, err := client.Tome.Get(ctx, input.TomeID)
	if err != nil {
		return nil, rollback(tx, fmt.Errorf("failed to load tome: %w", err))
	}

	// 4. Load Tome Files (ordered so that hashing is always the same)
	bundleFiles, err := questTome.QueryFiles().
		Order(ent.Asc(file.FieldID)).
		All(ctx)
	if err != nil {
		return nil, rollback(tx, fmt.Errorf("failed to load tome files: %w", err))
	}

	// 5. Create bundle (if tome has files)
	var bundleID *int
	if len(bundleFiles) > 0 {
		bundle, err := createBundle(ctx, client, bundleFiles)
		if err != nil || bundle == nil {
			return nil, rollback(tx, fmt.Errorf("failed to create bundle: %w", err))
		}
		bundleID = &bundle.ID
	}

	// 6. Get creator from context (if available)
	var creatorID *int
	if creator := auth.UserFromContext(ctx); creator != nil {
		creatorID = &creator.ID
	}

	// 7. Create Quest
	quest, err := client.Quest.Create().
		SetInput(input).
		SetNillableBundleID(bundleID).
		SetTome(questTome).
		SetNillableCreatorID(creatorID).
		Save(ctx)
	if err != nil {
		return nil, rollback(tx, fmt.Errorf("failed to create quest: %w", err))
	}

	// 8. Create tasks for each beacon
	for _, sid := range beaconIDs {
		_, err := client.Task.Create().
			SetQuest(quest).
			SetBeaconID(sid).
			Save(ctx)
		if err != nil {
			return nil, rollback(tx, fmt.Errorf("failed to create task for beacon (%q): %w", sid, err))
		}
	}

	// 9. Commit the transaction
	if err := tx.Commit(); err != nil {
		return nil, rollback(tx, fmt.Errorf("failed to commit transaction: %w", err))
	}

	// 10. Load the quest with our non transactional client (cannot use transaction after commit)
	quest, err = r.client.Quest.Get(ctx, quest.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to load created quest: %w", err)
	}

	return quest, nil
}

// UpdateBeacon is the resolver for the updateBeacon field.
func (r *mutationResolver) UpdateBeacon(ctx context.Context, beaconID int, input ent.UpdateBeaconInput) (*ent.Beacon, error) {
	return r.client.Beacon.UpdateOneID(beaconID).SetInput(input).Save(ctx)
}

// UpdateHost is the resolver for the updateHost field.
func (r *mutationResolver) UpdateHost(ctx context.Context, hostID int, input ent.UpdateHostInput) (*ent.Host, error) {
	return r.client.Host.UpdateOneID(hostID).SetInput(input).Save(ctx)
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input ent.CreateTagInput) (*ent.Tag, error) {
	return r.client.Tag.Create().SetInput(input).Save(ctx)
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, tagID int, input ent.UpdateTagInput) (*ent.Tag, error) {
	return r.client.Tag.UpdateOneID(tagID).SetInput(input).Save(ctx)
}

// ClaimTasks is the resolver for the claimTasks field.
func (r *mutationResolver) ClaimTasks(ctx context.Context, input models.ClaimTasksInput) ([]*ent.Task, error) {
	now := time.Now()

	// 1. Upsert the host
	hostID, err := r.client.Host.Create().
		SetIdentifier(input.HostIdentifier).
		SetName(input.Hostname).
		SetPlatform(host.Platform(input.HostPlatform)).
		SetNillablePrimaryIP(input.HostPrimaryIP).
		SetLastSeenAt(now).
		OnConflict().
		UpdateNewValues().
		ID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to upsert host entity: %w", err)
	}

	// 2. Upsert the beacon
	beaconID, err := r.client.Beacon.Create().
		SetPrincipal(input.Principal).
		SetIdentifier(input.BeaconIdentifier).
		SetAgentIdentifier(input.AgentIdentifier).
		SetHostID(hostID).
		SetLastSeenAt(now).
		OnConflict().
		UpdateNewValues().
		ID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to upsert beacon entity: %w", err)
	}

	// 3. Load Tasks
	tasks, err := r.client.Task.Query().
		Where(task.And(
			task.HasBeaconWith(beacon.ID(beaconID)),
			task.ClaimedAtIsNil(),
		)).
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to query tasks: %w", err)
	}

	// 4. Prepare Transaction for Claiming Tasks
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize transaction: %w", err)
	}
	client := tx.Client()

	// 5. Rollback transaction if we panic
	defer func() {
		if v := recover(); v != nil {
			tx.Rollback()
			panic(v)
		}
	}()

	// 6. Update all ClaimedAt timestamps to claim tasks
	// ** Note: If one fails to update, we roll back the transaction and return the error
	taskIDs := make([]int, 0, len(tasks))
	for _, t := range tasks {
		_, err := client.Task.UpdateOne(t).
			SetClaimedAt(now).
			Save(ctx)
		if err != nil {
			return nil, rollback(tx, fmt.Errorf("failed to update task %d: %w", t.ID, err))
		}
		taskIDs = append(taskIDs, t.ID)
	}

	// 7. Commit the transaction
	if err := tx.Commit(); err != nil {
		return nil, rollback(tx, fmt.Errorf("failed to commit transaction: %w", err))
	}

	// 8. Load the tasks with our non transactional client (cannot use transaction after commit)
	result := make([]*ent.Task, 0, len(taskIDs))
	for _, taskID := range taskIDs {
		updatedTask, err := r.client.Task.Get(ctx, taskID)
		if err != nil {
			return nil, fmt.Errorf("failed to load updated task (but they were still updated) %d: %w", taskID, err)
		}
		result = append(result, updatedTask)
	}

	// 9. Return claimed tasks
	return result, nil
}

// SubmitTaskResult is the resolver for the submitTaskResult field.
func (r *mutationResolver) SubmitTaskResult(ctx context.Context, input models.SubmitTaskResultInput) (*ent.Task, error) {
	// 1. Load the task
	t, err := r.client.Task.Get(ctx, input.TaskID)
	if err != nil {
		return nil, fmt.Errorf("failed to submit task result: %w", err)
	}

	t, err = t.Update().
		SetExecStartedAt(input.ExecStartedAt).
		SetOutput(fmt.Sprintf("%s%s", t.Output, input.Output)).
		SetNillableExecFinishedAt(input.ExecFinishedAt).
		SetNillableError(input.Error).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to save submitted task result: %w", err)
	}

	return t, nil
}

// CreateTome is the resolver for the createTome field.
func (r *mutationResolver) CreateTome(ctx context.Context, input ent.CreateTomeInput) (*ent.Tome, error) {
	return r.client.Tome.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userID int, input ent.UpdateUserInput) (*ent.User, error) {
	return r.client.User.UpdateOneID(userID).SetInput(input).Save(ctx)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
