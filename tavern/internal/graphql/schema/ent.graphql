directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Beacon implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """A human readable identifier for the beacon."""
  name: String!
  """The identity the beacon is authenticated as (e.g. 'root')"""
  principal: String
  """Unique identifier for the beacon. Unique to each instance of the beacon."""
  identifier: String!
  """Identifies the agent that the beacon is running as (e.g. 'imix')."""
  agentIdentifier: String
  """Timestamp of when a task was last claimed or updated for the beacon."""
  lastSeenAt: Time
  """Duration until next callback, in seconds."""
  interval: Uint64
  """Host this beacon is running on."""
  host: Host!
  """Tasks that have been assigned to the beacon."""
  tasks: [Task!]
}
"""Ordering options for Beacon connections"""
input BeaconOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Beacons."""
  field: BeaconOrderField!
}
"""Properties by which Beacon connections can be ordered."""
enum BeaconOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  LAST_SEEN_AT
  INTERVAL
}
"""
BeaconWhereInput is used for filtering Beacon objects.
Input was generated by ent.
"""
input BeaconWhereInput {
  not: BeaconWhereInput
  and: [BeaconWhereInput!]
  or: [BeaconWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """principal field predicates"""
  principal: String
  principalNEQ: String
  principalIn: [String!]
  principalNotIn: [String!]
  principalGT: String
  principalGTE: String
  principalLT: String
  principalLTE: String
  principalContains: String
  principalHasPrefix: String
  principalHasSuffix: String
  principalIsNil: Boolean
  principalNotNil: Boolean
  principalEqualFold: String
  principalContainsFold: String
  """identifier field predicates"""
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierEqualFold: String
  identifierContainsFold: String
  """agent_identifier field predicates"""
  agentIdentifier: String
  agentIdentifierNEQ: String
  agentIdentifierIn: [String!]
  agentIdentifierNotIn: [String!]
  agentIdentifierGT: String
  agentIdentifierGTE: String
  agentIdentifierLT: String
  agentIdentifierLTE: String
  agentIdentifierContains: String
  agentIdentifierHasPrefix: String
  agentIdentifierHasSuffix: String
  agentIdentifierIsNil: Boolean
  agentIdentifierNotNil: Boolean
  agentIdentifierEqualFold: String
  agentIdentifierContainsFold: String
  """last_seen_at field predicates"""
  lastSeenAt: Time
  lastSeenAtNEQ: Time
  lastSeenAtIn: [Time!]
  lastSeenAtNotIn: [Time!]
  lastSeenAtGT: Time
  lastSeenAtGTE: Time
  lastSeenAtLT: Time
  lastSeenAtLTE: Time
  lastSeenAtIsNil: Boolean
  lastSeenAtNotNil: Boolean
  """interval field predicates"""
  interval: Uint64
  intervalNEQ: Uint64
  intervalIn: [Uint64!]
  intervalNotIn: [Uint64!]
  intervalGT: Uint64
  intervalGTE: Uint64
  intervalLT: Uint64
  intervalLTE: Uint64
  intervalIsNil: Boolean
  intervalNotNil: Boolean
  """host edge predicates"""
  hasHost: Boolean
  hasHostWith: [HostWhereInput!]
  """tasks edge predicates"""
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
}
"""
CreateQuestInput is used for create Quest object.
Input was generated by ent.
"""
input CreateQuestInput {
  """Name of the quest"""
  name: String!
  """Value of parameters that were specified for the quest (as a JSON string)."""
  parameters: String
  tomeID: ID!
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  """Name of the tag"""
  name: String!
  """Describes the type of tag this is"""
  kind: TagKind!
  hostIDs: [ID!]
}
"""
CreateTomeInput is used for create Tome object.
Input was generated by ent.
"""
input CreateTomeInput {
  """Name of the tome"""
  name: String!
  """Information about the tome"""
  description: String!
  """Name of the author who created the tome."""
  author: String!
  """Information about the tomes support model."""
  supportModel: TomeSupportModel
  """MITRE ATT&CK tactic provided by the tome."""
  tactic: TomeTactic
  """JSON string describing what parameters are used with the tome. Requires a list of JSON objects, one for each parameter."""
  paramDefs: String
  """Eldritch script that will be executed when the tome is run"""
  eldritch: String!
  fileIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type File implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """The name of the file, used to reference it for downloads"""
  name: String!
  """The size of the file in bytes"""
  size: Int!
  """A SHA3-256 digest of the content field"""
  hash: String!
  tomes: [Tome!]
}
"""Ordering options for File connections"""
input FileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Files."""
  field: FileOrderField!
}
"""Properties by which File connections can be ordered."""
enum FileOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
  SIZE
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """size field predicates"""
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashEqualFold: String
  hashContainsFold: String
  """tomes edge predicates"""
  hasTomes: Boolean
  hasTomesWith: [TomeWhereInput!]
}
type Host implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Unique identifier for the host. Unique to each host."""
  identifier: String!
  """A human readable identifier for the host."""
  name: String
  """Primary interface IP address reported by the agent."""
  primaryIP: String
  """Platform the agent is operating on."""
  platform: HostPlatform!
  """Timestamp of when a task was last claimed or updated for the host."""
  lastSeenAt: Time
  """Tags used to group this host with other hosts."""
  tags: [Tag!]
  """Beacons that are present on this host system."""
  beacons: [Beacon!]
  """Files reported on this host system."""
  files: [HostFile!]
  """Processes reported as running on this host system."""
  processes: [HostProcess!]
  """Credentials reported from this host system."""
  credentials: [HostCredential!]
}
type HostCredential implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Identity associated with this credential (e.g. username)."""
  principal: String!
  """Secret for this credential (e.g. password)."""
  secret: String!
  """Kind of credential."""
  kind: HostCredentialKind!
  """Host the credential was reported on."""
  host: Host!
  """Task that reported this credential."""
  task: Task!
}
"""HostCredentialKind is enum for the field kind"""
enum HostCredentialKind @goModel(model: "realm.pub/tavern/internal/c2/epb.Credential_Kind") {
  KIND_PASSWORD
  KIND_SSH_KEY
  KIND_UNSPECIFIED
}
"""Ordering options for HostCredential connections"""
input HostCredentialOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order HostCredentials."""
  field: HostCredentialOrderField!
}
"""Properties by which HostCredential connections can be ordered."""
enum HostCredentialOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  PRINCIPAL
}
"""
HostCredentialWhereInput is used for filtering HostCredential objects.
Input was generated by ent.
"""
input HostCredentialWhereInput {
  not: HostCredentialWhereInput
  and: [HostCredentialWhereInput!]
  or: [HostCredentialWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """principal field predicates"""
  principal: String
  principalNEQ: String
  principalIn: [String!]
  principalNotIn: [String!]
  principalGT: String
  principalGTE: String
  principalLT: String
  principalLTE: String
  principalContains: String
  principalHasPrefix: String
  principalHasSuffix: String
  principalEqualFold: String
  principalContainsFold: String
  """secret field predicates"""
  secret: String
  secretNEQ: String
  secretIn: [String!]
  secretNotIn: [String!]
  secretGT: String
  secretGTE: String
  secretLT: String
  secretLTE: String
  secretContains: String
  secretHasPrefix: String
  secretHasSuffix: String
  secretEqualFold: String
  secretContainsFold: String
  """kind field predicates"""
  kind: HostCredentialKind
  kindNEQ: HostCredentialKind
  kindIn: [HostCredentialKind!]
  kindNotIn: [HostCredentialKind!]
  """host edge predicates"""
  hasHost: Boolean
  hasHostWith: [HostWhereInput!]
  """task edge predicates"""
  hasTask: Boolean
  hasTaskWith: [TaskWhereInput!]
}
type HostFile implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Path to the file on the host system."""
  path: String!
  """User who owns the file on the host system."""
  owner: String
  """Group who owns the file on the host system."""
  group: String
  """Permissions for the file on the host system."""
  permissions: String
  """The size of the file in bytes"""
  size: Uint64!
  """A SHA3-256 digest of the content field"""
  hash: String
  """Host the file was reported on."""
  host: Host!
  """Task that reported this file."""
  task: Task!
}
"""Ordering options for HostFile connections"""
input HostFileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order HostFiles."""
  field: HostFileOrderField!
}
"""Properties by which HostFile connections can be ordered."""
enum HostFileOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
  SIZE
}
"""
HostFileWhereInput is used for filtering HostFile objects.
Input was generated by ent.
"""
input HostFileWhereInput {
  not: HostFileWhereInput
  and: [HostFileWhereInput!]
  or: [HostFileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """path field predicates"""
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """owner field predicates"""
  owner: String
  ownerNEQ: String
  ownerIn: [String!]
  ownerNotIn: [String!]
  ownerGT: String
  ownerGTE: String
  ownerLT: String
  ownerLTE: String
  ownerContains: String
  ownerHasPrefix: String
  ownerHasSuffix: String
  ownerIsNil: Boolean
  ownerNotNil: Boolean
  ownerEqualFold: String
  ownerContainsFold: String
  """group field predicates"""
  group: String
  groupNEQ: String
  groupIn: [String!]
  groupNotIn: [String!]
  groupGT: String
  groupGTE: String
  groupLT: String
  groupLTE: String
  groupContains: String
  groupHasPrefix: String
  groupHasSuffix: String
  groupIsNil: Boolean
  groupNotNil: Boolean
  groupEqualFold: String
  groupContainsFold: String
  """permissions field predicates"""
  permissions: String
  permissionsNEQ: String
  permissionsIn: [String!]
  permissionsNotIn: [String!]
  permissionsGT: String
  permissionsGTE: String
  permissionsLT: String
  permissionsLTE: String
  permissionsContains: String
  permissionsHasPrefix: String
  permissionsHasSuffix: String
  permissionsIsNil: Boolean
  permissionsNotNil: Boolean
  permissionsEqualFold: String
  permissionsContainsFold: String
  """size field predicates"""
  size: Uint64
  sizeNEQ: Uint64
  sizeIn: [Uint64!]
  sizeNotIn: [Uint64!]
  sizeGT: Uint64
  sizeGTE: Uint64
  sizeLT: Uint64
  sizeLTE: Uint64
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashIsNil: Boolean
  hashNotNil: Boolean
  hashEqualFold: String
  hashContainsFold: String
  """host edge predicates"""
  hasHost: Boolean
  hasHostWith: [HostWhereInput!]
  """task edge predicates"""
  hasTask: Boolean
  hasTaskWith: [TaskWhereInput!]
}
"""Ordering options for Host connections"""
input HostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Hosts."""
  field: HostOrderField!
}
"""Properties by which Host connections can be ordered."""
enum HostOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  LAST_SEEN_AT
}
"""HostPlatform is enum for the field platform"""
enum HostPlatform @goModel(model: "realm.pub/tavern/internal/c2/c2pb.Host_Platform") {
  PLATFORM_BSD
  PLATFORM_LINUX
  PLATFORM_MACOS
  PLATFORM_UNSPECIFIED
  PLATFORM_WINDOWS
}
type HostProcess implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """ID of the process."""
  pid: Uint64!
  """ID of the parent process."""
  ppid: Uint64!
  """The name of the process."""
  name: String!
  """The user the process is running as."""
  principal: String!
  """The path to the process executable."""
  path: String
  """The command used to execute the process."""
  cmd: String
  """The environment variables set for the process."""
  env: String
  """The current working directory for the process."""
  cwd: String
  """Current process status."""
  status: HostProcessStatus!
  """Host the process was reported on."""
  host: Host!
  """Task that reported this process."""
  task: Task!
}
"""Ordering options for HostProcess connections"""
input HostProcessOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order HostProcesses."""
  field: HostProcessOrderField!
}
"""Properties by which HostProcess connections can be ordered."""
enum HostProcessOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  PROCESS_ID
  PARENT_PROCESS_ID
  NAME
}
"""HostProcessStatus is enum for the field status"""
enum HostProcessStatus @goModel(model: "realm.pub/tavern/internal/c2/epb.Process_Status") {
  STATUS_DEAD
  STATUS_IDLE
  STATUS_LOCK_BLOCKED
  STATUS_PARKED
  STATUS_RUN
  STATUS_SLEEP
  STATUS_STOP
  STATUS_TRACING
  STATUS_UNINTERUPTIBLE_DISK_SLEEP
  STATUS_UNKNOWN
  STATUS_UNSPECIFIED
  STATUS_WAKE_KILL
  STATUS_WAKING
  STATUS_ZOMBIE
}
"""
HostProcessWhereInput is used for filtering HostProcess objects.
Input was generated by ent.
"""
input HostProcessWhereInput {
  not: HostProcessWhereInput
  and: [HostProcessWhereInput!]
  or: [HostProcessWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """pid field predicates"""
  pid: Uint64
  pidNEQ: Uint64
  pidIn: [Uint64!]
  pidNotIn: [Uint64!]
  pidGT: Uint64
  pidGTE: Uint64
  pidLT: Uint64
  pidLTE: Uint64
  """ppid field predicates"""
  ppid: Uint64
  ppidNEQ: Uint64
  ppidIn: [Uint64!]
  ppidNotIn: [Uint64!]
  ppidGT: Uint64
  ppidGTE: Uint64
  ppidLT: Uint64
  ppidLTE: Uint64
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """principal field predicates"""
  principal: String
  principalNEQ: String
  principalIn: [String!]
  principalNotIn: [String!]
  principalGT: String
  principalGTE: String
  principalLT: String
  principalLTE: String
  principalContains: String
  principalHasPrefix: String
  principalHasSuffix: String
  principalEqualFold: String
  principalContainsFold: String
  """path field predicates"""
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathIsNil: Boolean
  pathNotNil: Boolean
  pathEqualFold: String
  pathContainsFold: String
  """cmd field predicates"""
  cmd: String
  cmdNEQ: String
  cmdIn: [String!]
  cmdNotIn: [String!]
  cmdGT: String
  cmdGTE: String
  cmdLT: String
  cmdLTE: String
  cmdContains: String
  cmdHasPrefix: String
  cmdHasSuffix: String
  cmdIsNil: Boolean
  cmdNotNil: Boolean
  cmdEqualFold: String
  cmdContainsFold: String
  """env field predicates"""
  env: String
  envNEQ: String
  envIn: [String!]
  envNotIn: [String!]
  envGT: String
  envGTE: String
  envLT: String
  envLTE: String
  envContains: String
  envHasPrefix: String
  envHasSuffix: String
  envIsNil: Boolean
  envNotNil: Boolean
  envEqualFold: String
  envContainsFold: String
  """cwd field predicates"""
  cwd: String
  cwdNEQ: String
  cwdIn: [String!]
  cwdNotIn: [String!]
  cwdGT: String
  cwdGTE: String
  cwdLT: String
  cwdLTE: String
  cwdContains: String
  cwdHasPrefix: String
  cwdHasSuffix: String
  cwdIsNil: Boolean
  cwdNotNil: Boolean
  cwdEqualFold: String
  cwdContainsFold: String
  """status field predicates"""
  status: HostProcessStatus
  statusNEQ: HostProcessStatus
  statusIn: [HostProcessStatus!]
  statusNotIn: [HostProcessStatus!]
  """host edge predicates"""
  hasHost: Boolean
  hasHostWith: [HostWhereInput!]
  """task edge predicates"""
  hasTask: Boolean
  hasTaskWith: [TaskWhereInput!]
}
"""
HostWhereInput is used for filtering Host objects.
Input was generated by ent.
"""
input HostWhereInput {
  not: HostWhereInput
  and: [HostWhereInput!]
  or: [HostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """identifier field predicates"""
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierEqualFold: String
  identifierContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """primary_ip field predicates"""
  primaryIP: String
  primaryIPNEQ: String
  primaryIPIn: [String!]
  primaryIPNotIn: [String!]
  primaryIPGT: String
  primaryIPGTE: String
  primaryIPLT: String
  primaryIPLTE: String
  primaryIPContains: String
  primaryIPHasPrefix: String
  primaryIPHasSuffix: String
  primaryIPIsNil: Boolean
  primaryIPNotNil: Boolean
  primaryIPEqualFold: String
  primaryIPContainsFold: String
  """platform field predicates"""
  platform: HostPlatform
  platformNEQ: HostPlatform
  platformIn: [HostPlatform!]
  platformNotIn: [HostPlatform!]
  """last_seen_at field predicates"""
  lastSeenAt: Time
  lastSeenAtNEQ: Time
  lastSeenAtIn: [Time!]
  lastSeenAtNotIn: [Time!]
  lastSeenAtGT: Time
  lastSeenAtGTE: Time
  lastSeenAtLT: Time
  lastSeenAtLTE: Time
  lastSeenAtIsNil: Boolean
  lastSeenAtNotNil: Boolean
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """beacons edge predicates"""
  hasBeacons: Boolean
  hasBeaconsWith: [BeaconWhereInput!]
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [HostFileWhereInput!]
  """processes edge predicates"""
  hasProcesses: Boolean
  hasProcessesWith: [HostProcessWhereInput!]
  """credentials edge predicates"""
  hasCredentials: Boolean
  hasCredentialsWith: [HostCredentialWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "realm.pub/tavern/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
type Quest implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Name of the quest"""
  name: String!
  """Value of parameters that were specified for the quest (as a JSON string)."""
  parameters: String
  """Tome that this quest will be executing"""
  tome: Tome!
  """Bundle file that the executing tome depends on (if any)"""
  bundle: File
  """Tasks tracking the status and output of individual tome execution on targets"""
  tasks: [Task!]
  """User that created the quest if available."""
  creator: User
}
"""Ordering options for Quest connections"""
input QuestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Quests."""
  field: QuestOrderField!
}
"""Properties by which Quest connections can be ordered."""
enum QuestOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
}
"""
QuestWhereInput is used for filtering Quest objects.
Input was generated by ent.
"""
input QuestWhereInput {
  not: QuestWhereInput
  and: [QuestWhereInput!]
  or: [QuestWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """parameters field predicates"""
  parameters: String
  parametersNEQ: String
  parametersIn: [String!]
  parametersNotIn: [String!]
  parametersGT: String
  parametersGTE: String
  parametersLT: String
  parametersLTE: String
  parametersContains: String
  parametersHasPrefix: String
  parametersHasSuffix: String
  parametersIsNil: Boolean
  parametersNotNil: Boolean
  parametersEqualFold: String
  parametersContainsFold: String
  """tome edge predicates"""
  hasTome: Boolean
  hasTomeWith: [TomeWhereInput!]
  """bundle edge predicates"""
  hasBundle: Boolean
  hasBundleWith: [FileWhereInput!]
  """tasks edge predicates"""
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
}
type Tag implements Node {
  id: ID!
  """Name of the tag"""
  name: String!
  """Describes the type of tag this is"""
  kind: TagKind!
  hosts: [Host!]
}
"""TagKind is enum for the field kind"""
enum TagKind @goModel(model: "realm.pub/tavern/internal/ent/tag.Kind") {
  group
  service
}
"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tags."""
  field: TagOrderField!
}
"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  NAME
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """kind field predicates"""
  kind: TagKind
  kindNEQ: TagKind
  kindIn: [TagKind!]
  kindNotIn: [TagKind!]
  """hosts edge predicates"""
  hasHosts: Boolean
  hasHostsWith: [HostWhereInput!]
}
type Task implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Timestamp of when the task was claimed, null if not yet claimed"""
  claimedAt: Time
  """Timestamp of when execution of the task started, null if not yet started"""
  execStartedAt: Time
  """Timestamp of when execution of the task finished, null if not yet finished"""
  execFinishedAt: Time
  """Output from executing the task"""
  output: String
  """The size of the output in bytes"""
  outputSize: Int!
  """Error, if any, produced while executing the Task"""
  error: String
  quest: Quest!
  beacon: Beacon!
  """Files that have been reported by this task."""
  reportedFiles: [HostFile!]
  """Processes that have been reported by this task."""
  reportedProcesses: [HostProcess!]
  """Credentials that have been reported by this task."""
  reportedCredentials: [HostCredential!]
}
"""A connection to a list of items."""
type TaskConnection {
  """A list of edges."""
  edges: [TaskEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Task connections"""
input TaskOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tasks."""
  field: TaskOrderField!
}
"""Properties by which Task connections can be ordered."""
enum TaskOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  CLAIMED_AT
  EXEC_STARTED_AT
  EXEC_FINISHED_AT
  OUTPUT_SIZE
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """claimed_at field predicates"""
  claimedAt: Time
  claimedAtNEQ: Time
  claimedAtIn: [Time!]
  claimedAtNotIn: [Time!]
  claimedAtGT: Time
  claimedAtGTE: Time
  claimedAtLT: Time
  claimedAtLTE: Time
  claimedAtIsNil: Boolean
  claimedAtNotNil: Boolean
  """exec_started_at field predicates"""
  execStartedAt: Time
  execStartedAtNEQ: Time
  execStartedAtIn: [Time!]
  execStartedAtNotIn: [Time!]
  execStartedAtGT: Time
  execStartedAtGTE: Time
  execStartedAtLT: Time
  execStartedAtLTE: Time
  execStartedAtIsNil: Boolean
  execStartedAtNotNil: Boolean
  """exec_finished_at field predicates"""
  execFinishedAt: Time
  execFinishedAtNEQ: Time
  execFinishedAtIn: [Time!]
  execFinishedAtNotIn: [Time!]
  execFinishedAtGT: Time
  execFinishedAtGTE: Time
  execFinishedAtLT: Time
  execFinishedAtLTE: Time
  execFinishedAtIsNil: Boolean
  execFinishedAtNotNil: Boolean
  """output field predicates"""
  output: String
  outputNEQ: String
  outputIn: [String!]
  outputNotIn: [String!]
  outputGT: String
  outputGTE: String
  outputLT: String
  outputLTE: String
  outputContains: String
  outputHasPrefix: String
  outputHasSuffix: String
  outputIsNil: Boolean
  outputNotNil: Boolean
  outputEqualFold: String
  outputContainsFold: String
  """output_size field predicates"""
  outputSize: Int
  outputSizeNEQ: Int
  outputSizeIn: [Int!]
  outputSizeNotIn: [Int!]
  outputSizeGT: Int
  outputSizeGTE: Int
  outputSizeLT: Int
  outputSizeLTE: Int
  """error field predicates"""
  error: String
  errorNEQ: String
  errorIn: [String!]
  errorNotIn: [String!]
  errorGT: String
  errorGTE: String
  errorLT: String
  errorLTE: String
  errorContains: String
  errorHasPrefix: String
  errorHasSuffix: String
  errorIsNil: Boolean
  errorNotNil: Boolean
  errorEqualFold: String
  errorContainsFold: String
  """quest edge predicates"""
  hasQuest: Boolean
  hasQuestWith: [QuestWhereInput!]
  """beacon edge predicates"""
  hasBeacon: Boolean
  hasBeaconWith: [BeaconWhereInput!]
  """reported_files edge predicates"""
  hasReportedFiles: Boolean
  hasReportedFilesWith: [HostFileWhereInput!]
  """reported_processes edge predicates"""
  hasReportedProcesses: Boolean
  hasReportedProcessesWith: [HostProcessWhereInput!]
  """reported_credentials edge predicates"""
  hasReportedCredentials: Boolean
  hasReportedCredentialsWith: [HostCredentialWhereInput!]
}
type Tome implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Name of the tome"""
  name: String!
  """Information about the tome"""
  description: String!
  """Name of the author who created the tome."""
  author: String!
  """Information about the tomes support model."""
  supportModel: TomeSupportModel!
  """MITRE ATT&CK tactic provided by the tome."""
  tactic: TomeTactic!
  """JSON string describing what parameters are used with the tome. Requires a list of JSON objects, one for each parameter."""
  paramDefs: String
  """Eldritch script that will be executed when the tome is run"""
  eldritch: String!
  """Any files required for tome execution that will be bundled and provided to the agent for download"""
  files: [File!]
  """User who uploaded the tome (may be null)."""
  uploader: User
}
"""Ordering options for Tome connections"""
input TomeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tomes."""
  field: TomeOrderField!
}
"""Properties by which Tome connections can be ordered."""
enum TomeOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
}
"""TomeSupportModel is enum for the field support_model"""
enum TomeSupportModel @goModel(model: "realm.pub/tavern/internal/ent/tome.SupportModel") {
  UNSPECIFIED
  FIRST_PARTY
  COMMUNITY
}
"""TomeTactic is enum for the field tactic"""
enum TomeTactic @goModel(model: "realm.pub/tavern/internal/ent/tome.Tactic") {
  UNSPECIFIED
  RECON
  RESOURCE_DEVELOPMENT
  INITIAL_ACCESS
  EXECUTION
  PERSISTENCE
  PRIVILEGE_ESCALATION
  DEFENSE_EVASION
  CREDENTIAL_ACCESS
  DISCOVERY
  LATERAL_MOVEMENT
  COLLECTION
  COMMAND_AND_CONTROL
  EXFILTRATION
  IMPACT
}
"""
TomeWhereInput is used for filtering Tome objects.
Input was generated by ent.
"""
input TomeWhereInput {
  not: TomeWhereInput
  and: [TomeWhereInput!]
  or: [TomeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """author field predicates"""
  author: String
  authorNEQ: String
  authorIn: [String!]
  authorNotIn: [String!]
  authorGT: String
  authorGTE: String
  authorLT: String
  authorLTE: String
  authorContains: String
  authorHasPrefix: String
  authorHasSuffix: String
  authorEqualFold: String
  authorContainsFold: String
  """support_model field predicates"""
  supportModel: TomeSupportModel
  supportModelNEQ: TomeSupportModel
  supportModelIn: [TomeSupportModel!]
  supportModelNotIn: [TomeSupportModel!]
  """tactic field predicates"""
  tactic: TomeTactic
  tacticNEQ: TomeTactic
  tacticIn: [TomeTactic!]
  tacticNotIn: [TomeTactic!]
  """param_defs field predicates"""
  paramDefs: String
  paramDefsNEQ: String
  paramDefsIn: [String!]
  paramDefsNotIn: [String!]
  paramDefsGT: String
  paramDefsGTE: String
  paramDefsLT: String
  paramDefsLTE: String
  paramDefsContains: String
  paramDefsHasPrefix: String
  paramDefsHasSuffix: String
  paramDefsIsNil: Boolean
  paramDefsNotNil: Boolean
  paramDefsEqualFold: String
  paramDefsContainsFold: String
  """eldritch field predicates"""
  eldritch: String
  eldritchNEQ: String
  eldritchIn: [String!]
  eldritchNotIn: [String!]
  eldritchGT: String
  eldritchGTE: String
  eldritchLT: String
  eldritchLTE: String
  eldritchContains: String
  eldritchHasPrefix: String
  eldritchHasSuffix: String
  eldritchEqualFold: String
  eldritchContainsFold: String
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """uploader edge predicates"""
  hasUploader: Boolean
  hasUploaderWith: [UserWhereInput!]
}
"""
UpdateBeaconInput is used for update Beacon object.
Input was generated by ent.
"""
input UpdateBeaconInput {
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time
  hostID: ID
}
"""
UpdateHostInput is used for update Host object.
Input was generated by ent.
"""
input UpdateHostInput {
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time
  """A human readable identifier for the host."""
  name: String
  clearName: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
  addBeaconIDs: [ID!]
  removeBeaconIDs: [ID!]
  clearBeacons: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addProcessIDs: [ID!]
  removeProcessIDs: [ID!]
  clearProcesses: Boolean
  addCredentialIDs: [ID!]
  removeCredentialIDs: [ID!]
  clearCredentials: Boolean
}
"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  """Name of the tag"""
  name: String
  """Describes the type of tag this is"""
  kind: TagKind
  addHostIDs: [ID!]
  removeHostIDs: [ID!]
  clearHosts: Boolean
}
"""
UpdateTomeInput is used for update Tome object.
Input was generated by ent.
"""
input UpdateTomeInput {
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time
  """Name of the tome"""
  name: String
  """Information about the tome"""
  description: String
  """Name of the author who created the tome."""
  author: String
  """Information about the tomes support model."""
  supportModel: TomeSupportModel
  """MITRE ATT&CK tactic provided by the tome."""
  tactic: TomeTactic
  """JSON string describing what parameters are used with the tome. Requires a list of JSON objects, one for each parameter."""
  paramDefs: String
  clearParamDefs: Boolean
  """Eldritch script that will be executed when the tome is run"""
  eldritch: String
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """The name displayed for the user"""
  name: String
  """URL to the user's profile photo."""
  photoURL: String
  """True if the user is active and able to authenticate"""
  isActivated: Boolean
  """True if the user is an Admin"""
  isAdmin: Boolean
  addTomeIDs: [ID!]
  removeTomeIDs: [ID!]
  clearTomes: Boolean
}
type User implements Node {
  id: ID!
  """The name displayed for the user"""
  name: String!
  """URL to the user's profile photo."""
  photoURL: String!
  """True if the user is active and able to authenticate"""
  isActivated: Boolean!
  """True if the user is an Admin"""
  isAdmin: Boolean!
  """Tomes uploaded by the user."""
  tomes: [Tome!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """photo_url field predicates"""
  photoURL: String
  photoURLNEQ: String
  photoURLIn: [String!]
  photoURLNotIn: [String!]
  photoURLGT: String
  photoURLGTE: String
  photoURLLT: String
  photoURLLTE: String
  photoURLContains: String
  photoURLHasPrefix: String
  photoURLHasSuffix: String
  photoURLEqualFold: String
  photoURLContainsFold: String
  """is_activated field predicates"""
  isActivated: Boolean
  isActivatedNEQ: Boolean
  """is_admin field predicates"""
  isAdmin: Boolean
  isAdminNEQ: Boolean
  """tomes edge predicates"""
  hasTomes: Boolean
  hasTomesWith: [TomeWhereInput!]
}
