directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Beacon implements Node {
  id: ID!
  """A human readable identifier for the beacon."""
  name: String!
  """The identity the beacon is authenticated as (e.g. 'root')"""
  principal: String
  """Unique identifier for the beacon. Unique to each instance of the beacon."""
  identifier: String!
  """Identifies the agent that the beacon is running as (e.g. 'imix')."""
  agentIdentifier: String
  """Timestamp of when a task was last claimed or updated for the beacon."""
  lastSeenAt: Time
  """Duration until next callback, in seconds."""
  interval: Uint64
  """Host this beacon is running on."""
  host: Host!
  """Tasks that have been assigned to the beacon."""
  tasks: [Task!]
}
"""Ordering options for Beacon connections"""
input BeaconOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Beacons."""
  field: BeaconOrderField!
}
"""Properties by which Beacon connections can be ordered."""
enum BeaconOrderField {
  LAST_SEEN_AT
  INTERVAL
}
"""
BeaconWhereInput is used for filtering Beacon objects.
Input was generated by ent.
"""
input BeaconWhereInput {
  not: BeaconWhereInput
  and: [BeaconWhereInput!]
  or: [BeaconWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """principal field predicates"""
  principal: String
  principalNEQ: String
  principalIn: [String!]
  principalNotIn: [String!]
  principalGT: String
  principalGTE: String
  principalLT: String
  principalLTE: String
  principalContains: String
  principalHasPrefix: String
  principalHasSuffix: String
  principalIsNil: Boolean
  principalNotNil: Boolean
  principalEqualFold: String
  principalContainsFold: String
  """identifier field predicates"""
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierEqualFold: String
  identifierContainsFold: String
  """agent_identifier field predicates"""
  agentIdentifier: String
  agentIdentifierNEQ: String
  agentIdentifierIn: [String!]
  agentIdentifierNotIn: [String!]
  agentIdentifierGT: String
  agentIdentifierGTE: String
  agentIdentifierLT: String
  agentIdentifierLTE: String
  agentIdentifierContains: String
  agentIdentifierHasPrefix: String
  agentIdentifierHasSuffix: String
  agentIdentifierIsNil: Boolean
  agentIdentifierNotNil: Boolean
  agentIdentifierEqualFold: String
  agentIdentifierContainsFold: String
  """last_seen_at field predicates"""
  lastSeenAt: Time
  lastSeenAtNEQ: Time
  lastSeenAtIn: [Time!]
  lastSeenAtNotIn: [Time!]
  lastSeenAtGT: Time
  lastSeenAtGTE: Time
  lastSeenAtLT: Time
  lastSeenAtLTE: Time
  lastSeenAtIsNil: Boolean
  lastSeenAtNotNil: Boolean
  """interval field predicates"""
  interval: Uint64
  intervalNEQ: Uint64
  intervalIn: [Uint64!]
  intervalNotIn: [Uint64!]
  intervalGT: Uint64
  intervalGTE: Uint64
  intervalLT: Uint64
  intervalLTE: Uint64
  intervalIsNil: Boolean
  intervalNotNil: Boolean
  """host edge predicates"""
  hasHost: Boolean
  hasHostWith: [HostWhereInput!]
  """tasks edge predicates"""
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
}
"""
CreateQuestInput is used for create Quest object.
Input was generated by ent.
"""
input CreateQuestInput {
  """Name of the quest"""
  name: String!
  """Value of parameters that were specified for the quest (as a JSON string)."""
  parameters: String
  tomeID: ID!
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  """Name of the tag"""
  name: String!
  """Describes the type of tag this is"""
  kind: TagKind!
  hostIDs: [ID!]
}
"""
CreateTomeInput is used for create Tome object.
Input was generated by ent.
"""
input CreateTomeInput {
  """Name of the tome"""
  name: String!
  """Information about the tome"""
  description: String!
  """JSON string describing what parameters are used with the tome. Requires a list of JSON objects, one for each parameter."""
  paramDefs: String
  """Eldritch script that will be executed when the tome is run"""
  eldritch: String!
  fileIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type File implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """The name of the file, used to reference it for downloads"""
  name: String!
  """The size of the file in bytes"""
  size: Int!
  """A SHA3 digest of the content field"""
  hash: String!
  tomes: [Tome!]
}
"""Ordering options for File connections"""
input FileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Files."""
  field: FileOrderField!
}
"""Properties by which File connections can be ordered."""
enum FileOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
  SIZE
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """size field predicates"""
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashEqualFold: String
  hashContainsFold: String
  """tomes edge predicates"""
  hasTomes: Boolean
  hasTomesWith: [TomeWhereInput!]
}
type Host implements Node {
  id: ID!
  """Unique identifier for the host. Unique to each host."""
  identifier: String!
  """A human readable identifier for the host."""
  name: String
  """Primary interface IP address reported by the agent."""
  primaryIP: String
  """Platform the agent is operating on."""
  platform: HostPlatform!
  """Timestamp of when a task was last claimed or updated for the host."""
  lastSeenAt: Time
  """Tags used to group this host with other hosts."""
  tags: [Tag!]
  """Beacons that are present on this host system."""
  beacons: [Beacon!]
  """Processes reported as running on this host system."""
  processes: [Process!]
}
"""Ordering options for Host connections"""
input HostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Hosts."""
  field: HostOrderField!
}
"""Properties by which Host connections can be ordered."""
enum HostOrderField {
  LAST_SEEN_AT
}
"""HostPlatform is enum for the field platform"""
enum HostPlatform @goModel(model: "realm.pub/tavern/internal/ent/host.Platform") {
  Windows
  Linux
  MacOS
  BSD
  Unknown
}
"""
HostWhereInput is used for filtering Host objects.
Input was generated by ent.
"""
input HostWhereInput {
  not: HostWhereInput
  and: [HostWhereInput!]
  or: [HostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """identifier field predicates"""
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierEqualFold: String
  identifierContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """primary_ip field predicates"""
  primaryIP: String
  primaryIPNEQ: String
  primaryIPIn: [String!]
  primaryIPNotIn: [String!]
  primaryIPGT: String
  primaryIPGTE: String
  primaryIPLT: String
  primaryIPLTE: String
  primaryIPContains: String
  primaryIPHasPrefix: String
  primaryIPHasSuffix: String
  primaryIPIsNil: Boolean
  primaryIPNotNil: Boolean
  primaryIPEqualFold: String
  primaryIPContainsFold: String
  """platform field predicates"""
  platform: HostPlatform
  platformNEQ: HostPlatform
  platformIn: [HostPlatform!]
  platformNotIn: [HostPlatform!]
  """last_seen_at field predicates"""
  lastSeenAt: Time
  lastSeenAtNEQ: Time
  lastSeenAtIn: [Time!]
  lastSeenAtNotIn: [Time!]
  lastSeenAtGT: Time
  lastSeenAtGTE: Time
  lastSeenAtLT: Time
  lastSeenAtLTE: Time
  lastSeenAtIsNil: Boolean
  lastSeenAtNotNil: Boolean
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """beacons edge predicates"""
  hasBeacons: Boolean
  hasBeaconsWith: [BeaconWhereInput!]
  """processes edge predicates"""
  hasProcesses: Boolean
  hasProcessesWith: [ProcessWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "realm.pub/tavern/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Process implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """ID of the process."""
  pid: Int!
  """The name of the process."""
  name: String!
  """The user the process is running as."""
  principal: String!
  """Host the process was reported on."""
  host: Host!
  """Task that reported this process."""
  task: Task!
}
"""Ordering options for Process connections"""
input ProcessOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Processes."""
  field: ProcessOrderField!
}
"""Properties by which Process connections can be ordered."""
enum ProcessOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  PROCESS_ID
  NAME
}
"""
ProcessWhereInput is used for filtering Process objects.
Input was generated by ent.
"""
input ProcessWhereInput {
  not: ProcessWhereInput
  and: [ProcessWhereInput!]
  or: [ProcessWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """pid field predicates"""
  pid: Int
  pidNEQ: Int
  pidIn: [Int!]
  pidNotIn: [Int!]
  pidGT: Int
  pidGTE: Int
  pidLT: Int
  pidLTE: Int
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """principal field predicates"""
  principal: String
  principalNEQ: String
  principalIn: [String!]
  principalNotIn: [String!]
  principalGT: String
  principalGTE: String
  principalLT: String
  principalLTE: String
  principalContains: String
  principalHasPrefix: String
  principalHasSuffix: String
  principalEqualFold: String
  principalContainsFold: String
  """host edge predicates"""
  hasHost: Boolean
  hasHostWith: [HostWhereInput!]
  """task edge predicates"""
  hasTask: Boolean
  hasTaskWith: [TaskWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
type Quest implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Name of the quest"""
  name: String!
  """Value of parameters that were specified for the quest (as a JSON string)."""
  parameters: String
  """Tome that this quest will be executing"""
  tome: Tome!
  """Bundle file that the executing tome depends on (if any)"""
  bundle: File
  """Tasks tracking the status and output of individual tome execution on targets"""
  tasks: [Task!]
  """User that created the quest if available."""
  creator: User
}
"""Ordering options for Quest connections"""
input QuestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Quests."""
  field: QuestOrderField!
}
"""Properties by which Quest connections can be ordered."""
enum QuestOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
}
"""
QuestWhereInput is used for filtering Quest objects.
Input was generated by ent.
"""
input QuestWhereInput {
  not: QuestWhereInput
  and: [QuestWhereInput!]
  or: [QuestWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """parameters field predicates"""
  parameters: String
  parametersNEQ: String
  parametersIn: [String!]
  parametersNotIn: [String!]
  parametersGT: String
  parametersGTE: String
  parametersLT: String
  parametersLTE: String
  parametersContains: String
  parametersHasPrefix: String
  parametersHasSuffix: String
  parametersIsNil: Boolean
  parametersNotNil: Boolean
  parametersEqualFold: String
  parametersContainsFold: String
  """tome edge predicates"""
  hasTome: Boolean
  hasTomeWith: [TomeWhereInput!]
  """bundle edge predicates"""
  hasBundle: Boolean
  hasBundleWith: [FileWhereInput!]
  """tasks edge predicates"""
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
}
type Tag implements Node {
  id: ID!
  """Name of the tag"""
  name: String!
  """Describes the type of tag this is"""
  kind: TagKind!
  hosts: [Host!]
}
"""TagKind is enum for the field kind"""
enum TagKind @goModel(model: "realm.pub/tavern/internal/ent/tag.Kind") {
  group
  service
}
"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tags."""
  field: TagOrderField!
}
"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  NAME
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """kind field predicates"""
  kind: TagKind
  kindNEQ: TagKind
  kindIn: [TagKind!]
  kindNotIn: [TagKind!]
  """hosts edge predicates"""
  hasHosts: Boolean
  hasHostsWith: [HostWhereInput!]
}
type Task implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Timestamp of when the task was claimed, null if not yet claimed"""
  claimedAt: Time
  """Timestamp of when execution of the task started, null if not yet started"""
  execStartedAt: Time
  """Timestamp of when execution of the task finished, null if not yet finished"""
  execFinishedAt: Time
  """Output from executing the task"""
  output: String
  """The size of the output in bytes"""
  outputSize: Int!
  """Error, if any, produced while executing the Task"""
  error: String
  quest: Quest!
  beacon: Beacon!
  """Processes that have been reported by this task."""
  reportedProcesses: [Process!]
}
"""A connection to a list of items."""
type TaskConnection {
  """A list of edges."""
  edges: [TaskEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Task connections"""
input TaskOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tasks."""
  field: TaskOrderField!
}
"""Properties by which Task connections can be ordered."""
enum TaskOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  CLAIMED_AT
  EXEC_STARTED_AT
  EXEC_FINISHED_AT
  OUTPUT_SIZE
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """claimed_at field predicates"""
  claimedAt: Time
  claimedAtNEQ: Time
  claimedAtIn: [Time!]
  claimedAtNotIn: [Time!]
  claimedAtGT: Time
  claimedAtGTE: Time
  claimedAtLT: Time
  claimedAtLTE: Time
  claimedAtIsNil: Boolean
  claimedAtNotNil: Boolean
  """exec_started_at field predicates"""
  execStartedAt: Time
  execStartedAtNEQ: Time
  execStartedAtIn: [Time!]
  execStartedAtNotIn: [Time!]
  execStartedAtGT: Time
  execStartedAtGTE: Time
  execStartedAtLT: Time
  execStartedAtLTE: Time
  execStartedAtIsNil: Boolean
  execStartedAtNotNil: Boolean
  """exec_finished_at field predicates"""
  execFinishedAt: Time
  execFinishedAtNEQ: Time
  execFinishedAtIn: [Time!]
  execFinishedAtNotIn: [Time!]
  execFinishedAtGT: Time
  execFinishedAtGTE: Time
  execFinishedAtLT: Time
  execFinishedAtLTE: Time
  execFinishedAtIsNil: Boolean
  execFinishedAtNotNil: Boolean
  """output field predicates"""
  output: String
  outputNEQ: String
  outputIn: [String!]
  outputNotIn: [String!]
  outputGT: String
  outputGTE: String
  outputLT: String
  outputLTE: String
  outputContains: String
  outputHasPrefix: String
  outputHasSuffix: String
  outputIsNil: Boolean
  outputNotNil: Boolean
  outputEqualFold: String
  outputContainsFold: String
  """output_size field predicates"""
  outputSize: Int
  outputSizeNEQ: Int
  outputSizeIn: [Int!]
  outputSizeNotIn: [Int!]
  outputSizeGT: Int
  outputSizeGTE: Int
  outputSizeLT: Int
  outputSizeLTE: Int
  """error field predicates"""
  error: String
  errorNEQ: String
  errorIn: [String!]
  errorNotIn: [String!]
  errorGT: String
  errorGTE: String
  errorLT: String
  errorLTE: String
  errorContains: String
  errorHasPrefix: String
  errorHasSuffix: String
  errorIsNil: Boolean
  errorNotNil: Boolean
  errorEqualFold: String
  errorContainsFold: String
  """quest edge predicates"""
  hasQuest: Boolean
  hasQuestWith: [QuestWhereInput!]
  """beacon edge predicates"""
  hasBeacon: Boolean
  hasBeaconWith: [BeaconWhereInput!]
  """reported_processes edge predicates"""
  hasReportedProcesses: Boolean
  hasReportedProcessesWith: [ProcessWhereInput!]
}
type Tome implements Node {
  id: ID!
  """Timestamp of when this ent was created"""
  createdAt: Time!
  """Timestamp of when this ent was last updated"""
  lastModifiedAt: Time!
  """Name of the tome"""
  name: String!
  """Information about the tome"""
  description: String!
  """JSON string describing what parameters are used with the tome. Requires a list of JSON objects, one for each parameter."""
  paramDefs: String
  """Eldritch script that will be executed when the tome is run"""
  eldritch: String!
  """Any files required for tome execution that will be bundled and provided to the agent for download"""
  files: [File!]
}
"""Ordering options for Tome connections"""
input TomeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tomes."""
  field: TomeOrderField!
}
"""Properties by which Tome connections can be ordered."""
enum TomeOrderField {
  CREATED_AT
  LAST_MODIFIED_AT
  NAME
}
"""
TomeWhereInput is used for filtering Tome objects.
Input was generated by ent.
"""
input TomeWhereInput {
  not: TomeWhereInput
  and: [TomeWhereInput!]
  or: [TomeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """last_modified_at field predicates"""
  lastModifiedAt: Time
  lastModifiedAtNEQ: Time
  lastModifiedAtIn: [Time!]
  lastModifiedAtNotIn: [Time!]
  lastModifiedAtGT: Time
  lastModifiedAtGTE: Time
  lastModifiedAtLT: Time
  lastModifiedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """param_defs field predicates"""
  paramDefs: String
  paramDefsNEQ: String
  paramDefsIn: [String!]
  paramDefsNotIn: [String!]
  paramDefsGT: String
  paramDefsGTE: String
  paramDefsLT: String
  paramDefsLTE: String
  paramDefsContains: String
  paramDefsHasPrefix: String
  paramDefsHasSuffix: String
  paramDefsIsNil: Boolean
  paramDefsNotNil: Boolean
  paramDefsEqualFold: String
  paramDefsContainsFold: String
  """eldritch field predicates"""
  eldritch: String
  eldritchNEQ: String
  eldritchIn: [String!]
  eldritchNotIn: [String!]
  eldritchGT: String
  eldritchGTE: String
  eldritchLT: String
  eldritchLTE: String
  eldritchContains: String
  eldritchHasPrefix: String
  eldritchHasSuffix: String
  eldritchEqualFold: String
  eldritchContainsFold: String
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
"""
UpdateBeaconInput is used for update Beacon object.
Input was generated by ent.
"""
input UpdateBeaconInput {
  hostID: ID
}
"""
UpdateHostInput is used for update Host object.
Input was generated by ent.
"""
input UpdateHostInput {
  """A human readable identifier for the host."""
  name: String
  clearName: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
  addBeaconIDs: [ID!]
  removeBeaconIDs: [ID!]
  clearBeacons: Boolean
  addProcessIDs: [ID!]
  removeProcessIDs: [ID!]
  clearProcesses: Boolean
}
"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  """Name of the tag"""
  name: String
  """Describes the type of tag this is"""
  kind: TagKind
  addHostIDs: [ID!]
  removeHostIDs: [ID!]
  clearHosts: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """The name displayed for the user"""
  name: String
  """URL to the user's profile photo."""
  photoURL: String
  """True if the user is active and able to authenticate"""
  isActivated: Boolean
  """True if the user is an Admin"""
  isAdmin: Boolean
}
type User implements Node {
  id: ID!
  """The name displayed for the user"""
  name: String!
  """URL to the user's profile photo."""
  photoURL: String!
  """True if the user is active and able to authenticate"""
  isActivated: Boolean!
  """True if the user is an Admin"""
  isAdmin: Boolean!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """photo_url field predicates"""
  photoURL: String
  photoURLNEQ: String
  photoURLIn: [String!]
  photoURLNotIn: [String!]
  photoURLGT: String
  photoURLGTE: String
  photoURLLT: String
  photoURLLTE: String
  photoURLContains: String
  photoURLHasPrefix: String
  photoURLHasSuffix: String
  photoURLEqualFold: String
  photoURLContainsFold: String
  """is_activated field predicates"""
  isActivated: Boolean
  isActivatedNEQ: Boolean
  """is_admin field predicates"""
  isAdmin: Boolean
  isAdminNEQ: Boolean
}
