{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_batch.cbcfc363.chunk.js","mappings":"2FAKA,SAASA,EAAMC,IACZ,SAAUA,GACT,IAAIC,EAAW,qBACXC,EAAY,CACdC,QAAS,+CACTC,MAAO,YACPC,OAAQ,CACNC,YAAa,MAGbC,EAAS,UACTC,EAAS,gBACbR,EAAMS,UAAUV,MAAQ,CACtBW,QAAS,CACP,SACA,CACEP,QAAS,6DACTQ,YAAY,IAGhBC,MAAO,CACLT,QAAS,QACTC,MAAO,YAETS,QAAS,CACP,CAEEV,QAAS,qFACTQ,YAAY,EACZN,OAAQ,CACNS,QAAS,wBACTP,OAAQA,EACRL,UAAWA,EACXD,SAAUA,EACVO,OAAQA,EACRF,YAAa,WAGjB,CAEEH,QAAS,wMACTQ,YAAY,EACZN,OAAQ,CACNS,QAAS,4DACTP,OAAQA,EACRL,UAAWA,EACXD,SAAUA,EACVO,OAAQA,EACRO,SAAU,2CAGd,CAEEZ,QAAS,8BACTQ,YAAY,EACZN,OAAQ,CACNS,QAAS,aAGb,CAEEX,QAAS,kGACTQ,YAAY,EACZN,OAAQ,CACNS,QAAS,UACTP,OAAQA,EACRL,UAAWA,EACXD,SAAU,CAACA,EAAU,mCACrBO,OAAQA,EACRO,SAAU,kCACVT,YAAa,WAGjB,CAEEH,QAAS,+DACTQ,YAAY,EACZN,OAAQ,CACNS,QAAS,UACTP,OAAQA,EACRL,UAAWA,EACXU,MAAO,CACLT,QAAS,cACTQ,YAAY,EACZP,MAAO,YAETH,SAAUA,EACVO,OAAQA,EACRO,SAAU,QAIhBA,SAAU,OACVT,YAAa,QAEhB,CA9FA,CA8FEN,EACL,CAnGAgB,EAAOC,QAAUlB,EACjBA,EAAMmB,YAAc,QACpBnB,EAAMoB,QAAU,E","sources":["../node_modules/refractor/lang/batch.js"],"sourcesContent":["'use strict'\n\nmodule.exports = batch\nbatch.displayName = 'batch'\nbatch.aliases = []\nfunction batch(Prism) {\n  ;(function(Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    }\n    var string = /\"[^\"]*\"/\n    var number = /(?:\\b|-)\\d+\\b/\n    Prism.languages.batch = {\n      comment: [\n        /^::.*/m,\n        {\n          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true\n        }\n      ],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [\n        {\n          // FOR command\n          pattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^for\\b|\\b(?:in|do)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // IF command\n          pattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            operator: /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i\n          }\n        },\n        {\n          // ELSE command\n          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^else\\b/i\n          }\n        },\n        {\n          // SET command\n          pattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^set\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n            number: number,\n            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // Other commands\n          pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^\\w+\\b/i,\n            string: string,\n            parameter: parameter,\n            label: {\n              pattern: /(^\\s*):\\S+/m,\n              lookbehind: true,\n              alias: 'property'\n            },\n            variable: variable,\n            number: number,\n            operator: /\\^/\n          }\n        }\n      ],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    }\n  })(Prism)\n}\n"],"names":["batch","Prism","variable","parameter","pattern","alias","inside","punctuation","string","number","languages","comment","lookbehind","label","command","keyword","operator","module","exports","displayName","aliases"],"sourceRoot":""}