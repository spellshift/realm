{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_markdown.902a3e21.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/markdown.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  ;(function(Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\n     * @returns {RegExp}\n     */\n    function createInline(pattern, starAlternative) {\n      pattern = pattern.replace(/<inner>/g, inner)\n      if (starAlternative) {\n        pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*')\n      }\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n    var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(\n      /__/g,\n      tableCell\n    )\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/\n      .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern: /(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // `code`\n          // ``code``\n          pattern: /``.+?``|`[^`\\r\\n]+`/,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#+.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source,\n          true\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source,\n          true\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/\n            .source,\n          false\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          variable: {\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          content: {\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function(token) {\n      ;['url', 'bold', 'italic', 'strike'].forEach(function(inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            var alias =\n              'language-' +\n              codeLang.content\n                .trim()\n                .split(/\\s+/)[0]\n                .toLowerCase() // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function(env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n      var codeLang = ''\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n      var grammar = Prism.languages[codeLang]\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function() {\n            var ele = document.getElementById(id)\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        // reverse Prism.util.encode\n        var code = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(code, grammar, codeLang)\n      }\n    })\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n"],"names":["markdown","Prism","inner","source","createInline","pattern","starAlternative","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","blockquote","alias","table","inside","lookbehind","punctuation","code","greedy","title","hr","list","variable","string","bold","content","italic","strike","url","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","trim","split","toLowerCase","push","classes","cls","match","exec","grammar","value","highlight","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","module","exports","displayName","aliases"],"sourceRoot":""}