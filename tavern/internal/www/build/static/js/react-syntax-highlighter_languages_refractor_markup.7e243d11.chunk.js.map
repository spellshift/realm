{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_markup.7e243d11.chunk.js","mappings":"4FAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,kBACTC,OAAQ,iBACRC,QAAS,sBACTC,MAAO,0BACPC,IAAK,CACHC,QAAS,wHACTC,QAAQ,EACRC,OAAQ,CACNH,IAAK,CACHC,QAAS,kBACTE,OAAQ,CACNC,YAAa,QACbC,UAAW,iBAGf,aAAc,CACZJ,QAAS,sCACTE,OAAQ,CACNC,YAAa,CACX,KACA,CACEH,QAAS,mBACTK,YAAY,MAKpBF,YAAa,OACb,YAAa,CACXH,QAAS,YACTE,OAAQ,CACNE,UAAW,mBAKnBE,OAAQ,qBAEVb,EAAMC,UAAUF,OAAY,IAAEU,OAAO,cAAcA,OAAe,OAChET,EAAMC,UAAUF,OAAe,OACjCC,EAAMc,MAAMC,IAAI,QAAQ,SAASC,GACd,WAAbA,EAAIC,OACND,EAAIE,WAAkB,MAAIF,EAAIG,QAAQC,MAAMC,QAAQ,QAAS,KAEjE,IACAC,OAAOC,eAAevB,EAAMC,UAAUF,OAAOO,IAAK,aAAc,CAY9Dc,MAAO,SAAoBI,EAASC,GAClC,IAAIC,EAAsB,CAAC,EAC3BA,EAAoB,YAAcD,GAAQ,CACxClB,QAAS,oCACTK,YAAY,EACZH,OAAQT,EAAMC,UAAUwB,IAE1BC,EAA2B,MAAI,uBAC/B,IAAIjB,EAAS,CACX,iBAAkB,CAChBF,QAAS,4BACTE,OAAQiB,IAGZjB,EAAO,YAAcgB,GAAQ,CAC3BlB,QAAS,UACTE,OAAQT,EAAMC,UAAUwB,IAE1B,IAAIE,EAAM,CAAC,EACXA,EAAIH,GAAW,CACbjB,QAASqB,OACP,mEAAmEC,OAAOR,QACxE,MACAG,GAEF,KAEFZ,YAAY,EACZJ,QAAQ,EACRC,OAAQA,GAEVT,EAAMC,UAAU6B,aAAa,SAAU,QAASH,EAClD,IAEF3B,EAAMC,UAAU8B,IAAM/B,EAAMC,UAAU+B,OAAO,SAAU,CAAC,GACxDhC,EAAMC,UAAUgC,KAAOjC,EAAMC,UAAUF,OACvCC,EAAMC,UAAUiC,OAASlC,EAAMC,UAAUF,OACzCC,EAAMC,UAAUkC,IAAMnC,EAAMC,UAAUF,MACxC,CApGAqC,EAAOC,QAAUtC,EACjBA,EAAOuC,YAAc,SACrBvC,EAAOwC,QAAU,CAAC,MAAO,OAAQ,SAAU,M","sources":["../node_modules/refractor/lang/markup.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markup\nmarkup.displayName = 'markup'\nmarkup.aliases = ['xml', 'html', 'mathml', 'svg']\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: /<!--[\\s\\S]*?-->/,\n    prolog: /<\\?[\\s\\S]+?\\?>/,\n    doctype: /<!DOCTYPE[\\s\\S]+?>/i,\n    cdata: /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/i,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n          inside: {\n            punctuation: [\n              /^=/,\n              {\n                pattern: /^(\\s*)[\"']|[\"']$/,\n                lookbehind: true\n              }\n            ]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: /&#?[\\da-z]{1,8};/i\n  }\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n    Prism.languages.markup['entity'] // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function(env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {}\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      }\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      }\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      }\n      var def = {}\n      def[tagName] = {\n        pattern: RegExp(\n          /(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(\n            /__/g,\n            tagName\n          ),\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      }\n      Prism.languages.insertBefore('markup', 'cdata', def)\n    }\n  })\n  Prism.languages.xml = Prism.languages.extend('markup', {})\n  Prism.languages.html = Prism.languages.markup\n  Prism.languages.mathml = Prism.languages.markup\n  Prism.languages.svg = Prism.languages.markup\n}\n"],"names":["markup","Prism","languages","comment","prolog","doctype","cdata","tag","pattern","greedy","inside","punctuation","namespace","lookbehind","entity","hooks","add","env","type","attributes","content","value","replace","Object","defineProperty","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","xml","extend","html","mathml","svg","module","exports","displayName","aliases"],"sourceRoot":""}