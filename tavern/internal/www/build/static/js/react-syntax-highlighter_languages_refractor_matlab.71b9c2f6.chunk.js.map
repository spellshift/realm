{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_matlab.71b9c2f6.chunk.js","mappings":"0FAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,CAAC,iBAAkB,OAC5BC,OAAQ,CACNC,QAAS,uBACTC,QAAQ,GAGVC,OAAQ,6DACRC,QAAS,8HACTC,SAAU,qBACVC,SAAU,0CACVC,YAAa,uBAEjB,CAjBAC,EAAOC,QAAUb,EACjBA,EAAOc,YAAc,SACrBd,EAAOe,QAAU,E","sources":["../node_modules/refractor/lang/matlab.js"],"sourcesContent":["'use strict'\n\nmodule.exports = matlab\nmatlab.displayName = 'matlab'\nmatlab.aliases = []\nfunction matlab(Prism) {\n  Prism.languages.matlab = {\n    comment: [/%\\{[\\s\\S]*?\\}%/, /%.+/],\n    string: {\n      pattern: /\\B'(?:''|[^'\\r\\n])*'/,\n      greedy: true\n    },\n    // FIXME We could handle imaginary numbers as a whole\n    number: /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n    keyword: /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*\\()/,\n    operator: /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n    punctuation: /\\.{3}|[.,;\\[\\](){}!]/\n  }\n}\n"],"names":["matlab","Prism","languages","comment","string","pattern","greedy","number","keyword","function","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}