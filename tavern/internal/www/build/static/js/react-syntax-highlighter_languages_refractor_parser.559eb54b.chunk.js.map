{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_parser.559eb54b.chunk.js","mappings":"2FAKA,SAASA,EAAOC,IACb,SAAUA,GACT,IAAID,EAAUC,EAAMC,UAAUF,OAASC,EAAMC,UAAUC,OAAO,SAAU,CACtEC,QAAS,CACPC,QAAS,+GACTC,YAAY,GAEdC,SAAU,CACRF,QAAS,4DACTC,YAAY,EACZE,OAAQ,CACNC,YAAa,UAGjBC,SAAU,CACRL,QAAS,iDACTC,YAAY,EACZE,OAAQ,CACNJ,QAAS,CACPC,QAAS,oBACTC,YAAY,GAEdG,YAAa,UAGjBE,OAAQ,CACNN,QAAS,qCACTO,MAAO,WAETH,YAAa,gBAEfT,EAASC,EAAMC,UAAUW,aAAa,SAAU,UAAW,CACzD,iBAAkB,CAChBR,QAAS,UACTC,YAAY,EACZM,MAAO,WAETE,WAAY,CAEVT,QAAS,uDACTU,QAAQ,EACRT,YAAY,EACZE,OAAQ,CACNQ,OAAQ,CACNX,QAAS,2CACTC,YAAY,GAEdF,QAASJ,EAAOI,QAChBG,SAAUP,EAAOO,SACjBG,SAAUV,EAAOU,SACjBO,QAAS,qBACTC,OAAQ,8CACRP,OAAQX,EAAOW,OACfQ,SAAU,iGACVV,YAAaT,EAAOS,gBAI1BT,EAASC,EAAMC,UAAUW,aACvB,SACA,cACA,CACEC,WAAYd,EAAOc,WACnBV,QAASJ,EAAOI,QAChBG,SAAUP,EAAOO,SACjBG,SAAUV,EAAOU,SACjBC,OAAQX,EAAOW,OACf,qBAAsB,CACpBN,QAASL,EAAOS,YAChBG,MAAO,gBAGXZ,EAAY,IAAEQ,OAAO,cAExB,CAzEA,CAyEEP,EACL,CA9EAmB,EAAOC,QAAUrB,EACjBA,EAAOsB,YAAc,SACrBtB,EAAOuB,QAAU,E","sources":["../node_modules/refractor/lang/parser.js"],"sourcesContent":["'use strict'\n\nmodule.exports = parser\nparser.displayName = 'parser'\nparser.aliases = []\nfunction parser(Prism) {\n  ;(function(Prism) {\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    }))\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:true|false)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    })\n    parser = Prism.languages.insertBefore(\n      'inside',\n      'punctuation',\n      {\n        expression: parser.expression,\n        keyword: parser.keyword,\n        variable: parser.variable,\n        function: parser.function,\n        escape: parser.escape,\n        'parser-punctuation': {\n          pattern: parser.punctuation,\n          alias: 'punctuation'\n        }\n      },\n      parser['tag'].inside['attr-value']\n    )\n  })(Prism)\n}\n"],"names":["parser","Prism","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator","module","exports","displayName","aliases"],"sourceRoot":""}