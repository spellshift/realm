{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_prolog.e4fd1910.chunk.js","mappings":"4FAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CAEvBG,QAAS,CAAC,MAAO,oBAEjBC,OAAQ,CACNC,QAAS,sDACTC,QAAQ,GAEVC,QAAS,6BACTC,SAAU,cAEVC,SAAU,6BACVC,OAAQ,cAERC,SAAU,iDACVC,YAAa,cAEjB,CArBAC,EAAOC,QAAUd,EACjBA,EAAOe,YAAc,SACrBf,EAAOgB,QAAU,E","sources":["../node_modules/refractor/lang/prolog.js"],"sourcesContent":["'use strict'\n\nmodule.exports = prolog\nprolog.displayName = 'prolog'\nprolog.aliases = []\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    variable: /\\b[A-Z_]\\w*/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+\\.?\\d*/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  }\n}\n"],"names":["prolog","Prism","languages","comment","string","pattern","greedy","builtin","variable","function","number","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}