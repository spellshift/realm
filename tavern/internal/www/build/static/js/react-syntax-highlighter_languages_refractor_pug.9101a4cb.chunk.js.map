{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_pug.9101a4cb.chunk.js","mappings":"4FAKA,SAASA,EAAIC,IACV,SAAUA,GAQTA,EAAMC,UAAUF,IAAM,CAGpBG,QAAS,CACPC,QAAS,gDACTC,YAAY,GAId,mBAAoB,CAClBD,QAAS,uFACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,aAI1BC,OAAQ,CACNL,QAAS,wEACTC,YAAY,EACZC,OAAQ,CACN,cAAe,CACbF,QAAS,WACTM,MAAO,cAIb,uBAAwB,CACtBN,QAAS,sFACTC,YAAY,GAEdM,OAAQ,CACNP,QAAS,gBACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUS,SAG1BC,QAAS,CACPR,QAAS,kCACTC,YAAY,GAGd,eAAgB,CACdD,QAAS,sEACTC,YAAY,EACZC,OAAQ,CACNO,KAAM,CACJT,QAAS,iBACTE,OAAQ,CACNQ,QAAS,kBACTC,YAAa,MAGjBC,OAAQ,CACNZ,QAAS,gDACTM,MAAO,WAETH,KAAMN,EAAMC,UAAUM,aAG1BM,QAAS,CACPV,QAAS,yDACTC,YAAY,GAEdY,MAAO,CAEL,CACEb,QAAS,qBACTC,YAAY,EACZC,OAAQ,CACNQ,QAAS,SACTI,SAAU,oBACVH,YAAa,WAGjB,CACEX,QAAS,iBACTC,YAAY,EACZC,OAAQ,CACNa,KAAM,CACJf,QAAS,SACTM,MAAO,YAETH,KAAMN,EAAMC,UAAUM,cAI5BY,OAAQ,CACNhB,QAAS,oDACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,aAG1B,aAAc,CACZJ,QAAS,qEACTC,YAAY,GAEdgB,IAAK,CACHjB,QAAS,+DACTC,YAAY,EACZC,OAAQ,CACNgB,WAAY,CACV,CACElB,QAAS,kBACTE,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,aAG1B,CACEJ,QAAS,YACTE,OAAQ,CACN,aAAc,CACZF,QAAS,iCACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,aAG1B,YAAa,2BACbO,YAAa,cAInBA,YAAa,MAGjBQ,KAAM,CACJ,CACEnB,QAAS,wBACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,cAI5BO,YAAa,aAyBf,IAvBA,IAAIS,EAAiB,oFAClBC,OACCC,EAAU,CACZ,CACEjB,OAAQ,OACRkB,SAAU,QAEZ,CACElB,OAAQ,SACRkB,SAAU,gBAEZ,MACA,aACA,OACA,aACA,WACA,CACElB,OAAQ,OACRkB,SAAU,QAEZ,UAEEC,EAAc,CAAC,EACVC,EAAI,EAAGC,EAAIJ,EAAQK,OAAQF,EAAIC,EAAGD,IAAK,CAC9C,IAAIpB,EAASiB,EAAQG,GACrBpB,EACoB,kBAAXA,EACH,CACEA,OAAQA,EACRkB,SAAUlB,GAEZA,EACFR,EAAMC,UAAUO,EAAOkB,YACzBC,EAAY,UAAYnB,EAAOA,QAAU,CACvCL,QAAS4B,OACPR,EAAeS,QAAQ,kBAAmBxB,EAAOA,QACjD,KAEFJ,YAAY,EACZC,OAAQ,CACN,cAAe,CACbF,QAAS,WACTM,MAAO,YAETH,KAAMN,EAAMC,UAAUO,EAAOkB,YAIrC,CACA1B,EAAMC,UAAUgC,aAAa,MAAO,SAAUN,EAC/C,CArMA,CAqME3B,EACL,CA1MAkC,EAAOC,QAAUpC,EACjBA,EAAIqC,YAAc,MAClBrC,EAAIsC,QAAU,E","sources":["../node_modules/refractor/lang/pug.js"],"sourcesContent":["'use strict'\n\nmodule.exports = pug\npug.displayName = 'pug'\npug.aliases = []\nfunction pug(Prism) {\n  ;(function(Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n        // Declaration\n        {\n          pattern: /(^[\\t ]*)mixin .+/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^mixin/,\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\n            punctuation: /[(),.]/\n          }\n        }, // Usage\n        {\n          pattern: /(^[\\t ]*)\\+.+/m,\n          lookbehind: true,\n          inside: {\n            name: {\n              pattern: /^\\+\\w+/,\n              alias: 'function'\n            },\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              pattern: /&[^(]+\\([^)]+\\)/,\n              inside: {\n                rest: Prism.languages.javascript\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                  lookbehind: true,\n                  inside: {\n                    rest: Prism.languages.javascript\n                  }\n                },\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[!=(),]+/\n              }\n            }\n          ],\n          punctuation: /:/\n        }\n      },\n      code: [\n        {\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      punctuation: /[.\\-!=|]+/\n    }\n    var filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/\n      .source // Non exhaustive list of available filters and associated languages\n    var filters = [\n      {\n        filter: 'atpl',\n        language: 'twig'\n      },\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'ejs',\n      'handlebars',\n      'less',\n      'livescript',\n      'markdown',\n      {\n        filter: 'sass',\n        language: 'scss'\n      },\n      'stylus'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter),\n            'm'\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\n  })(Prism)\n}\n"],"names":["pug","Prism","languages","comment","pattern","lookbehind","inside","rest","javascript","filter","alias","markup","doctype","each","keyword","punctuation","branch","mixin","function","name","script","tag","attributes","code","filter_pattern","source","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","module","exports","displayName","aliases"],"sourceRoot":""}