{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_puppet.c3dc3625.chunk.js","mappings":"2FAKA,SAASA,EAAOC,IACb,SAAUA,GACTA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,CAEP,CACEC,QAAS,uGACTC,YAAY,EACZC,MAAO,SACPC,OAAQ,CAENC,YAAa,sBAGjB,CACEJ,QAAS,qGACTC,YAAY,EACZI,QAAQ,EACRH,MAAO,SACPC,OAAQ,CAENC,YAAa,sBAGjB,CACEJ,QAAS,8CACTE,MAAO,SACPC,OAAQ,CACNC,YAAa,CACXJ,QAAS,gBACTC,YAAY,MAKpB,oBAAqB,CACnBD,QAAS,4BACTC,YAAY,EACZI,QAAQ,EACRH,MAAO,WAETI,MAAO,CAELN,QAAS,uFACTC,YAAY,EACZI,QAAQ,EACRF,OAAQ,CAEN,iBAAkB,CAChBH,QAAS,yCACTG,OAAQ,CACNI,QAAS,UAKjBA,QAAS,CACPP,QAAS,eACTC,YAAY,EACZI,QAAQ,GAEVG,OAAQ,CAENR,QAAS,wFACTK,QAAQ,EACRF,OAAQ,CACN,gBAAiB,CACfH,QAAS,cACTG,OAAQ,CACN,KAKRM,SAAU,CACRT,QAAS,yBACTG,OAAQ,CACNC,YAAa,OAGjB,YAAa,sBACbM,SAAU,CACR,CACEV,QAAS,gBACTC,YAAY,GAEd,oGAEFU,OAAQ,+CACRC,QAAS,qBAETC,QAAS,6IACTC,SAAU,CACRd,QAAS,gNACTE,MAAO,UAETa,SAAU,mFACVX,YAAa,oBAEf,IAAIY,EAAgB,CAClB,CAEEhB,QAAS,0EACTC,YAAY,EACZE,OAAQ,CACN,iBAAkB,CAEhBH,QAAS,uCACTC,YAAY,EACZC,MAAO,WACPC,OAAQ,CACNC,YAAa,OAGjBa,UAAW,CACTjB,QAAS,MACTE,MAAO,YAETgB,KAAMrB,EAAMC,UAAUF,SAG1B,CACEI,QAAS,kCACTC,YAAY,EACZC,MAAO,WACPC,OAAQ,CACNC,YAAa,QAInBP,EAAMC,UAAUF,OAAgB,QAAE,GAAGO,OAAOa,cAAgBA,EAC5DnB,EAAMC,UAAUF,OAAe,OAAEO,OAC/B,iBACAA,OAAOa,cAAgBA,CAC1B,CArIA,CAqIEnB,EACL,CA1IAsB,EAAOC,QAAUxB,EACjBA,EAAOyB,YAAc,SACrBzB,EAAO0B,QAAU,E","sources":["../node_modules/refractor/lang/puppet.js"],"sourcesContent":["'use strict'\n\nmodule.exports = puppet\npuppet.displayName = 'puppet'\npuppet.aliases = []\nfunction puppet(Prism) {\n  ;(function(Prism) {\n    Prism.languages.puppet = {\n      heredoc: [\n        // Matches the content of a quoted heredoc string (subject to interpolation)\n        {\n          pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n          lookbehind: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/ // See interpolation below\n          }\n        }, // Matches the content of an unquoted heredoc string (no interpolation)\n        {\n          pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/\n          }\n        }, // Matches the start tag of heredoc strings\n        {\n          pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n          alias: 'string',\n          inside: {\n            punctuation: {\n              pattern: /(\\().+?(?=\\))/,\n              lookbehind: true\n            }\n          }\n        }\n      ],\n      'multiline-comment': {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      },\n      regex: {\n        // Must be prefixed with the keyword \"node\" or a non-word char\n        pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // Extended regexes must have the x flag. They can contain single-line comments.\n          'extended-regex': {\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n            inside: {\n              comment: /#.*/\n            }\n          }\n        }\n      },\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      string: {\n        // Allow for one nested level of double quotes inside interpolation\n        pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          'double-quoted': {\n            pattern: /^\"[\\s\\S]*\"$/,\n            inside: {\n              // See interpolation below\n            }\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      'attr-name': /(?:\\w+|\\*)(?=\\s*=>)/,\n      function: [\n        {\n          pattern: /(\\.)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\n      ],\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n      boolean: /\\b(?:true|false)\\b/,\n      // Includes words reserved for future use\n      keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n      datatype: {\n        pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n        alias: 'symbol'\n      },\n      operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n      punctuation: /[\\[\\]{}().,;]|:+/\n    }\n    var interpolation = [\n      {\n        // Allow for one nested level of braces inside interpolation\n        pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n        lookbehind: true,\n        inside: {\n          'short-variable': {\n            // Negative look-ahead prevent wrong highlighting of functions\n            pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n            lookbehind: true,\n            alias: 'variable',\n            inside: {\n              punctuation: /::/\n            }\n          },\n          delimiter: {\n            pattern: /^\\$/,\n            alias: 'variable'\n          },\n          rest: Prism.languages.puppet\n        }\n      },\n      {\n        pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n        lookbehind: true,\n        alias: 'variable',\n        inside: {\n          punctuation: /::/\n        }\n      }\n    ]\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation\n    Prism.languages.puppet['string'].inside[\n      'double-quoted'\n    ].inside.interpolation = interpolation\n  })(Prism)\n}\n"],"names":["puppet","Prism","languages","heredoc","pattern","lookbehind","alias","inside","punctuation","greedy","regex","comment","string","variable","function","number","boolean","keyword","datatype","operator","interpolation","delimiter","rest","module","exports","displayName","aliases"],"sourceRoot":""}