def pad_pid(pid):
    pid_column_width = 16
    padding = pid_column_width - len(pid)
    return pid +  " "*padding

def pad_username (username):
    username_column_width = 32
    padding = username_column_width - len(username)
    return username +  " "*padding


def print_table(rows: list[list]):
    """Pretty print a table, auto adjusting width based on the row data"""
    def rpad(s: str, n: int, c=" "):
        return s + (n-len(s))*c
    # count columns
    counts = [0]*len(rows[0])
    for r in rows:
        for i, f in enumerate(r):
            counts[i] = max(len(f), counts[i])
    # Print the columns
    for r in rows:
        row = []
        for i, c in enumerate(r):
            row.append(rpad(c, counts[i]+2))
        print("".join(row))

def process_list(cmd_substring):

    if cmd_substring == '*':
        cmd_substring = ''

    procs = process.list()

    rows = [["PID", "PPID", "USER","COMMAND"]]
    for proc in sorted(procs, key=lambda x:x["pid"]):
        if cmd_substring in proc['command']:
            current_proc_command = proc['command']
            if current_proc_command == "":
                current_proc_command = proc['name']

            current_proc_pid = str(proc['pid'])
            current_proc_ppid = str(proc['ppid'])
            current_proc_username = proc['username']

            rows.append([
                str(proc['pid']),
                str(proc['ppid']),
                proc['username'],
                current_proc_command.replace("\n","\\n")[:80] # trim absurdly long cmds
            ])

    print_table(rows)

process_list(input_params['cmd_substring'])
print("")
